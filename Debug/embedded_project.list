
embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08009020  08009020  00019020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800955c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001e0  0800973c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800973c  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4b5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002325  00000000  00000000  0002f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d0f  00000000  00000000  000332a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee74  00000000  00000000  00055faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd8b6  00000000  00000000  00064e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001326d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  0013272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009004 	.word	0x08009004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009004 	.word	0x08009004

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f001 fa33 	bl	800235c <null_ptr_check>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d137      	bne.n	8000f72 <bme280_init+0x92>
    {
        while (try_count)
 8000f02:	e02c      	b.n	8000f5e <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f04:	f107 010d 	add.w	r1, r7, #13
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	20d0      	movs	r0, #208	; 0xd0
 8000f0e:	f000 f836 	bl	8000f7e <bme280_get_regs>
 8000f12:	4603      	mov	r3, r0
 8000f14:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d114      	bne.n	8000f48 <bme280_init+0x68>
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	2b60      	cmp	r3, #96	; 0x60
 8000f22:	d111      	bne.n	8000f48 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000f24:	7b7a      	ldrb	r2, [r7, #13]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f98f 	bl	800124e <bme280_soft_reset>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d114      	bne.n	8000f66 <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 f883 	bl	8002048 <get_calib_data>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8000f46:	e00e      	b.n	8000f66 <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6852      	ldr	r2, [r2, #4]
 8000f50:	4611      	mov	r1, r2
 8000f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f56:	4798      	blx	r3
            --try_count;
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1cf      	bne.n	8000f04 <bme280_init+0x24>
 8000f64:	e000      	b.n	8000f68 <bme280_init+0x88>
                break;
 8000f66:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000f6e:	23fe      	movs	r3, #254	; 0xfe
 8000f70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8000f7e:	b590      	push	{r4, r7, lr}
 8000f80:	b087      	sub	sp, #28
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f001 f9e3 	bl	800235c <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8000f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11f      	bne.n	8000fe2 <bme280_get_regs+0x64>
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d01c      	beq.n	8000fe2 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d003      	beq.n	8000fb8 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb6:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68dc      	ldr	r4, [r3, #12]
 8000fbc:	89ba      	ldrh	r2, [r7, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	7bf8      	ldrb	r0, [r7, #15]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	47a0      	blx	r4
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 8000fdc:	23fc      	movs	r3, #252	; 0xfc
 8000fde:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000fe0:	e001      	b.n	8000fe6 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}

08000ff2 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b08d      	sub	sp, #52	; 0x34
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b0a      	cmp	r3, #10
 8001006:	d901      	bls.n	800100c <bme280_set_regs+0x1a>
    {
        len = 10;
 8001008:	230a      	movs	r3, #10
 800100a:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f001 f9a5 	bl	800235c <null_ptr_check>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001018:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800101c:	2b00      	cmp	r3, #0
 800101e:	d159      	bne.n	80010d4 <bme280_set_regs+0xe2>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d056      	beq.n	80010d4 <bme280_set_regs+0xe2>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d053      	beq.n	80010d4 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d04c      	beq.n	80010cc <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	7a1b      	ldrb	r3, [r3, #8]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d01a      	beq.n	8001076 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001040:	2300      	movs	r3, #0
 8001042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001046:	e011      	b.n	800106c <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	440b      	add	r3, r1
 800105a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001066:	3301      	adds	r3, #1
 8001068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800106c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	429a      	cmp	r2, r3
 8001074:	d3e8      	bcc.n	8001048 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d90d      	bls.n	8001098 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f107 0114 	add.w	r1, r7, #20
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f001 f824 	bl	80020d2 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	b29b      	uxth	r3, r3
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001096:	e001      	b.n	800109c <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691c      	ldr	r4, [r3, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	7818      	ldrb	r0, [r3, #0]
 80010a4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f107 0114 	add.w	r1, r7, #20
 80010ae:	47a0      	blx	r4
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00b      	beq.n	80010dc <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 80010c4:	23fc      	movs	r3, #252	; 0xfc
 80010c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80010ca:	e007      	b.n	80010dc <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80010cc:	23fd      	movs	r3, #253	; 0xfd
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80010d2:	e003      	b.n	80010dc <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80010d4:	23ff      	movs	r3, #255	; 0xff
 80010d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010da:	e000      	b.n	80010de <bme280_set_regs+0xec>
        if (len != 0)
 80010dc:	bf00      	nop
    }

    return rslt;
 80010de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3734      	adds	r7, #52	; 0x34
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f001 f930 	bl	800235c <null_ptr_check>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d13f      	bne.n	8001188 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001108:	f107 030e 	add.w	r3, r7, #14
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f874 	bl	80011fc <bme280_get_sensor_mode>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <bme280_set_sensor_settings+0x46>
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f000 fb7e 	bl	8001828 <put_device_to_sleep>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 8001130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d127      	bne.n	8001188 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	2007      	movs	r0, #7
 800113e:	f001 f8f1 	bl	8002324 <are_settings_changed>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f9ba 	bl	80014cc <set_osr_settings>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <bme280_set_sensor_settings+0x9e>
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4619      	mov	r1, r3
 8001168:	2018      	movs	r0, #24
 800116a:	f001 f8db 	bl	8002324 <are_settings_changed>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fa41 	bl	8001606 <set_filter_standby_settings>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f001 f8db 	bl	800235c <null_ptr_check>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11e      	bne.n	80011f0 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011b2:	f107 030e 	add.w	r3, r7, #14
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f81f 	bl	80011fc <bme280_get_sensor_mode>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d107      	bne.n	80011da <bme280_set_sensor_mode+0x46>
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f000 fb29 	bl	8001828 <put_device_to_sleep>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 faeb 	bl	80017c2 <write_power_mode>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f001 f8a8 	bl	800235c <null_ptr_check>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d112      	bne.n	800123e <bme280_get_sensor_mode+0x42>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00f      	beq.n	800123e <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	20f4      	movs	r0, #244	; 0xf4
 8001226:	f7ff feaa 	bl	8000f7e <bme280_get_regs>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e001      	b.n	8001242 <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800123e:	23ff      	movs	r3, #255	; 0xff
 8001240:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001256:	23e0      	movs	r3, #224	; 0xe0
 8001258:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 800125e:	2305      	movs	r3, #5
 8001260:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001262:	23b6      	movs	r3, #182	; 0xb6
 8001264:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f001 f878 	bl	800235c <null_ptr_check>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d133      	bne.n	80012e0 <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001278:	f107 010b 	add.w	r1, r7, #11
 800127c:	f107 000d 	add.w	r0, r7, #13
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f7ff feb5 	bl	8000ff2 <bme280_set_regs>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d125      	bne.n	80012e0 <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6852      	ldr	r2, [r2, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a2:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	20f3      	movs	r0, #243	; 0xf3
 80012ae:	f7ff fe66 	bl	8000f7e <bme280_get_regs>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <bme280_soft_reset+0x84>
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	73ba      	strb	r2, [r7, #14]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <bme280_soft_reset+0x84>
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1e0      	bne.n	8001294 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80012d2:	7b3b      	ldrb	r3, [r7, #12]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80012dc:	23fa      	movs	r3, #250	; 0xfa
 80012de:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 f824 	bl	800235c <null_ptr_check>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800131a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131e:	2b00      	cmp	r3, #0
 8001320:	d124      	bne.n	800136c <bme280_get_sensor_data+0x80>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d021      	beq.n	800136c <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001328:	f107 011c 	add.w	r1, r7, #28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2208      	movs	r2, #8
 8001330:	20f7      	movs	r0, #247	; 0xf7
 8001332:	f7ff fe24 	bl	8000f7e <bme280_get_regs>
 8001336:	4603      	mov	r3, r0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 800133c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001340:	2b00      	cmp	r3, #0
 8001342:	d116      	bne.n	8001372 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001344:	f107 0210 	add.w	r2, r7, #16
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f815 	bl	800137e <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3318      	adds	r3, #24
 8001358:	f107 0110 	add.w	r1, r7, #16
 800135c:	7bf8      	ldrb	r0, [r7, #15]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f000 f853 	bl	800140a <bme280_compensate_data>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 800136a:	e002      	b.n	8001372 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001376:	4618      	mov	r0, r3
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3302      	adds	r3, #2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3303      	adds	r3, #3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	031b      	lsls	r3, r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3304      	adds	r3, #4
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3305      	adds	r3, #5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	431a      	orrs	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3306      	adds	r3, #6
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3307      	adds	r3, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	609a      	str	r2, [r3, #8]
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04b      	beq.n	80014bc <bme280_compensate_data+0xb2>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d048      	beq.n	80014bc <bme280_compensate_data+0xb2>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d045      	beq.n	80014bc <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f000 fa2c 	bl	80018c4 <compensate_temperature>
 800146c:	eeb0 7a40 	vmov.f32	s14, s0
 8001470:	eef0 7a60 	vmov.f32	s15, s1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed83 7b02 	vstr	d7, [r3, #8]
        }

        if (sensor_comp & BME280_PRESS)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f000 faee 	bl	8001a68 <compensate_pressure>
 800148c:	eeb0 7a40 	vmov.f32	s14, s0
 8001490:	eef0 7a60 	vmov.f32	s15, s1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ed83 7b00 	vstr	d7, [r3]
        }

        if (sensor_comp & BME280_HUM)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00d      	beq.n	80014c0 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f000 fcae 	bl	8001e08 <compensate_humidity>
 80014ac:	eeb0 7a40 	vmov.f32	s14, s0
 80014b0:	eef0 7a60 	vmov.f32	s15, s1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 80014ba:	e001      	b.n	80014c0 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80014bc:	23ff      	movs	r3, #255	; 0xff
 80014be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80014c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f000 f815 	bl	800151a <set_osr_humidity_settings>
 80014f0:	4603      	mov	r3, r0
 80014f2:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f842 	bl	800158e <set_osr_press_temp_settings>
 800150a:	4603      	mov	r3, r0
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800150e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001524:	23f2      	movs	r3, #242	; 0xf2
 8001526:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	b2db      	uxtb	r3, r3
 8001532:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001534:	f107 010e 	add.w	r1, r7, #14
 8001538:	f107 000c 	add.w	r0, r7, #12
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	f7ff fd57 	bl	8000ff2 <bme280_set_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d118      	bne.n	8001582 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001550:	23f4      	movs	r3, #244	; 0xf4
 8001552:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001554:	7b38      	ldrb	r0, [r7, #12]
 8001556:	f107 010d 	add.w	r1, r7, #13
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	f7ff fd0e 	bl	8000f7e <bme280_get_regs>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800156e:	f107 010d 	add.w	r1, r7, #13
 8001572:	f107 000c 	add.w	r0, r7, #12
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	f7ff fd3a 	bl	8000ff2 <bme280_set_regs>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800159c:	23f4      	movs	r3, #244	; 0xf4
 800159e:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015a0:	7db8      	ldrb	r0, [r7, #22]
 80015a2:	f107 0115 	add.w	r1, r7, #21
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f7ff fce8 	bl	8000f7e <bme280_get_regs>
 80015ae:	4603      	mov	r3, r0
 80015b0:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 80015b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11f      	bne.n	80015fa <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80015c4:	f107 0315 	add.w	r3, r7, #21
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f88e 	bl	80016ec <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80015da:	f107 0315 	add.w	r3, r7, #21
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8a0 	bl	8001726 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015e6:	f107 0115 	add.w	r1, r7, #21
 80015ea:	f107 0016 	add.w	r0, r7, #22
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f7ff fcfe 	bl	8000ff2 <bme280_set_regs>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001614:	23f5      	movs	r3, #245	; 0xf5
 8001616:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001618:	7db8      	ldrb	r0, [r7, #22]
 800161a:	f107 0115 	add.w	r1, r7, #21
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f7ff fcac 	bl	8000f7e <bme280_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 800162a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d11f      	bne.n	8001672 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 800163c:	f107 0315 	add.w	r3, r7, #21
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f81b 	bl	800167e <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001652:	f107 0315 	add.w	r3, r7, #21
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f82d 	bl	80016b8 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800165e:	f107 0115 	add.w	r1, r7, #21
 8001662:	f107 0016 	add.w	r0, r7, #22
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f7ff fcc2 	bl	8000ff2 <bme280_set_regs>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f023 031c 	bic.w	r3, r3, #28
 8001692:	b25a      	sxtb	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	b25b      	sxtb	r3, r3
 800169c:	f003 031c 	and.w	r3, r3, #28
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	701a      	strb	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f023 031c 	bic.w	r3, r3, #28
 8001700:	b25a      	sxtb	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f003 031c 	and.w	r3, r3, #28
 800170e:	b25b      	sxtb	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b25b      	sxtb	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	b25a      	sxtb	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	b2da      	uxtb	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3302      	adds	r3, #2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	109b      	asrs	r3, r3, #2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b2da      	uxtb	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3302      	adds	r3, #2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	b2da      	uxtb	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3303      	adds	r3, #3
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	109b      	asrs	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3303      	adds	r3, #3
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	711a      	strb	r2, [r3, #4]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	6039      	str	r1, [r7, #0]
 80017cc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017ce:	23f4      	movs	r3, #244	; 0xf4
 80017d0:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017d2:	7bb8      	ldrb	r0, [r7, #14]
 80017d4:	f107 010d 	add.w	r1, r7, #13
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	f7ff fbcf 	bl	8000f7e <bme280_get_regs>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d117      	bne.n	800181c <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f023 0303 	bic.w	r3, r3, #3
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b25b      	sxtb	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001808:	f107 010d 	add.w	r1, r7, #13
 800180c:	f107 000e 	add.w	r0, r7, #14
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2201      	movs	r2, #1
 8001814:	f7ff fbed 	bl	8000ff2 <bme280_set_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001830:	f107 0110 	add.w	r1, r7, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2204      	movs	r2, #4
 8001838:	20f2      	movs	r0, #242	; 0xf2
 800183a:	f7ff fba0 	bl	8000f7e <bme280_get_regs>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 800184a:	f107 0208 	add.w	r2, r7, #8
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff80 	bl	800175a <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fcf7 	bl	800124e <bme280_soft_reset>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f808 	bl	8001888 <reload_device_settings>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800187c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	201f      	movs	r0, #31
 8001898:	f7ff fe18 	bl	80014cc <set_osr_settings>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d106      	bne.n	80018b6 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	201f      	movs	r0, #31
 80018ae:	f7ff feaa 	bl	8001606 <set_filter_standby_settings>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <compensate_temperature+0x18c>)
 80018d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <compensate_temperature+0x190>)
 80018de:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2c 	bl	8000544 <__aeabi_ui2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <compensate_temperature+0x194>)
 80018f2:	f7fe ffcb 	bl	800088c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	461d      	mov	r5, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe1e 	bl	8000544 <__aeabi_ui2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <compensate_temperature+0x198>)
 800190e:	f7fe ffbd 	bl	800088c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fcd5 	bl	80002c8 <__aeabi_dsub>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe19 	bl	8000564 <__aeabi_i2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800193a:	f7fe fe7d 	bl	8000638 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdfa 	bl	8000544 <__aeabi_ui2d>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001958:	f7fe ff98 	bl	800088c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdeb 	bl	8000544 <__aeabi_ui2d>
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <compensate_temperature+0x19c>)
 8001974:	f7fe ff8a 	bl	800088c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fca2 	bl	80002c8 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800198c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001994:	f7fe fe50 	bl	8000638 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fddc 	bl	8000564 <__aeabi_i2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fe40 	bl	8000638 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80019c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c8:	f7fe fc80 	bl	80002cc <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8e0 	bl	8000b98 <__aeabi_d2iz>
 80019d8:	4602      	mov	r2, r0
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 80019de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e6:	f7fe fc71 	bl	80002cc <__adddf3>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <compensate_temperature+0x1a0>)
 80019f8:	f7fe ff48 	bl	800088c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 8001a04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a0c:	f7ff f886 	bl	8000b1c <__aeabi_dcmplt>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a1e:	e00c      	b.n	8001a3a <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a28:	f7ff f896 	bl	8000b58 <__aeabi_dcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8001a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a42:	eeb0 0a47 	vmov.f32	s0, s14
 8001a46:	eef0 0a67 	vmov.f32	s1, s15
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	c0440000 	.word	0xc0440000
 8001a54:	40554000 	.word	0x40554000
 8001a58:	40d00000 	.word	0x40d00000
 8001a5c:	40900000 	.word	0x40900000
 8001a60:	40c00000 	.word	0x40c00000
 8001a64:	40b40000 	.word	0x40b40000

08001a68 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001a72:	a3d9      	add	r3, pc, #868	; (adr r3, 8001dd8 <compensate_pressure+0x370>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001a7c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001de0 <compensate_pressure+0x378>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd6a 	bl	8000564 <__aeabi_i2d>
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a98:	f7fe fef8 	bl	800088c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4bc1      	ldr	r3, [pc, #772]	; (8001db0 <compensate_pressure+0x348>)
 8001aaa:	f7fe fc0d 	bl	80002c8 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8001ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001abe:	f7fe fdbb 	bl	8000638 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd47 	bl	8000564 <__aeabi_i2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fdab 	bl	8000638 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4bb1      	ldr	r3, [pc, #708]	; (8001db4 <compensate_pressure+0x34c>)
 8001af0:	f7fe fecc 	bl	800088c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd2e 	bl	8000564 <__aeabi_i2d>
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fd94 	bl	8000638 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	f7fe fbd6 	bl	80002cc <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b28:	f7fe fbd0 	bl	80002cc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b9f      	ldr	r3, [pc, #636]	; (8001db8 <compensate_pressure+0x350>)
 8001b3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b3e:	f7fe fea5 	bl	800088c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd07 	bl	8000564 <__aeabi_i2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <compensate_pressure+0x354>)
 8001b5c:	f7fe fd6c 	bl	8000638 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fbb0 	bl	80002cc <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcf2 	bl	8000564 <__aeabi_i2d>
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fd58 	bl	8000638 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	f7fe fd50 	bl	8000638 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b86      	ldr	r3, [pc, #536]	; (8001dc0 <compensate_pressure+0x358>)
 8001ba6:	f7fe fe71 	bl	800088c <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd3 	bl	8000564 <__aeabi_i2d>
 8001bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc2:	f7fe fd39 	bl	8000638 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd2:	f7fe fb7b 	bl	80002cc <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <compensate_pressure+0x358>)
 8001be4:	f7fe fe52 	bl	800088c <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <compensate_pressure+0x34c>)
 8001bf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bfa:	f7fe fe47 	bl	800088c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <compensate_pressure+0x35c>)
 8001c0c:	f7fe fb5e 	bl	80002cc <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	88db      	ldrh	r3, [r3, #6]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc91 	bl	8000544 <__aeabi_ui2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4620      	mov	r0, r4
 8001c28:	4629      	mov	r1, r5
 8001c2a:	f7fe fd05 	bl	8000638 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c42:	f7fe ff89 	bl	8000b58 <__aeabi_dcmpgt>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80cd 	beq.w	8001de8 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc76 	bl	8000544 <__aeabi_ui2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	4959      	ldr	r1, [pc, #356]	; (8001dc8 <compensate_pressure+0x360>)
 8001c62:	f7fe fb31 	bl	80002c8 <__aeabi_dsub>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <compensate_pressure+0x364>)
 8001c74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c78:	f7fe fe08 	bl	800088c <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c84:	f7fe fb20 	bl	80002c8 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	a345      	add	r3, pc, #276	; (adr r3, 8001da8 <compensate_pressure+0x340>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fccf 	bl	8000638 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca6:	f7fe fdf1 	bl	800088c <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc53 	bl	8000564 <__aeabi_i2d>
 8001cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc2:	f7fe fcb9 	bl	8000638 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd2:	f7fe fcb1 	bl	8000638 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <compensate_pressure+0x368>)
 8001ce4:	f7fe fdd2 	bl	800088c <__aeabi_ddiv>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc34 	bl	8000564 <__aeabi_i2d>
 8001cfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d00:	f7fe fc9a 	bl	8000638 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <compensate_pressure+0x34c>)
 8001d12:	f7fe fdbb 	bl	800088c <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8001d1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d26:	f7fe fad1 	bl	80002cc <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc13 	bl	8000564 <__aeabi_i2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fac1 	bl	80002cc <__adddf3>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <compensate_pressure+0x36c>)
 8001d58:	f7fe fd98 	bl	800088c <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d64:	f7fe fab2 	bl	80002cc <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 8001d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d78:	f7fe fed0 	bl	8000b1c <__aeabi_dcmplt>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8001d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d8a:	e031      	b.n	8001df0 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8001d8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d94:	f7fe fee0 	bl	8000b58 <__aeabi_dcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d028      	beq.n	8001df0 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8001d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001da6:	e023      	b.n	8001df0 <compensate_pressure+0x388>
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40b86a00 	.word	0x40b86a00
 8001db0:	40ef4000 	.word	0x40ef4000
 8001db4:	40e00000 	.word	0x40e00000
 8001db8:	40100000 	.word	0x40100000
 8001dbc:	40f00000 	.word	0x40f00000
 8001dc0:	41200000 	.word	0x41200000
 8001dc4:	3ff00000 	.word	0x3ff00000
 8001dc8:	41300000 	.word	0x41300000
 8001dcc:	40b00000 	.word	0x40b00000
 8001dd0:	41e00000 	.word	0x41e00000
 8001dd4:	40300000 	.word	0x40300000
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40dd4c00 	.word	0x40dd4c00
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8001df0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001df4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001df8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dfc:	eef0 0a67 	vmov.f32	s1, s15
 8001e00:	3738      	adds	r7, #56	; 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}
 8001e06:	bf00      	nop

08001e08 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b81      	ldr	r3, [pc, #516]	; (8002028 <compensate_humidity+0x220>)
 8001e24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb99 	bl	8000564 <__aeabi_i2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b7d      	ldr	r3, [pc, #500]	; (800202c <compensate_humidity+0x224>)
 8001e38:	f7fe fa46 	bl	80002c8 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb8a 	bl	8000564 <__aeabi_i2d>
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <compensate_humidity+0x228>)
 8001e56:	f7fe fbef 	bl	8000638 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	461d      	mov	r5, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb7b 	bl	8000564 <__aeabi_i2d>
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <compensate_humidity+0x22c>)
 8001e74:	f7fe fd0a 	bl	800088c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e84:	f7fe fbd8 	bl	8000638 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f7fe fa1c 	bl	80002cc <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb4f 	bl	8000544 <__aeabi_ui2d>
 8001ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eaa:	f7fe fa0d 	bl	80002c8 <__aeabi_dsub>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb51 	bl	8000564 <__aeabi_i2d>
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <compensate_humidity+0x230>)
 8001ec8:	f7fe fce0 	bl	800088c <__aeabi_ddiv>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb33 	bl	8000544 <__aeabi_ui2d>
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b56      	ldr	r3, [pc, #344]	; (800203c <compensate_humidity+0x234>)
 8001ee4:	f7fe fcd2 	bl	800088c <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ef4:	f7fe fba0 	bl	8000638 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <compensate_humidity+0x238>)
 8001f06:	f7fe f9e1 	bl	80002cc <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb23 	bl	8000564 <__aeabi_i2d>
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <compensate_humidity+0x234>)
 8001f24:	f7fe fcb2 	bl	800088c <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f34:	f7fe fb80 	bl	8000638 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f44:	f7fe fb78 	bl	8000638 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <compensate_humidity+0x238>)
 8001f56:	f7fe f9b9 	bl	80002cc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f6a:	f7fe fb65 	bl	8000638 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
 8001f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f7e:	f7fe fb5b 	bl	8000638 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4620      	mov	r0, r4
 8001f88:	4629      	mov	r1, r5
 8001f8a:	f7fe fb55 	bl	8000638 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7e1b      	ldrb	r3, [r3, #24]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fad2 	bl	8000544 <__aeabi_ui2d>
 8001fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa4:	f7fe fb48 	bl	8000638 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <compensate_humidity+0x23c>)
 8001fb6:	f7fe fc69 	bl	800088c <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	491f      	ldr	r1, [pc, #124]	; (8002040 <compensate_humidity+0x238>)
 8001fc4:	f7fe f980 	bl	80002c8 <__aeabi_dsub>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd0:	f7fe fb32 	bl	8000638 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 8001fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fe0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fe4:	f7fe fdb8 	bl	8000b58 <__aeabi_dcmpgt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8001fee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ff2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001ff6:	e00c      	b.n	8002012 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8001ff8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ffc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002000:	f7fe fd8c 	bl	8000b1c <__aeabi_dcmplt>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 800200a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800200e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8002012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002016:	ec43 2b17 	vmov	d7, r2, r3
}
 800201a:	eeb0 0a47 	vmov.f32	s0, s14
 800201e:	eef0 0a67 	vmov.f32	s1, s15
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	bdb0      	pop	{r4, r5, r7, pc}
 8002028:	40590000 	.word	0x40590000
 800202c:	40f2c000 	.word	0x40f2c000
 8002030:	40500000 	.word	0x40500000
 8002034:	40d00000 	.word	0x40d00000
 8002038:	40f00000 	.word	0x40f00000
 800203c:	41900000 	.word	0x41900000
 8002040:	3ff00000 	.word	0x3ff00000
 8002044:	41200000 	.word	0x41200000

08002048 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002050:	2388      	movs	r3, #136	; 0x88
 8002052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800206c:	f107 010c 	add.w	r1, r7, #12
 8002070:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	221a      	movs	r2, #26
 8002078:	f7fe ff81 	bl	8000f7e <bme280_get_regs>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8002082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11d      	bne.n	80020c6 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f84a 	bl	800212a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002096:	23e1      	movs	r3, #225	; 0xe1
 8002098:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800209c:	f107 010c 	add.w	r1, r7, #12
 80020a0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2207      	movs	r2, #7
 80020a8:	f7fe ff69 	bl	8000f7e <bme280_get_regs>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 80020b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f8e1 	bl	8002288 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80020c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
 80020e4:	e016      	b.n	8002114 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	441a      	add	r2, r3
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	440b      	add	r3, r1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	441a      	add	r2, r3
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4619      	mov	r1, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	440b      	add	r3, r1
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	3301      	adds	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]
 8002114:	7dfa      	ldrb	r2, [r7, #23]
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3e4      	bcc.n	80020e6 <interleave_reg_addr+0x14>
    }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3318      	adds	r3, #24
 8002138:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3301      	adds	r3, #1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21a      	sxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3303      	adds	r3, #3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21a      	sxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3302      	adds	r3, #2
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3305      	adds	r3, #5
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b21a      	sxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21a      	sxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3307      	adds	r3, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3306      	adds	r3, #6
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21b      	sxth	r3, r3
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3309      	adds	r3, #9
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3308      	adds	r3, #8
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	330b      	adds	r3, #11
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330a      	adds	r3, #10
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	330d      	adds	r3, #13
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	330c      	adds	r3, #12
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	330f      	adds	r3, #15
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330e      	adds	r3, #14
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b21a      	sxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3311      	adds	r3, #17
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3310      	adds	r3, #16
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21a      	sxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3313      	adds	r3, #19
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3312      	adds	r3, #18
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21a      	sxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3315      	adds	r3, #21
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3314      	adds	r3, #20
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21a      	sxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3317      	adds	r3, #23
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21a      	sxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3316      	adds	r3, #22
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e5a      	ldrb	r2, [r3, #25]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	3318      	adds	r3, #24
 8002296:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	789a      	ldrb	r2, [r3, #2]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3303      	adds	r3, #3
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80022d6:	8a7a      	ldrh	r2, [r7, #18]
 80022d8:	8a3b      	ldrh	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3305      	adds	r3, #5
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80022fe:	89fa      	ldrh	r2, [r7, #14]
 8002300:	89bb      	ldrh	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	b21a      	sxth	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3306      	adds	r3, #6
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b25a      	sxtb	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	4613      	mov	r3, r2
 8002332:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	4013      	ands	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <null_ptr_check+0x26>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <null_ptr_check+0x26>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <null_ptr_check+0x26>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8002382:	23ff      	movs	r3, #255	; 0xff
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e001      	b.n	800238c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <DWT_Delay_Init+0x58>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <DWT_Delay_Init+0x58>)
 80023a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023aa:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <DWT_Delay_Init+0x58>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <DWT_Delay_Init+0x58>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b6:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80023d6:	bf00      	nop
  __NOP();
 80023d8:	bf00      	nop
  __NOP();
 80023da:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <DWT_Delay_Init+0x5c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <DWT_Delay_Init+0x4c>
  {
    return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80023e8:	2301      	movs	r3, #1
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000edf0 	.word	0xe000edf0
 80023f8:	e0001000 	.word	0xe0001000

080023fc <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <DWT_Delay_us+0x40>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800240a:	f002 fc19 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 800240e:	4603      	mov	r3, r0
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <DWT_Delay_us+0x44>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8002420:	bf00      	nop
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <DWT_Delay_us+0x40>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad2      	subs	r2, r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d3f8      	bcc.n	8002422 <DWT_Delay_us+0x26>
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e0001000 	.word	0xe0001000
 8002440:	431bde83 	.word	0x431bde83

08002444 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <lcd16x2_enablePulse+0x34>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <lcd16x2_enablePulse+0x38>)
 800244e:	8811      	ldrh	r1, [r2, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fb34 	bl	8003ac0 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8002458:	2014      	movs	r0, #20
 800245a:	f7ff ffcf 	bl	80023fc <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <lcd16x2_enablePulse+0x34>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a06      	ldr	r2, [pc, #24]	; (800247c <lcd16x2_enablePulse+0x38>)
 8002464:	8811      	ldrh	r1, [r2, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f001 fb29 	bl	8003ac0 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800246e:	203c      	movs	r0, #60	; 0x3c
 8002470:	f7ff ffc4 	bl	80023fc <DWT_Delay_us>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200001fc 	.word	0x200001fc
 800247c:	20000202 	.word	0x20000202

08002480 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <lcd16x2_rs+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <lcd16x2_rs+0x28>)
 8002490:	8811      	ldrh	r1, [r2, #0]
 8002492:	79fa      	ldrb	r2, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fb13 	bl	8003ac0 <HAL_GPIO_WritePin>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200001fc 	.word	0x200001fc
 80024a8:	20000200 	.word	0x20000200

080024ac <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <lcd16x2_write+0x198>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05a      	beq.n	8002582 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <lcd16x2_write+0x19c>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4b5e      	ldr	r3, [pc, #376]	; (800264c <lcd16x2_write+0x1a0>)
 80024d2:	8819      	ldrh	r1, [r3, #0]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	f001 faef 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <lcd16x2_write+0x19c>)
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <lcd16x2_write+0x1a4>)
 80024e8:	8819      	ldrh	r1, [r3, #0]
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	f001 fae4 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <lcd16x2_write+0x19c>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	4b55      	ldr	r3, [pc, #340]	; (8002654 <lcd16x2_write+0x1a8>)
 80024fe:	8819      	ldrh	r1, [r3, #0]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	f001 fad9 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <lcd16x2_write+0x19c>)
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <lcd16x2_write+0x1ac>)
 8002514:	8819      	ldrh	r1, [r3, #0]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	f001 face 	bl	8003ac0 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <lcd16x2_write+0x1b0>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <lcd16x2_write+0x1b4>)
 800252a:	8819      	ldrh	r1, [r3, #0]
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	f001 fac3 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <lcd16x2_write+0x1b0>)
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <lcd16x2_write+0x1b8>)
 8002540:	8819      	ldrh	r1, [r3, #0]
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	f001 fab8 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <lcd16x2_write+0x1b0>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	4b44      	ldr	r3, [pc, #272]	; (8002668 <lcd16x2_write+0x1bc>)
 8002556:	8819      	ldrh	r1, [r3, #0]
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	f001 faad 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <lcd16x2_write+0x1b0>)
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	4b40      	ldr	r3, [pc, #256]	; (800266c <lcd16x2_write+0x1c0>)
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	f001 faa2 	bl	8003ac0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800257c:	f7ff ff62 	bl	8002444 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8002580:	e05b      	b.n	800263a <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <lcd16x2_write+0x1b0>)
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	4b36      	ldr	r3, [pc, #216]	; (8002660 <lcd16x2_write+0x1b4>)
 8002588:	8819      	ldrh	r1, [r3, #0]
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	f001 fa94 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002598:	4b30      	ldr	r3, [pc, #192]	; (800265c <lcd16x2_write+0x1b0>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <lcd16x2_write+0x1b8>)
 800259e:	8819      	ldrh	r1, [r3, #0]
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	f001 fa89 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <lcd16x2_write+0x1b0>)
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <lcd16x2_write+0x1bc>)
 80025b4:	8819      	ldrh	r1, [r3, #0]
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	f001 fa7e 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <lcd16x2_write+0x1b0>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <lcd16x2_write+0x1c0>)
 80025ca:	8819      	ldrh	r1, [r3, #0]
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	f001 fa73 	bl	8003ac0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80025da:	f7ff ff33 	bl	8002444 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <lcd16x2_write+0x1b0>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <lcd16x2_write+0x1b4>)
 80025e4:	8819      	ldrh	r1, [r3, #0]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	f001 fa66 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <lcd16x2_write+0x1b0>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <lcd16x2_write+0x1b8>)
 80025fa:	8819      	ldrh	r1, [r3, #0]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	f001 fa5b 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <lcd16x2_write+0x1b0>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <lcd16x2_write+0x1bc>)
 8002610:	8819      	ldrh	r1, [r3, #0]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	f001 fa50 	bl	8003ac0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <lcd16x2_write+0x1b0>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <lcd16x2_write+0x1c0>)
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	f001 fa45 	bl	8003ac0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002636:	f7ff ff05 	bl	8002444 <lcd16x2_enablePulse>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000
 8002648:	20000204 	.word	0x20000204
 800264c:	20000208 	.word	0x20000208
 8002650:	2000020a 	.word	0x2000020a
 8002654:	2000020c 	.word	0x2000020c
 8002658:	2000020e 	.word	0x2000020e
 800265c:	20000210 	.word	0x20000210
 8002660:	20000214 	.word	0x20000214
 8002664:	20000216 	.word	0x20000216
 8002668:	20000218 	.word	0x20000218
 800266c:	2000021a 	.word	0x2000021a

08002670 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff ff00 	bl	8002480 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff12 	bl	80024ac <lcd16x2_write>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fef0 	bl	8002480 <lcd16x2_rs>
  lcd16x2_write(data);
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff02 	bl	80024ac <lcd16x2_write>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fedc 	bl	8002480 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <lcd16x2_write4+0x7c>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <lcd16x2_write4+0x80>)
 80026ce:	8819      	ldrh	r1, [r3, #0]
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	f001 f9f1 	bl	8003ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <lcd16x2_write4+0x7c>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <lcd16x2_write4+0x84>)
 80026e4:	8819      	ldrh	r1, [r3, #0]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	f001 f9e6 	bl	8003ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <lcd16x2_write4+0x7c>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <lcd16x2_write4+0x88>)
 80026fa:	8819      	ldrh	r1, [r3, #0]
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	f001 f9db 	bl	8003ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <lcd16x2_write4+0x7c>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <lcd16x2_write4+0x8c>)
 8002710:	8819      	ldrh	r1, [r3, #0]
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	f001 f9d0 	bl	8003ac0 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8002720:	f7ff fe90 	bl	8002444 <lcd16x2_enablePulse>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000210 	.word	0x20000210
 8002730:	20000214 	.word	0x20000214
 8002734:	20000216 	.word	0x20000216
 8002738:	20000218 	.word	0x20000218
 800273c:	2000021a 	.word	0x2000021a

08002740 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	4613      	mov	r3, r2
 8002750:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8002752:	f7ff fe23 	bl	800239c <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8002756:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <lcd16x2_init_4bits+0xa8>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <lcd16x2_init_4bits+0xac>)
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8002762:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <lcd16x2_init_4bits+0xb0>)
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <lcd16x2_init_4bits+0xb4>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <lcd16x2_init_4bits+0xb8>)
 8002770:	8b3b      	ldrh	r3, [r7, #24]
 8002772:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8002774:	4a21      	ldr	r2, [pc, #132]	; (80027fc <lcd16x2_init_4bits+0xbc>)
 8002776:	8bbb      	ldrh	r3, [r7, #28]
 8002778:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <lcd16x2_init_4bits+0xc0>)
 800277c:	8c3b      	ldrh	r3, [r7, #32]
 800277e:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <lcd16x2_init_4bits+0xc4>)
 8002782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002784:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <lcd16x2_init_4bits+0xc8>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <lcd16x2_init_4bits+0xcc>)
 800278e:	2228      	movs	r2, #40	; 0x28
 8002790:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8002792:	2014      	movs	r0, #20
 8002794:	f000 fe38 	bl	8003408 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8002798:	2003      	movs	r0, #3
 800279a:	f7ff ff89 	bl	80026b0 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 800279e:	2005      	movs	r0, #5
 80027a0:	f000 fe32 	bl	8003408 <HAL_Delay>
  lcd16x2_write4(0x3);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f7ff ff83 	bl	80026b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f000 fe2c 	bl	8003408 <HAL_Delay>
  lcd16x2_write4(0x3);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f7ff ff7d 	bl	80026b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 fe26 	bl	8003408 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80027bc:	2002      	movs	r0, #2
 80027be:	f7ff ff77 	bl	80026b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 fe20 	bl	8003408 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80027c8:	2028      	movs	r0, #40	; 0x28
 80027ca:	f7ff ff51 	bl	8002670 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80027ce:	200f      	movs	r0, #15
 80027d0:	f7ff ff4e 	bl	8002670 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff ff4b 	bl	8002670 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80027da:	2003      	movs	r0, #3
 80027dc:	f000 fe14 	bl	8003408 <HAL_Delay>
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001fc 	.word	0x200001fc
 80027ec:	20000200 	.word	0x20000200
 80027f0:	20000202 	.word	0x20000202
 80027f4:	20000210 	.word	0x20000210
 80027f8:	20000214 	.word	0x20000214
 80027fc:	20000216 	.word	0x20000216
 8002800:	20000218 	.word	0x20000218
 8002804:	2000021a 	.word	0x2000021a
 8002808:	20000000 	.word	0x20000000
 800280c:	20000001 	.word	0x20000001

08002810 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	460a      	mov	r2, r1
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	4613      	mov	r3, r2
 800281e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002834:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff19 	bl	8002670 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800283e:	e007      	b.n	8002850 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002846:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff10 	bl	8002670 <lcd16x2_writeCommand>
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 800285c:	2100      	movs	r1, #0
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff ffd6 	bl	8002810 <lcd16x2_setCursor>
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 800286c:	2100      	movs	r1, #0
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff ffce 	bl	8002810 <lcd16x2_setCursor>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800287c:	2001      	movs	r0, #1
 800287e:	f7ff fef7 	bl	8002670 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 fdc0 	bl	8003408 <HAL_Delay>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 800288c:	b40f      	push	{r0, r1, r2, r3}
 800288e:	b590      	push	{r4, r7, lr}
 8002890:	b089      	sub	sp, #36	; 0x24
 8002892:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8002894:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002898:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 f998 	bl	8006bd8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e00b      	b.n	80028c6 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	f107 0220 	add.w	r2, r7, #32
 80028b4:	4413      	add	r3, r2
 80028b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fee8 	bl	8002690 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	3301      	adds	r3, #1
 80028c4:	77fb      	strb	r3, [r7, #31]
 80028c6:	7ffc      	ldrb	r4, [r7, #31]
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fc9f 	bl	8000210 <strlen>
 80028d2:	4603      	mov	r3, r0
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d202      	bcs.n	80028de <lcd16x2_printf+0x52>
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	d9e7      	bls.n	80028ae <lcd16x2_printf+0x22>
  }
}
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80028e8:	b004      	add	sp, #16
 80028ea:	4770      	bx	lr

080028ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 80028f4:	1d39      	adds	r1, r7, #4
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	2201      	movs	r2, #1
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <__io_putchar+0x20>)
 80028fe:	f002 fe70 	bl	80055e2 <HAL_UART_Transmit>
	return ch;
 8002902:	687b      	ldr	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200002e0 	.word	0x200002e0

08002910 <bme280_init_indoor>:

int8_t bme280_init_indoor(void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

	int8_t rslt = BME280_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t settings_sel;
	uint8_t dev_addr = (BME280_I2C_ADDR_PRIM << 1);
 800291a:	23ec      	movs	r3, #236	; 0xec
 800291c:	717b      	strb	r3, [r7, #5]

	dev.intf_ptr = &dev_addr;
 800291e:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002920:	1d7b      	adds	r3, r7, #5
 8002922:	6053      	str	r3, [r2, #4]
	dev.intf = BME280_I2C_INTF;
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002926:	2201      	movs	r2, #1
 8002928:	721a      	strb	r2, [r3, #8]
	dev.read = user_i2c_read;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <bme280_init_indoor+0xa8>)
 800292c:	4a23      	ldr	r2, [pc, #140]	; (80029bc <bme280_init_indoor+0xac>)
 800292e:	60da      	str	r2, [r3, #12]
	dev.write = user_i2c_write;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <bme280_init_indoor+0xb0>)
 8002934:	611a      	str	r2, [r3, #16]
	dev.delay_us = user_delay_ms;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <bme280_init_indoor+0xb4>)
 800293a:	615a      	str	r2, [r3, #20]

	rslt = bme280_init(&dev);
 800293c:	481e      	ldr	r0, [pc, #120]	; (80029b8 <bme280_init_indoor+0xa8>)
 800293e:	f7fe facf 	bl	8000ee0 <bme280_init>
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]

	/* Recommended mode of operation: Indoor navigation */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002960:	2204      	movs	r2, #4
 8002962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	settings_sel = BME280_OSR_PRESS_SEL;
 800296e:	2301      	movs	r3, #1
 8002970:	71bb      	strb	r3, [r7, #6]
	settings_sel |= BME280_OSR_TEMP_SEL;
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	71bb      	strb	r3, [r7, #6]
	settings_sel |= BME280_OSR_HUM_SEL;
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	71bb      	strb	r3, [r7, #6]
	settings_sel |= BME280_STANDBY_SEL;
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	71bb      	strb	r3, [r7, #6]
	settings_sel |= BME280_FILTER_SEL;
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	71bb      	strb	r3, [r7, #6]
	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	4908      	ldr	r1, [pc, #32]	; (80029b8 <bme280_init_indoor+0xa8>)
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fba7 	bl	80010ea <bme280_set_sensor_settings>
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80029a0:	4905      	ldr	r1, [pc, #20]	; (80029b8 <bme280_init_indoor+0xa8>)
 80029a2:	2003      	movs	r0, #3
 80029a4:	f7fe fbf6 	bl	8001194 <bme280_set_sensor_mode>
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]

	return rslt;
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000021c 	.word	0x2000021c
 80029bc:	08002a49 	.word	0x08002a49
 80029c0:	08002aa9 	.word	0x08002aa9
 80029c4:	08002b09 	.word	0x08002b09

080029c8 <bme280_read>:

int8_t bme280_read(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
	int8_t rslt;

	printf("Temperature, Pressure, Humidity\r\n");
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <bme280_read+0x3c>)
 80029d0:	f004 f8e4 	bl	8006b9c <puts>
	/* Delay while the sensor completes a measurement */
	dev.delay_us(70, dev.intf_ptr);
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <bme280_read+0x40>)
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <bme280_read+0x40>)
 80029da:	6852      	ldr	r2, [r2, #4]
 80029dc:	4611      	mov	r1, r2
 80029de:	2046      	movs	r0, #70	; 0x46
 80029e0:	4798      	blx	r3
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <bme280_read+0x40>)
 80029e4:	4909      	ldr	r1, [pc, #36]	; (8002a0c <bme280_read+0x44>)
 80029e6:	2007      	movs	r0, #7
 80029e8:	f7fe fc80 	bl	80012ec <bme280_get_sensor_data>
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
	print_sensor_data(&comp_data);
 80029f0:	4806      	ldr	r0, [pc, #24]	; (8002a0c <bme280_read+0x44>)
 80029f2:	f000 f80d 	bl	8002a10 <print_sensor_data>

	return rslt;
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	08009020 	.word	0x08009020
 8002a08:	2000021c 	.word	0x2000021c
 8002a0c:	20000268 	.word	0x20000268

08002a10 <print_sensor_data>:

void print_sensor_data(struct bme280_data *comp_data)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	6078      	str	r0, [r7, #4]
#ifdef BME280_FLOAT_ENABLE
        printf("%0.2f, %0.2f, %0.2f\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	4803      	ldr	r0, [pc, #12]	; (8002a44 <print_sensor_data+0x34>)
 8002a38:	f004 f82a 	bl	8006a90 <iprintf>

#else
        printf("%ld, %ld, %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
#endif
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}
 8002a44:	08009044 	.word	0x08009044

08002a48 <user_i2c_read>:

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
    rslt = HAL_I2C_Mem_Read(&hi2c1, BME280_I2C_ADDR_PRIM << 1, reg_addr, 1, reg_data, len, HAL_MAX_DELAY);
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	9102      	str	r1, [sp, #8]
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2301      	movs	r3, #1
 8002a72:	21ec      	movs	r1, #236	; 0xec
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <user_i2c_read+0x58>)
 8002a76:	f001 fa7b 	bl	8003f70 <HAL_I2C_Mem_Read>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    if(rslt != HAL_OK) {
 8002a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <user_i2c_read+0x4a>
    	printf("Read error code: %d\n", rslt);
 8002a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <user_i2c_read+0x5c>)
 8002a8e:	f003 ffff 	bl	8006a90 <iprintf>
    }

    return rslt;
 8002a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000028c 	.word	0x2000028c
 8002aa4:	0800905c 	.word	0x0800905c

08002aa8 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af04      	add	r7, sp, #16
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
    rslt = HAL_I2C_Mem_Write(&hi2c1, BME280_I2C_ADDR_PRIM << 1, reg_addr, 1, reg_data, len, HAL_MAX_DELAY);
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	9102      	str	r1, [sp, #8]
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	21ec      	movs	r1, #236	; 0xec
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <user_i2c_write+0x58>)
 8002ad6:	f001 f951 	bl	8003d7c <HAL_I2C_Mem_Write>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]

    if(rslt != HAL_OK) {
 8002ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <user_i2c_write+0x4a>
        	printf("Write error code: %d\n", rslt);
 8002ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <user_i2c_write+0x5c>)
 8002aee:	f003 ffcf 	bl	8006a90 <iprintf>
        }
    return rslt;
 8002af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000028c 	.word	0x2000028c
 8002b04:	08009074 	.word	0x08009074

08002b08 <user_delay_ms>:

void user_delay_ms(uint32_t period, void *intf_ptr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fc78 	bl	8003408 <HAL_Delay>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b26:	f000 fbfd 	bl	8003324 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b2a:	f000 f89d 	bl	8002c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b2e:	f000 f961 	bl	8002df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b32:	f000 f935 	bl	8002da0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002b36:	f000 f905 	bl	8002d44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("BME Configuration Start!\n\r");
 8002b3a:	483d      	ldr	r0, [pc, #244]	; (8002c30 <main+0x110>)
 8002b3c:	f003 ffa8 	bl	8006a90 <iprintf>
  if((err = bme280_init_indoor()) != BME280_OK) {
 8002b40:	f7ff fee6 	bl	8002910 <bme280_init_indoor>
 8002b44:	4603      	mov	r3, r0
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <main+0x3a>
	  printf("BME Configuration failed, code: %d\n\r", err);
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4838      	ldr	r0, [pc, #224]	; (8002c34 <main+0x114>)
 8002b52:	f003 ff9d 	bl	8006a90 <iprintf>
	  return 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e066      	b.n	8002c28 <main+0x108>
  }
  printf("BME Configuration Complete!\n\r");
 8002b5a:	4837      	ldr	r0, [pc, #220]	; (8002c38 <main+0x118>)
 8002b5c:	f003 ff98 	bl	8006a90 <iprintf>
  lcd16x2_init_4bits(RS_GPIO_Port,RS_Pin,E_Pin,D4_GPIO_Port,D4_Pin,D5_Pin,D6_Pin,D7_Pin);
 8002b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b64:	9303      	str	r3, [sp, #12]
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <main+0x11c>)
 8002b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b82:	482f      	ldr	r0, [pc, #188]	; (8002c40 <main+0x120>)
 8002b84:	f7ff fddc 	bl	8002740 <lcd16x2_init_4bits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  	  if((err = bme280_read()) != BME280_OK) {
 8002b88:	f7ff ff1e 	bl	80029c8 <bme280_read>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <main+0x82>
	  		  printf("Read error, code: %d\n\r", err);
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	482a      	ldr	r0, [pc, #168]	; (8002c44 <main+0x124>)
 8002b9a:	f003 ff79 	bl	8006a90 <iprintf>
	  		  return 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e042      	b.n	8002c28 <main+0x108>
	  	  }

	  	 lcd16x2_1stLine();
 8002ba2:	f7ff fe59 	bl	8002858 <lcd16x2_1stLine>
	  	 lcd16x2_printf("Temperature:");
 8002ba6:	4828      	ldr	r0, [pc, #160]	; (8002c48 <main+0x128>)
 8002ba8:	f7ff fe70 	bl	800288c <lcd16x2_printf>
	  	 lcd16x2_2ndLine();
 8002bac:	f7ff fe5c 	bl	8002868 <lcd16x2_2ndLine>
	  	 lcd16x2_printf("%0.2f%cC", comp_data.temperature, 223);
 8002bb0:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <main+0x12c>)
 8002bb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bb6:	21df      	movs	r1, #223	; 0xdf
 8002bb8:	9100      	str	r1, [sp, #0]
 8002bba:	4825      	ldr	r0, [pc, #148]	; (8002c50 <main+0x130>)
 8002bbc:	f7ff fe66 	bl	800288c <lcd16x2_printf>


	  	  HAL_Delay(3000);
 8002bc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002bc4:	f000 fc20 	bl	8003408 <HAL_Delay>
		  	 lcd16x2_clear();
 8002bc8:	f7ff fe56 	bl	8002878 <lcd16x2_clear>

	  	 lcd16x2_1stLine();
 8002bcc:	f7ff fe44 	bl	8002858 <lcd16x2_1stLine>
	  	 lcd16x2_printf("Pressure:");
 8002bd0:	4820      	ldr	r0, [pc, #128]	; (8002c54 <main+0x134>)
 8002bd2:	f7ff fe5b 	bl	800288c <lcd16x2_printf>
	  	 lcd16x2_2ndLine();
 8002bd6:	f7ff fe47 	bl	8002868 <lcd16x2_2ndLine>
	  	 lcd16x2_printf("%0.2fhPa", comp_data.pressure/100);
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <main+0x12c>)
 8002bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <main+0x138>)
 8002be6:	f7fd fe51 	bl	800088c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	481b      	ldr	r0, [pc, #108]	; (8002c5c <main+0x13c>)
 8002bf0:	f7ff fe4c 	bl	800288c <lcd16x2_printf>

	  	  HAL_Delay(3000);
 8002bf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002bf8:	f000 fc06 	bl	8003408 <HAL_Delay>
		  	 lcd16x2_clear();
 8002bfc:	f7ff fe3c 	bl	8002878 <lcd16x2_clear>

	  	 lcd16x2_1stLine();
 8002c00:	f7ff fe2a 	bl	8002858 <lcd16x2_1stLine>
	  	 lcd16x2_printf("Humidity:");
 8002c04:	4816      	ldr	r0, [pc, #88]	; (8002c60 <main+0x140>)
 8002c06:	f7ff fe41 	bl	800288c <lcd16x2_printf>
	  	 lcd16x2_2ndLine();
 8002c0a:	f7ff fe2d 	bl	8002868 <lcd16x2_2ndLine>
	  	 lcd16x2_printf("%0.2f%%", comp_data.humidity);
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <main+0x12c>)
 8002c10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c14:	4813      	ldr	r0, [pc, #76]	; (8002c64 <main+0x144>)
 8002c16:	f7ff fe39 	bl	800288c <lcd16x2_printf>

	  	  HAL_Delay(3000);
 8002c1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c1e:	f000 fbf3 	bl	8003408 <HAL_Delay>
		  	 lcd16x2_clear();
 8002c22:	f7ff fe29 	bl	8002878 <lcd16x2_clear>
	  	  if((err = bme280_read()) != BME280_OK) {
 8002c26:	e7af      	b.n	8002b88 <main+0x68>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0800908c 	.word	0x0800908c
 8002c34:	080090a8 	.word	0x080090a8
 8002c38:	080090d0 	.word	0x080090d0
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	080090f0 	.word	0x080090f0
 8002c48:	08009108 	.word	0x08009108
 8002c4c:	20000268 	.word	0x20000268
 8002c50:	08009118 	.word	0x08009118
 8002c54:	08009124 	.word	0x08009124
 8002c58:	40590000 	.word	0x40590000
 8002c5c:	08009130 	.word	0x08009130
 8002c60:	0800913c 	.word	0x0800913c
 8002c64:	08009148 	.word	0x08009148

08002c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	; 0x50
 8002c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	2234      	movs	r2, #52	; 0x34
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fa98 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <SystemClock_Config+0xd4>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <SystemClock_Config+0xd4>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <SystemClock_Config+0xd4>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <SystemClock_Config+0xd8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <SystemClock_Config+0xd8>)
 8002cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <SystemClock_Config+0xd8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002cdc:	2310      	movs	r3, #16
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ce0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002cea:	2302      	movs	r3, #2
 8002cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 f988 	bl	800500c <HAL_RCC_OscConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d02:	f000 f913 	bl	8002f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d06:	230f      	movs	r3, #15
 8002d08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 fea6 	bl	8004a74 <HAL_RCC_ClockConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002d2e:	f000 f8fd 	bl	8002f2c <Error_Handler>
  }
}
 8002d32:	bf00      	nop
 8002d34:	3750      	adds	r7, #80	; 0x50
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000

08002d44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <MX_I2C1_Init+0x54>)
 8002d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <MX_I2C1_Init+0x58>)
 8002d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d80:	4804      	ldr	r0, [pc, #16]	; (8002d94 <MX_I2C1_Init+0x50>)
 8002d82:	f000 feb7 	bl	8003af4 <HAL_I2C_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d8c:	f000 f8ce 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	2000028c 	.word	0x2000028c
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	000186a0 	.word	0x000186a0

08002da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <MX_USART2_UART_Init+0x50>)
 8002da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dd8:	f002 fbb6 	bl	8005548 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002de2:	f000 f8a3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200002e0 	.word	0x200002e0
 8002df0:	40004400 	.word	0x40004400

08002df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <MX_GPIO_Init+0x128>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D4_Pin|D5_Pin|D6_Pin
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 8002e80:	4827      	ldr	r0, [pc, #156]	; (8002f20 <MX_GPIO_Init+0x12c>)
 8002e82:	f000 fe1d 	bl	8003ac0 <HAL_GPIO_WritePin>
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin|RW_Pin, GPIO_PIN_RESET);
 8002e86:	2200      	movs	r2, #0
 8002e88:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002e8c:	4825      	ldr	r0, [pc, #148]	; (8002f24 <MX_GPIO_Init+0x130>)
 8002e8e:	f000 fe17 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002e98:	4823      	ldr	r0, [pc, #140]	; (8002f28 <MX_GPIO_Init+0x134>)
 8002e9a:	f000 fe11 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	481a      	ldr	r0, [pc, #104]	; (8002f20 <MX_GPIO_Init+0x12c>)
 8002eb6:	f000 fc6f 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin RW_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|RW_Pin;
 8002eba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4814      	ldr	r0, [pc, #80]	; (8002f24 <MX_GPIO_Init+0x130>)
 8002ed4:	f000 fc60 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002ed8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_GPIO_Init+0x134>)
 8002ef2:	f000 fc51 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8002ef6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f04:	2301      	movs	r3, #1
 8002f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4804      	ldr	r0, [pc, #16]	; (8002f20 <MX_GPIO_Init+0x12c>)
 8002f10:	f000 fc42 	bl	8003798 <HAL_GPIO_Init>

}
 8002f14:	bf00      	nop
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f76:	2007      	movs	r0, #7
 8002f78:	f000 fb3a 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_I2C_MspInit+0x84>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12b      	bne.n	8003002 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fc6:	23c0      	movs	r3, #192	; 0xc0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fca:	2312      	movs	r3, #18
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <HAL_I2C_MspInit+0x8c>)
 8002fe2:	f000 fbd9 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_I2C_MspInit+0x88>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40005400 	.word	0x40005400
 8003010:	40023800 	.word	0x40023800
 8003014:	40020400 	.word	0x40020400

08003018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_UART_MspInit+0x94>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d133      	bne.n	80030a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_UART_MspInit+0x98>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_UART_MspInit+0x98>)
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_UART_MspInit+0x98>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_UART_MspInit+0x98>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_UART_MspInit+0x98>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_UART_MspInit+0x98>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003072:	230c      	movs	r3, #12
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003082:	2307      	movs	r3, #7
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <HAL_UART_MspInit+0x9c>)
 800308e:	f000 fb83 	bl	8003798 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2026      	movs	r0, #38	; 0x26
 8003098:	f000 fab5 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800309c:	2026      	movs	r0, #38	; 0x26
 800309e:	f000 face 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030a2:	bf00      	nop
 80030a4:	3728      	adds	r7, #40	; 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003104:	f000 f960 	bl	80033c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <USART2_IRQHandler+0x10>)
 8003112:	f002 faf9 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200002e0 	.word	0x200002e0

08003120 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
	return 1;
 8003124:	2301      	movs	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_kill>:

int _kill(int pid, int sig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800313a:	f003 f80d 	bl	8006158 <__errno>
 800313e:	4603      	mov	r3, r0
 8003140:	2216      	movs	r2, #22
 8003142:	601a      	str	r2, [r3, #0]
	return -1;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_exit>:

void _exit (int status)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ffe7 	bl	8003130 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003162:	e7fe      	b.n	8003162 <_exit+0x12>

08003164 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e00a      	b.n	800318c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003176:	f3af 8000 	nop.w
 800317a:	4601      	mov	r1, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	60ba      	str	r2, [r7, #8]
 8003182:	b2ca      	uxtb	r2, r1
 8003184:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	dbf0      	blt.n	8003176 <_read+0x12>
	}

return len;
 8003194:	687b      	ldr	r3, [r7, #4]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e009      	b.n	80031c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	60ba      	str	r2, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fb97 	bl	80028ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3301      	adds	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dbf1      	blt.n	80031b0 <_write+0x12>
	}
	return len;
 80031cc:	687b      	ldr	r3, [r7, #4]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_close>:

int _close(int file)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	return -1;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_isatty>:

int _isatty(int file)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	return 1;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
	return 0;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <_sbrk+0x5c>)
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <_sbrk+0x60>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <_sbrk+0x64>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <_sbrk+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003270:	f002 ff72 	bl	8006158 <__errno>
 8003274:	4603      	mov	r3, r0
 8003276:	220c      	movs	r2, #12
 8003278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e009      	b.n	8003294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <_sbrk+0x64>)
 8003290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20020000 	.word	0x20020000
 80032a0:	00000400 	.word	0x00000400
 80032a4:	20000280 	.word	0x20000280
 80032a8:	20000338 	.word	0x20000338

080032ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <SystemInit+0x20>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <SystemInit+0x20>)
 80032b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d4:	480d      	ldr	r0, [pc, #52]	; (800330c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d6:	490e      	ldr	r1, [pc, #56]	; (8003310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032dc:	e002      	b.n	80032e4 <LoopCopyDataInit>

080032de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e2:	3304      	adds	r3, #4

080032e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e8:	d3f9      	bcc.n	80032de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ea:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032ec:	4c0b      	ldr	r4, [pc, #44]	; (800331c <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f0:	e001      	b.n	80032f6 <LoopFillZerobss>

080032f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f4:	3204      	adds	r2, #4

080032f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f8:	d3fb      	bcc.n	80032f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032fa:	f7ff ffd7 	bl	80032ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fe:	f002 ff31 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003302:	f7ff fc0d 	bl	8002b20 <main>
  bx  lr    
 8003306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800330c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003310:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003314:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 8003318:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800331c:	20000338 	.word	0x20000338

08003320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003320:	e7fe      	b.n	8003320 <ADC_IRQHandler>
	...

08003324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_Init+0x40>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <HAL_Init+0x40>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_Init+0x40>)
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_Init+0x40>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 f94f 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f808 	bl	8003368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003358:	f7ff fdee 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00

08003368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x54>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_InitTick+0x58>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f967 	bl	800365a <HAL_SYSTICK_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00e      	b.n	80033b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b0f      	cmp	r3, #15
 800339a:	d80a      	bhi.n	80033b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800339c:	2200      	movs	r2, #0
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f000 f92f 	bl	8003606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <HAL_InitTick+0x5c>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000004 	.word	0x20000004
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000008 	.word	0x20000008

080033c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x20>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_IncTick+0x24>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_IncTick+0x24>)
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	20000324 	.word	0x20000324

080033f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return uwTick;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_GetTick+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000324 	.word	0x20000324

08003408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff ffee 	bl	80033f0 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d005      	beq.n	800342e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_Delay+0x44>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800342e:	bf00      	nop
 8003430:	f7ff ffde 	bl	80033f0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d8f7      	bhi.n	8003430 <HAL_Delay+0x28>
  {
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000000c 	.word	0x2000000c

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff29 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003618:	f7ff ff3e 	bl	8003498 <__NVIC_GetPriorityGrouping>
 800361c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff8e 	bl	8003544 <NVIC_EncodePriority>
 8003628:	4602      	mov	r2, r0
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <__NVIC_SetPriority>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff31 	bl	80034b4 <__NVIC_EnableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffa2 	bl	80035ac <SysTick_Config>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff feb6 	bl	80033f0 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d008      	beq.n	80036a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e052      	b.n	800374a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0216 	bic.w	r2, r2, #22
 80036b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <HAL_DMA_Abort+0x62>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0208 	bic.w	r2, r2, #8
 80036e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f4:	e013      	b.n	800371e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f6:	f7ff fe7b 	bl	80033f0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b05      	cmp	r3, #5
 8003702:	d90c      	bls.n	800371e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2203      	movs	r2, #3
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e015      	b.n	800374a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e4      	bne.n	80036f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d004      	beq.n	8003770 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e00c      	b.n	800378a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2205      	movs	r2, #5
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e165      	b.n	8003a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f040 8154 	bne.w	8003a7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d005      	beq.n	80037ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d130      	bne.n	800384c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0201 	and.w	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d017      	beq.n	8003888 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d123      	bne.n	80038dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	08da      	lsrs	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3208      	adds	r2, #8
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80ae 	beq.w	8003a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_GPIO_Init+0x300>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_GPIO_Init+0x300>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_GPIO_Init+0x300>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393a:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_GPIO_Init+0x304>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4f      	ldr	r2, [pc, #316]	; (8003aa0 <HAL_GPIO_Init+0x308>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d025      	beq.n	80039b2 <HAL_GPIO_Init+0x21a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <HAL_GPIO_Init+0x30c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01f      	beq.n	80039ae <HAL_GPIO_Init+0x216>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_GPIO_Init+0x310>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d019      	beq.n	80039aa <HAL_GPIO_Init+0x212>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4c      	ldr	r2, [pc, #304]	; (8003aac <HAL_GPIO_Init+0x314>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0x20e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4b      	ldr	r2, [pc, #300]	; (8003ab0 <HAL_GPIO_Init+0x318>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00d      	beq.n	80039a2 <HAL_GPIO_Init+0x20a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4a      	ldr	r2, [pc, #296]	; (8003ab4 <HAL_GPIO_Init+0x31c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <HAL_GPIO_Init+0x206>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a49      	ldr	r2, [pc, #292]	; (8003ab8 <HAL_GPIO_Init+0x320>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_GPIO_Init+0x202>
 8003996:	2306      	movs	r3, #6
 8003998:	e00c      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 800399a:	2307      	movs	r3, #7
 800399c:	e00a      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 800399e:	2305      	movs	r3, #5
 80039a0:	e008      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 80039a2:	2304      	movs	r3, #4
 80039a4:	e006      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 80039a6:	2303      	movs	r3, #3
 80039a8:	e004      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_GPIO_Init+0x21c>
 80039b2:	2300      	movs	r3, #0
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	f002 0203 	and.w	r2, r2, #3
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	4093      	lsls	r3, r2
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c4:	4935      	ldr	r1, [pc, #212]	; (8003a9c <HAL_GPIO_Init+0x304>)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	3302      	adds	r3, #2
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d2:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_GPIO_Init+0x324>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f6:	4a31      	ldr	r2, [pc, #196]	; (8003abc <HAL_GPIO_Init+0x324>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039fc:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_GPIO_Init+0x324>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <HAL_GPIO_Init+0x324>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_GPIO_Init+0x324>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_GPIO_Init+0x324>)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_GPIO_Init+0x324>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a74:	4a11      	ldr	r2, [pc, #68]	; (8003abc <HAL_GPIO_Init+0x324>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	f67f ae96 	bls.w	80037b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020c00 	.word	0x40020c00
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40021400 	.word	0x40021400
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	40013c00 	.word	0x40013c00

08003ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
 8003acc:	4613      	mov	r3, r2
 8003ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad0:	787b      	ldrb	r3, [r7, #1]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003adc:	e003      	b.n	8003ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	041a      	lsls	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e12b      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fa34 	bl	8002f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b58:	f001 f87e 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a81      	ldr	r2, [pc, #516]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d807      	bhi.n	8003b78 <HAL_I2C_Init+0x84>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a80      	ldr	r2, [pc, #512]	; (8003d6c <HAL_I2C_Init+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf94      	ite	ls
 8003b70:	2301      	movls	r3, #1
 8003b72:	2300      	movhi	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e006      	b.n	8003b86 <HAL_I2C_Init+0x92>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a7d      	ldr	r2, [pc, #500]	; (8003d70 <HAL_I2C_Init+0x27c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0e7      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a78      	ldr	r2, [pc, #480]	; (8003d74 <HAL_I2C_Init+0x280>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d802      	bhi.n	8003bc8 <HAL_I2C_Init+0xd4>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	e009      	b.n	8003bdc <HAL_I2C_Init+0xe8>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	4a69      	ldr	r2, [pc, #420]	; (8003d78 <HAL_I2C_Init+0x284>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	3301      	adds	r3, #1
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	495c      	ldr	r1, [pc, #368]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	d819      	bhi.n	8003c30 <HAL_I2C_Init+0x13c>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e59      	subs	r1, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c10:	400b      	ands	r3, r1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_I2C_Init+0x138>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e59      	subs	r1, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	e051      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	e04f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_I2C_Init+0x168>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e012      	b.n	8003c82 <HAL_I2C_Init+0x18e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Init+0x196>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e022      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10e      	bne.n	8003cb0 <HAL_I2C_Init+0x1bc>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1e58      	subs	r0, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	e00f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	6809      	ldr	r1, [r1, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6911      	ldr	r1, [r2, #16]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	000186a0 	.word	0x000186a0
 8003d6c:	001e847f 	.word	0x001e847f
 8003d70:	003d08ff 	.word	0x003d08ff
 8003d74:	431bde83 	.word	0x431bde83
 8003d78:	10624dd3 	.word	0x10624dd3

08003d7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d96:	f7ff fb2b 	bl	80033f0 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	f040 80d9 	bne.w	8003f5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2319      	movs	r3, #25
 8003db0:	2201      	movs	r2, #1
 8003db2:	496d      	ldr	r1, [pc, #436]	; (8003f68 <HAL_I2C_Mem_Write+0x1ec>)
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fc7f 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0cc      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Mem_Write+0x56>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0c5      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d007      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2221      	movs	r2, #33	; 0x21
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <HAL_I2C_Mem_Write+0x1f0>)
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e3a:	88f8      	ldrh	r0, [r7, #6]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fab6 	bl	80043bc <I2C_RequestMemoryWrite>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d052      	beq.n	8003efc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e081      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fd00 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d107      	bne.n	8003e82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06b      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d11b      	bne.n	8003efc <HAL_I2C_Mem_Write+0x180>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d017      	beq.n	8003efc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1aa      	bne.n	8003e5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fcec 	bl	80048e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00d      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d107      	bne.n	8003f2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e016      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	00100002 	.word	0x00100002
 8003f6c:	ffff0000 	.word	0xffff0000

08003f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	; 0x30
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f8a:	f7ff fa31 	bl	80033f0 <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	f040 8208 	bne.w	80043ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2319      	movs	r3, #25
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	497b      	ldr	r1, [pc, #492]	; (8004194 <HAL_I2C_Mem_Read+0x224>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fb85 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e1fb      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Mem_Read+0x56>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e1f4      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d007      	beq.n	8003fec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2222      	movs	r2, #34	; 0x22
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a5b      	ldr	r2, [pc, #364]	; (8004198 <HAL_I2C_Mem_Read+0x228>)
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800402e:	88f8      	ldrh	r0, [r7, #6]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	8979      	ldrh	r1, [r7, #10]
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa52 	bl	80044e8 <I2C_RequestMemoryRead>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1b0      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d113      	bne.n	800407e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e184      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11b      	bne.n	80040be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e164      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d11b      	bne.n	80040fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	e144      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004114:	e138      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b03      	cmp	r3, #3
 800411c:	f200 80f1 	bhi.w	8004302 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b01      	cmp	r3, #1
 8004126:	d123      	bne.n	8004170 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fc1b 	bl	8004968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e139      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800416e:	e10b      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b02      	cmp	r3, #2
 8004176:	d14e      	bne.n	8004216 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2200      	movs	r2, #0
 8004180:	4906      	ldr	r1, [pc, #24]	; (800419c <HAL_I2C_Mem_Read+0x22c>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa98 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e10e      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
 8004192:	bf00      	nop
 8004194:	00100002 	.word	0x00100002
 8004198:	ffff0000 	.word	0xffff0000
 800419c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004214:	e0b8      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2200      	movs	r2, #0
 800421e:	4966      	ldr	r1, [pc, #408]	; (80043b8 <HAL_I2C_Mem_Read+0x448>)
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fa49 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0bf      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2200      	movs	r2, #0
 800427a:	494f      	ldr	r1, [pc, #316]	; (80043b8 <HAL_I2C_Mem_Read+0x448>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fa1b 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e091      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004300:	e042      	b.n	8004388 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fb2e 	bl	8004968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e04c      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d118      	bne.n	8004388 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	f47f aec2 	bne.w	8004116 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e000      	b.n	80043b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	; 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	00010004 	.word	0x00010004

080043bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	817b      	strh	r3, [r7, #10]
 80043ce:	460b      	mov	r3, r1
 80043d0:	813b      	strh	r3, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f960 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d103      	bne.n	8004416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e05f      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	492d      	ldr	r1, [pc, #180]	; (80044e4 <I2C_RequestMemoryWrite+0x128>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f998 	bl	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04c      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa02 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02b      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e021      	b.n	80044d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f9dc 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e005      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00010002 	.word	0x00010002

080044e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2200      	movs	r2, #0
 800452a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8c2 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d103      	bne.n	8004552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0aa      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	4952      	ldr	r1, [pc, #328]	; (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f8fa 	bl	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e097      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f964 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d107      	bne.n	80045ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e076      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e021      	b.n	8004614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f93e 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d107      	bne.n	8004606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e050      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	6a39      	ldr	r1, [r7, #32]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f923 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b04      	cmp	r3, #4
 800462a:	d107      	bne.n	800463c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e035      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2200      	movs	r2, #0
 8004658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f82b 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d103      	bne.n	8004680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e013      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004684:	897b      	ldrh	r3, [r7, #10]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f863 	bl	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	00010002 	.word	0x00010002

080046b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c8:	e025      	b.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d021      	beq.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d2:	f7fe fe8d 	bl	80033f0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d116      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e023      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10d      	bne.n	800473c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	e00c      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	429a      	cmp	r2, r3
 800475a:	d0b6      	beq.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004774:	e051      	b.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d123      	bne.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004794:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f043 0204 	orr.w	r2, r3, #4
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e046      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d021      	beq.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fe fe0b 	bl	80033f0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e020      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d10c      	bne.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e00b      	b.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d18d      	bne.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004870:	e02d      	b.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8ce 	bl	8004a14 <I2C_IsAcknowledgeFailed>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e02d      	b.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d021      	beq.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fe fdb1 	bl	80033f0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e007      	b.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d1ca      	bne.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f2:	e02d      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f88d 	bl	8004a14 <I2C_IsAcknowledgeFailed>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e02d      	b.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d021      	beq.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490c:	f7fe fd70 	bl	80033f0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b04      	cmp	r3, #4
 800495c:	d1ca      	bne.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004974:	e042      	b.n	80049fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d119      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0210 	mvn.w	r2, #16
 800498c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e029      	b.n	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b8:	f7fe fd1a 	bl	80033f0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d116      	bne.n	80049fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d1b5      	bne.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d11b      	bne.n	8004a64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0204 	orr.w	r2, r3, #4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0cc      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b68      	ldr	r3, [pc, #416]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90c      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0b8      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a58      	ldr	r2, [pc, #352]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	494d      	ldr	r1, [pc, #308]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d119      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e067      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4934      	ldr	r1, [pc, #208]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fe fc44 	bl	80033f0 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fe fc40 	bl	80033f0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e04f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d20c      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e032      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4916      	ldr	r1, [pc, #88]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490e      	ldr	r1, [pc, #56]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f855 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490a      	ldr	r1, [pc, #40]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fba4 	bl	8003368 <HAL_InitTick>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00
 8004c30:	40023800 	.word	0x40023800
 8004c34:	08009150 	.word	0x08009150
 8004c38:	20000004 	.word	0x20000004
 8004c3c:	20000008 	.word	0x20000008

08004c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000004 	.word	0x20000004

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c5c:	f7ff fff0 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	0a9b      	lsrs	r3, r3, #10
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	08009160 	.word	0x08009160

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c84:	f7ff ffdc 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	08009160 	.word	0x08009160

08004ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b088      	sub	sp, #32
 8004cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc4:	4bce      	ldr	r3, [pc, #824]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	f200 818d 	bhi.w	8004fec <HAL_RCC_GetSysClockFreq+0x344>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <HAL_RCC_GetSysClockFreq+0x30>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004fed 	.word	0x08004fed
 8004ce0:	08004fed 	.word	0x08004fed
 8004ce4:	08004fed 	.word	0x08004fed
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004fed 	.word	0x08004fed
 8004cf0:	08004fed 	.word	0x08004fed
 8004cf4:	08004fed 	.word	0x08004fed
 8004cf8:	08004d19 	.word	0x08004d19
 8004cfc:	08004fed 	.word	0x08004fed
 8004d00:	08004fed 	.word	0x08004fed
 8004d04:	08004fed 	.word	0x08004fed
 8004d08:	08004e8d 	.word	0x08004e8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4bbd      	ldr	r3, [pc, #756]	; (8005004 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d0e:	61bb      	str	r3, [r7, #24]
       break;
 8004d10:	e16f      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d12:	4bbd      	ldr	r3, [pc, #756]	; (8005008 <HAL_RCC_GetSysClockFreq+0x360>)
 8004d14:	61bb      	str	r3, [r7, #24]
      break;
 8004d16:	e16c      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4bb9      	ldr	r3, [pc, #740]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d22:	4bb7      	ldr	r3, [pc, #732]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d053      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4bb4      	ldr	r3, [pc, #720]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	461a      	mov	r2, r3
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	ea02 0400 	and.w	r4, r2, r0
 8004d46:	603c      	str	r4, [r7, #0]
 8004d48:	400b      	ands	r3, r1
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	014b      	lsls	r3, r1, #5
 8004d5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d62:	0142      	lsls	r2, r0, #5
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	4623      	mov	r3, r4
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	462b      	mov	r3, r5
 8004d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	018b      	lsls	r3, r1, #6
 8004d7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d80:	0182      	lsls	r2, r0, #6
 8004d82:	1a12      	subs	r2, r2, r0
 8004d84:	eb63 0301 	sbc.w	r3, r3, r1
 8004d88:	f04f 0000 	mov.w	r0, #0
 8004d8c:	f04f 0100 	mov.w	r1, #0
 8004d90:	00d9      	lsls	r1, r3, #3
 8004d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d96:	00d0      	lsls	r0, r2, #3
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	1852      	adds	r2, r2, r1
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb43 0101 	adc.w	r1, r3, r1
 8004da6:	460b      	mov	r3, r1
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	0259      	lsls	r1, r3, #9
 8004db2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004db6:	0250      	lsls	r0, r2, #9
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	f7fb ff0e 	bl	8000be8 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e04c      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	ea02 0a00 	and.w	sl, r2, r0
 8004dee:	ea03 0b01 	and.w	fp, r3, r1
 8004df2:	4650      	mov	r0, sl
 8004df4:	4659      	mov	r1, fp
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	014b      	lsls	r3, r1, #5
 8004e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e04:	0142      	lsls	r2, r0, #5
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	ebb0 000a 	subs.w	r0, r0, sl
 8004e0e:	eb61 010b 	sbc.w	r1, r1, fp
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	018b      	lsls	r3, r1, #6
 8004e1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e20:	0182      	lsls	r2, r0, #6
 8004e22:	1a12      	subs	r2, r2, r0
 8004e24:	eb63 0301 	sbc.w	r3, r3, r1
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	00d9      	lsls	r1, r3, #3
 8004e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e36:	00d0      	lsls	r0, r2, #3
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	eb12 020a 	adds.w	r2, r2, sl
 8004e40:	eb43 030b 	adc.w	r3, r3, fp
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0299      	lsls	r1, r3, #10
 8004e4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e52:	0290      	lsls	r0, r2, #10
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f7fb fec0 	bl	8000be8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e70:	4b63      	ldr	r3, [pc, #396]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	61bb      	str	r3, [r7, #24]
      break;
 8004e8a:	e0b2      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e8c:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e96:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d04d      	beq.n	8004f3e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea2:	4b57      	ldr	r3, [pc, #348]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	ea02 0800 	and.w	r8, r2, r0
 8004eba:	ea03 0901 	and.w	r9, r3, r1
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	014b      	lsls	r3, r1, #5
 8004ecc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ed0:	0142      	lsls	r2, r0, #5
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	ebb0 0008 	subs.w	r0, r0, r8
 8004eda:	eb61 0109 	sbc.w	r1, r1, r9
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	018b      	lsls	r3, r1, #6
 8004ee8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eec:	0182      	lsls	r2, r0, #6
 8004eee:	1a12      	subs	r2, r2, r0
 8004ef0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef4:	f04f 0000 	mov.w	r0, #0
 8004ef8:	f04f 0100 	mov.w	r1, #0
 8004efc:	00d9      	lsls	r1, r3, #3
 8004efe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f02:	00d0      	lsls	r0, r2, #3
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	eb12 0208 	adds.w	r2, r2, r8
 8004f0c:	eb43 0309 	adc.w	r3, r3, r9
 8004f10:	f04f 0000 	mov.w	r0, #0
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	0259      	lsls	r1, r3, #9
 8004f1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f1e:	0250      	lsls	r0, r2, #9
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	f7fb fe5a 	bl	8000be8 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e04a      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	ea02 0400 	and.w	r4, r2, r0
 8004f56:	ea03 0501 	and.w	r5, r3, r1
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	014b      	lsls	r3, r1, #5
 8004f68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f6c:	0142      	lsls	r2, r0, #5
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	1b00      	subs	r0, r0, r4
 8004f74:	eb61 0105 	sbc.w	r1, r1, r5
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	018b      	lsls	r3, r1, #6
 8004f82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f86:	0182      	lsls	r2, r0, #6
 8004f88:	1a12      	subs	r2, r2, r0
 8004f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8e:	f04f 0000 	mov.w	r0, #0
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	00d9      	lsls	r1, r3, #3
 8004f98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f9c:	00d0      	lsls	r0, r2, #3
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	1912      	adds	r2, r2, r4
 8004fa4:	eb45 0303 	adc.w	r3, r5, r3
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	0299      	lsls	r1, r3, #10
 8004fb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fb6:	0290      	lsls	r0, r2, #10
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	f7fb fe0e 	bl	8000be8 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	0f1b      	lsrs	r3, r3, #28
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	61bb      	str	r3, [r7, #24]
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004fee:	61bb      	str	r3, [r7, #24]
      break;
 8004ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	00f42400 	.word	0x00f42400
 8005008:	007a1200 	.word	0x007a1200

0800500c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e28d      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8083 	beq.w	8005132 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800502c:	4b94      	ldr	r3, [pc, #592]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b04      	cmp	r3, #4
 8005036:	d019      	beq.n	800506c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005038:	4b91      	ldr	r3, [pc, #580]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005040:	2b08      	cmp	r3, #8
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005044:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005050:	d00c      	beq.n	800506c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b8b      	ldr	r3, [pc, #556]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d112      	bne.n	8005084 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505e:	4b88      	ldr	r3, [pc, #544]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506a:	d10b      	bne.n	8005084 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	4b84      	ldr	r3, [pc, #528]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05b      	beq.n	8005130 <HAL_RCC_OscConfig+0x124>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d157      	bne.n	8005130 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e25a      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x90>
 800508e:	4b7c      	ldr	r3, [pc, #496]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a7b      	ldr	r2, [pc, #492]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e01d      	b.n	80050d8 <HAL_RCC_OscConfig+0xcc>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0xb4>
 80050a6:	4b76      	ldr	r3, [pc, #472]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a75      	ldr	r2, [pc, #468]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b73      	ldr	r3, [pc, #460]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a72      	ldr	r2, [pc, #456]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0xcc>
 80050c0:	4b6f      	ldr	r3, [pc, #444]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a6e      	ldr	r2, [pc, #440]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b6c      	ldr	r3, [pc, #432]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6b      	ldr	r2, [pc, #428]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fe f986 	bl	80033f0 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fe f982 	bl	80033f0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e21f      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	4b61      	ldr	r3, [pc, #388]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0xdc>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fe f972 	bl	80033f0 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005110:	f7fe f96e 	bl	80033f0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e20b      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005122:	4b57      	ldr	r3, [pc, #348]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x104>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d06f      	beq.n	800521e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800513e:	4b50      	ldr	r3, [pc, #320]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b00      	cmp	r3, #0
 8005148:	d017      	beq.n	800517a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800514a:	4b4d      	ldr	r3, [pc, #308]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005152:	2b08      	cmp	r3, #8
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005156:	4b4a      	ldr	r3, [pc, #296]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d11c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516e:	4b44      	ldr	r3, [pc, #272]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d116      	bne.n	80051a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_RCC_OscConfig+0x186>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e1d3      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005192:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4937      	ldr	r1, [pc, #220]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a6:	e03a      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d020      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_RCC_OscConfig+0x278>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fe f91b 	bl	80033f0 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051be:	f7fe f917 	bl	80033f0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1b4      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4925      	ldr	r1, [pc, #148]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]
 80051f0:	e015      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCC_OscConfig+0x278>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fe f8fa 	bl	80033f0 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005200:	f7fe f8f6 	bl	80033f0 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e193      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d036      	beq.n	8005298 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <HAL_RCC_OscConfig+0x27c>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fe f8da 	bl	80033f0 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005240:	f7fe f8d6 	bl	80033f0 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e173      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_OscConfig+0x274>)
 8005254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x234>
 800525e:	e01b      	b.n	8005298 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_OscConfig+0x27c>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fe f8c3 	bl	80033f0 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526c:	e00e      	b.n	800528c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526e:	f7fe f8bf 	bl	80033f0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d907      	bls.n	800528c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e15c      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
 8005280:	40023800 	.word	0x40023800
 8005284:	42470000 	.word	0x42470000
 8005288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	4b8a      	ldr	r3, [pc, #552]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ea      	bne.n	800526e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8097 	beq.w	80053d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052aa:	4b83      	ldr	r3, [pc, #524]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a7e      	ldr	r2, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
 80052c6:	4b7c      	ldr	r3, [pc, #496]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d6:	4b79      	ldr	r3, [pc, #484]	; (80054bc <HAL_RCC_OscConfig+0x4b0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d118      	bne.n	8005314 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e2:	4b76      	ldr	r3, [pc, #472]	; (80054bc <HAL_RCC_OscConfig+0x4b0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a75      	ldr	r2, [pc, #468]	; (80054bc <HAL_RCC_OscConfig+0x4b0>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ee:	f7fe f87f 	bl	80033f0 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f6:	f7fe f87b 	bl	80033f0 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e118      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <HAL_RCC_OscConfig+0x4b0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <HAL_RCC_OscConfig+0x31e>
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	e01c      	b.n	8005364 <HAL_RCC_OscConfig+0x358>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b05      	cmp	r3, #5
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x340>
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a60      	ldr	r2, [pc, #384]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	6713      	str	r3, [r2, #112]	; 0x70
 800533e:	4b5e      	ldr	r3, [pc, #376]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a5d      	ldr	r2, [pc, #372]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0x358>
 800534c:	4b5a      	ldr	r3, [pc, #360]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	4a59      	ldr	r2, [pc, #356]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	6713      	str	r3, [r2, #112]	; 0x70
 8005358:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a56      	ldr	r2, [pc, #344]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536c:	f7fe f840 	bl	80033f0 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005372:	e00a      	b.n	800538a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7fe f83c 	bl	80033f0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e0d7      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ee      	beq.n	8005374 <HAL_RCC_OscConfig+0x368>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fe f82a 	bl	80033f0 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fe f826 	bl	80033f0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0c1      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b6:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1ee      	bne.n	80053a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80053ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80ad 	beq.w	8005538 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053de:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d060      	beq.n	80054ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d145      	bne.n	800547e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f2:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCC_OscConfig+0x4b4>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fd fffa 	bl	80033f0 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005400:	f7fd fff6 	bl	80033f0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e093      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	019b      	lsls	r3, r3, #6
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	3b01      	subs	r3, #1
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	071b      	lsls	r3, r3, #28
 800544a:	491b      	ldr	r1, [pc, #108]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005450:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <HAL_RCC_OscConfig+0x4b4>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fd ffcb 	bl	80033f0 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545e:	f7fd ffc7 	bl	80033f0 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e064      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f0      	beq.n	800545e <HAL_RCC_OscConfig+0x452>
 800547c:	e05c      	b.n	8005538 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_RCC_OscConfig+0x4b4>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd ffb4 	bl	80033f0 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800548c:	f7fd ffb0 	bl	80033f0 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e04d      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_OscConfig+0x4ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x480>
 80054aa:	e045      	b.n	8005538 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d107      	bne.n	80054c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e040      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40007000 	.word	0x40007000
 80054c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <HAL_RCC_OscConfig+0x538>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d030      	beq.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d129      	bne.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d122      	bne.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d119      	bne.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	3b01      	subs	r3, #1
 800550e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d10f      	bne.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d107      	bne.n	8005534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800

08005548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e03f      	b.n	80055da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd fd52 	bl	8003018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	; 0x24
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fc1b 	bl	8005dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08a      	sub	sp, #40	; 0x28
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d17c      	bne.n	80056fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HAL_UART_Transmit+0x2c>
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e075      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit+0x3e>
 800561c:	2302      	movs	r3, #2
 800561e:	e06e      	b.n	80056fe <HAL_UART_Transmit+0x11c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005636:	f7fd fedb 	bl	80033f0 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005650:	d108      	bne.n	8005664 <HAL_UART_Transmit+0x82>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e003      	b.n	800566c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005674:	e02a      	b.n	80056cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa17 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e036      	b.n	80056fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3302      	adds	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e007      	b.n	80056be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cf      	bne.n	8005676 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2140      	movs	r1, #64	; 0x40
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f9e7 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e006      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_UART_IRQHandler+0x52>
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 faa1 	bl	8005c9a <UART_Receive_IT>
      return;
 8005758:	e17c      	b.n	8005a54 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80b1 	beq.w	80058c4 <HAL_UART_IRQHandler+0x1bc>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <HAL_UART_IRQHandler+0x70>
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80a6 	beq.w	80058c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_UART_IRQHandler+0x90>
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0201 	orr.w	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_UART_IRQHandler+0xb0>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0202 	orr.w	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_UART_IRQHandler+0xd0>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00f      	beq.n	8005802 <HAL_UART_IRQHandler+0xfa>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_UART_IRQHandler+0xee>
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 811f 	beq.w	8005a4a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_UART_IRQHandler+0x11e>
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa3a 	bl	8005c9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_UART_IRQHandler+0x146>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d031      	beq.n	80058b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f97a 	bl	8005b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d123      	bne.n	80058aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005870:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	2b00      	cmp	r3, #0
 8005878:	d013      	beq.n	80058a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	4a77      	ldr	r2, [pc, #476]	; (8005a5c <HAL_UART_IRQHandler+0x354>)
 8005880:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd ff63 	bl	8003752 <HAL_DMA_Abort_IT>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d016      	beq.n	80058c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	e00e      	b.n	80058c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f8f0 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	e00a      	b.n	80058c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8ec 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	e006      	b.n	80058c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8e8 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058be:	e0c4      	b.n	8005a4a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	bf00      	nop
    return;
 80058c2:	e0c2      	b.n	8005a4a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	f040 80a2 	bne.w	8005a12 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 809c 	beq.w	8005a12 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8096 	beq.w	8005a12 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	d14f      	bne.n	80059aa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005914:	8a3b      	ldrh	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8099 	beq.w	8005a4e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005920:	8a3a      	ldrh	r2, [r7, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	f080 8093 	bcs.w	8005a4e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8a3a      	ldrh	r2, [r7, #16]
 800592c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005938:	d02b      	beq.n	8005992 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005948:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695a      	ldr	r2, [r3, #20]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005968:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0210 	bic.w	r2, r2, #16
 8005986:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	4618      	mov	r0, r3
 800598e:	f7fd fe70 	bl	8003672 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800599a:	b29b      	uxth	r3, r3
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f87a 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80059a8:	e051      	b.n	8005a4e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d047      	beq.n	8005a52 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80059c2:	8a7b      	ldrh	r3, [r7, #18]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d044      	beq.n	8005a52 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059d6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0210 	bic.w	r2, r2, #16
 8005a04:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a06:	8a7b      	ldrh	r3, [r7, #18]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f846 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a10:	e01f      	b.n	8005a52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_UART_IRQHandler+0x326>
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8cf 	bl	8005bca <UART_Transmit_IT>
    return;
 8005a2c:	e012      	b.n	8005a54 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00d      	beq.n	8005a54 <HAL_UART_IRQHandler+0x34c>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f911 	bl	8005c6a <UART_EndTransmit_IT>
    return;
 8005a48:	e004      	b.n	8005a54 <HAL_UART_IRQHandler+0x34c>
    return;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_UART_IRQHandler+0x34c>
      return;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_UART_IRQHandler+0x34c>
      return;
 8005a52:	bf00      	nop
  }
}
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08005ba3 	.word	0x08005ba3

08005a60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	e02c      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d028      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad4:	f7fd fc8c 	bl	80033f0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d21d      	bcs.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005af2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695a      	ldr	r2, [r3, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e00f      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d0c3      	beq.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0210 	bic.w	r2, r2, #16
 8005b86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff63 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b21      	cmp	r3, #33	; 0x21
 8005bdc:	d13e      	bne.n	8005c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be6:	d114      	bne.n	8005c12 <UART_Transmit_IT+0x48>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d110      	bne.n	8005c12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	621a      	str	r2, [r3, #32]
 8005c10:	e008      	b.n	8005c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6211      	str	r1, [r2, #32]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4619      	mov	r1, r3
 8005c32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fee8 	bl	8005a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b22      	cmp	r3, #34	; 0x22
 8005cac:	f040 8087 	bne.w	8005dbe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb8:	d117      	bne.n	8005cea <UART_Receive_IT+0x50>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	1c9a      	adds	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce8:	e026      	b.n	8005d38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d007      	beq.n	8005d0e <UART_Receive_IT+0x74>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <UART_Receive_IT+0x82>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e008      	b.n	8005d2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4619      	mov	r1, r3
 8005d46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d136      	bne.n	8005dba <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0220 	bic.w	r2, r2, #32
 8005d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10e      	bne.n	8005daa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0210 	bic.w	r2, r2, #16
 8005d9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fe7a 	bl	8005a9c <HAL_UARTEx_RxEventCallback>
 8005da8:	e002      	b.n	8005db0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fe62 	bl	8005a74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e002      	b.n	8005dc0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	b09f      	sub	sp, #124	; 0x7c
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	68d9      	ldr	r1, [r3, #12]
 8005de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	ea40 0301 	orr.w	r3, r0, r1
 8005de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e0c:	f021 010c 	bic.w	r1, r1, #12
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e16:	430b      	orrs	r3, r1
 8005e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	ea40 0301 	orr.w	r3, r0, r1
 8005e30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4bc5      	ldr	r3, [pc, #788]	; (800614c <UART_SetConfig+0x384>)
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d004      	beq.n	8005e46 <UART_SetConfig+0x7e>
 8005e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4bc3      	ldr	r3, [pc, #780]	; (8006150 <UART_SetConfig+0x388>)
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d103      	bne.n	8005e4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e46:	f7fe ff1b 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8005e4a:	6778      	str	r0, [r7, #116]	; 0x74
 8005e4c:	e002      	b.n	8005e54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4e:	f7fe ff03 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8005e52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	f040 80b6 	bne.w	8005fcc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e62:	461c      	mov	r4, r3
 8005e64:	f04f 0500 	mov.w	r5, #0
 8005e68:	4622      	mov	r2, r4
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	1891      	adds	r1, r2, r2
 8005e6e:	6439      	str	r1, [r7, #64]	; 0x40
 8005e70:	415b      	adcs	r3, r3
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
 8005e74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e78:	1912      	adds	r2, r2, r4
 8005e7a:	eb45 0303 	adc.w	r3, r5, r3
 8005e7e:	f04f 0000 	mov.w	r0, #0
 8005e82:	f04f 0100 	mov.w	r1, #0
 8005e86:	00d9      	lsls	r1, r3, #3
 8005e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e8c:	00d0      	lsls	r0, r2, #3
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	1911      	adds	r1, r2, r4
 8005e94:	6639      	str	r1, [r7, #96]	; 0x60
 8005e96:	416b      	adcs	r3, r5
 8005e98:	667b      	str	r3, [r7, #100]	; 0x64
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005eb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005eb4:	f7fa fe98 	bl	8000be8 <__aeabi_uldivmod>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4ba5      	ldr	r3, [pc, #660]	; (8006154 <UART_SetConfig+0x38c>)
 8005ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	011e      	lsls	r6, r3, #4
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	461c      	mov	r4, r3
 8005eca:	f04f 0500 	mov.w	r5, #0
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ed6:	415b      	adcs	r3, r3
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ede:	1912      	adds	r2, r2, r4
 8005ee0:	eb45 0303 	adc.w	r3, r5, r3
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f04f 0100 	mov.w	r1, #0
 8005eec:	00d9      	lsls	r1, r3, #3
 8005eee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef2:	00d0      	lsls	r0, r2, #3
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	1911      	adds	r1, r2, r4
 8005efa:	65b9      	str	r1, [r7, #88]	; 0x58
 8005efc:	416b      	adcs	r3, r5
 8005efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	461a      	mov	r2, r3
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f1a:	f7fa fe65 	bl	8000be8 <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4b8c      	ldr	r3, [pc, #560]	; (8006154 <UART_SetConfig+0x38c>)
 8005f24:	fba3 1302 	umull	r1, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	2164      	movs	r1, #100	; 0x64
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	3332      	adds	r3, #50	; 0x32
 8005f36:	4a87      	ldr	r2, [pc, #540]	; (8006154 <UART_SetConfig+0x38c>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f44:	441e      	add	r6, r3
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	1894      	adds	r4, r2, r2
 8005f54:	623c      	str	r4, [r7, #32]
 8005f56:	415b      	adcs	r3, r3
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f5e:	1812      	adds	r2, r2, r0
 8005f60:	eb41 0303 	adc.w	r3, r1, r3
 8005f64:	f04f 0400 	mov.w	r4, #0
 8005f68:	f04f 0500 	mov.w	r5, #0
 8005f6c:	00dd      	lsls	r5, r3, #3
 8005f6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f72:	00d4      	lsls	r4, r2, #3
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	1814      	adds	r4, r2, r0
 8005f7a:	653c      	str	r4, [r7, #80]	; 0x50
 8005f7c:	414b      	adcs	r3, r1
 8005f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	1891      	adds	r1, r2, r2
 8005f8c:	61b9      	str	r1, [r7, #24]
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f9a:	f7fa fe25 	bl	8000be8 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4b6c      	ldr	r3, [pc, #432]	; (8006154 <UART_SetConfig+0x38c>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	; 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	3332      	adds	r3, #50	; 0x32
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <UART_SetConfig+0x38c>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 0207 	and.w	r2, r3, #7
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4432      	add	r2, r6
 8005fc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fca:	e0b9      	b.n	8006140 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fce:	461c      	mov	r4, r3
 8005fd0:	f04f 0500 	mov.w	r5, #0
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	1891      	adds	r1, r2, r2
 8005fda:	6139      	str	r1, [r7, #16]
 8005fdc:	415b      	adcs	r3, r3
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fe4:	1912      	adds	r2, r2, r4
 8005fe6:	eb45 0303 	adc.w	r3, r5, r3
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	00d9      	lsls	r1, r3, #3
 8005ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ff8:	00d0      	lsls	r0, r2, #3
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	eb12 0804 	adds.w	r8, r2, r4
 8006002:	eb43 0905 	adc.w	r9, r3, r5
 8006006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	008b      	lsls	r3, r1, #2
 800601a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800601e:	0082      	lsls	r2, r0, #2
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	f7fa fde0 	bl	8000be8 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4b49      	ldr	r3, [pc, #292]	; (8006154 <UART_SetConfig+0x38c>)
 800602e:	fba3 2302 	umull	r2, r3, r3, r2
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	011e      	lsls	r6, r3, #4
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	4618      	mov	r0, r3
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	1894      	adds	r4, r2, r2
 8006044:	60bc      	str	r4, [r7, #8]
 8006046:	415b      	adcs	r3, r3
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800604e:	1812      	adds	r2, r2, r0
 8006050:	eb41 0303 	adc.w	r3, r1, r3
 8006054:	f04f 0400 	mov.w	r4, #0
 8006058:	f04f 0500 	mov.w	r5, #0
 800605c:	00dd      	lsls	r5, r3, #3
 800605e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006062:	00d4      	lsls	r4, r2, #3
 8006064:	4622      	mov	r2, r4
 8006066:	462b      	mov	r3, r5
 8006068:	1814      	adds	r4, r2, r0
 800606a:	64bc      	str	r4, [r7, #72]	; 0x48
 800606c:	414b      	adcs	r3, r1
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	f04f 0100 	mov.w	r1, #0
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	008b      	lsls	r3, r1, #2
 8006084:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006088:	0082      	lsls	r2, r0, #2
 800608a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800608e:	f7fa fdab 	bl	8000be8 <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <UART_SetConfig+0x38c>)
 8006098:	fba3 1302 	umull	r1, r3, r3, r2
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	2164      	movs	r1, #100	; 0x64
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	3332      	adds	r3, #50	; 0x32
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <UART_SetConfig+0x38c>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b6:	441e      	add	r6, r3
 80060b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ba:	4618      	mov	r0, r3
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	1894      	adds	r4, r2, r2
 80060c6:	603c      	str	r4, [r7, #0]
 80060c8:	415b      	adcs	r3, r3
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d0:	1812      	adds	r2, r2, r0
 80060d2:	eb41 0303 	adc.w	r3, r1, r3
 80060d6:	f04f 0400 	mov.w	r4, #0
 80060da:	f04f 0500 	mov.w	r5, #0
 80060de:	00dd      	lsls	r5, r3, #3
 80060e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060e4:	00d4      	lsls	r4, r2, #3
 80060e6:	4622      	mov	r2, r4
 80060e8:	462b      	mov	r3, r5
 80060ea:	eb12 0a00 	adds.w	sl, r2, r0
 80060ee:	eb43 0b01 	adc.w	fp, r3, r1
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	008b      	lsls	r3, r1, #2
 8006106:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800610a:	0082      	lsls	r2, r0, #2
 800610c:	4650      	mov	r0, sl
 800610e:	4659      	mov	r1, fp
 8006110:	f7fa fd6a 	bl	8000be8 <__aeabi_uldivmod>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <UART_SetConfig+0x38c>)
 800611a:	fba3 1302 	umull	r1, r3, r3, r2
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2164      	movs	r1, #100	; 0x64
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	3332      	adds	r3, #50	; 0x32
 800612c:	4a09      	ldr	r2, [pc, #36]	; (8006154 <UART_SetConfig+0x38c>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	f003 020f 	and.w	r2, r3, #15
 8006138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4432      	add	r2, r6
 800613e:	609a      	str	r2, [r3, #8]
}
 8006140:	bf00      	nop
 8006142:	377c      	adds	r7, #124	; 0x7c
 8006144:	46bd      	mov	sp, r7
 8006146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614a:	bf00      	nop
 800614c:	40011000 	.word	0x40011000
 8006150:	40011400 	.word	0x40011400
 8006154:	51eb851f 	.word	0x51eb851f

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	; (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000010 	.word	0x20000010

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4d0d      	ldr	r5, [pc, #52]	; (800619c <__libc_init_array+0x38>)
 8006168:	4c0d      	ldr	r4, [pc, #52]	; (80061a0 <__libc_init_array+0x3c>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	2600      	movs	r6, #0
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	4d0b      	ldr	r5, [pc, #44]	; (80061a4 <__libc_init_array+0x40>)
 8006176:	4c0c      	ldr	r4, [pc, #48]	; (80061a8 <__libc_init_array+0x44>)
 8006178:	f002 ff44 	bl	8009004 <_init>
 800617c:	1b64      	subs	r4, r4, r5
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	2600      	movs	r6, #0
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f855 3b04 	ldr.w	r3, [r5], #4
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f855 3b04 	ldr.w	r3, [r5], #4
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	08009554 	.word	0x08009554
 80061a0:	08009554 	.word	0x08009554
 80061a4:	08009554 	.word	0x08009554
 80061a8:	08009558 	.word	0x08009558

080061ac <memset>:
 80061ac:	4402      	add	r2, r0
 80061ae:	4603      	mov	r3, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <__cvt>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	ec55 4b10 	vmov	r4, r5, d0
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	460e      	mov	r6, r1
 80061c8:	4619      	mov	r1, r3
 80061ca:	462b      	mov	r3, r5
 80061cc:	bfbb      	ittet	lt
 80061ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061d2:	461d      	movlt	r5, r3
 80061d4:	2300      	movge	r3, #0
 80061d6:	232d      	movlt	r3, #45	; 0x2d
 80061d8:	700b      	strb	r3, [r1, #0]
 80061da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061e0:	4691      	mov	r9, r2
 80061e2:	f023 0820 	bic.w	r8, r3, #32
 80061e6:	bfbc      	itt	lt
 80061e8:	4622      	movlt	r2, r4
 80061ea:	4614      	movlt	r4, r2
 80061ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f0:	d005      	beq.n	80061fe <__cvt+0x42>
 80061f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061f6:	d100      	bne.n	80061fa <__cvt+0x3e>
 80061f8:	3601      	adds	r6, #1
 80061fa:	2102      	movs	r1, #2
 80061fc:	e000      	b.n	8006200 <__cvt+0x44>
 80061fe:	2103      	movs	r1, #3
 8006200:	ab03      	add	r3, sp, #12
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	ab02      	add	r3, sp, #8
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	ec45 4b10 	vmov	d0, r4, r5
 800620c:	4653      	mov	r3, sl
 800620e:	4632      	mov	r2, r6
 8006210:	f000 fe3a 	bl	8006e88 <_dtoa_r>
 8006214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006218:	4607      	mov	r7, r0
 800621a:	d102      	bne.n	8006222 <__cvt+0x66>
 800621c:	f019 0f01 	tst.w	r9, #1
 8006220:	d022      	beq.n	8006268 <__cvt+0xac>
 8006222:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006226:	eb07 0906 	add.w	r9, r7, r6
 800622a:	d110      	bne.n	800624e <__cvt+0x92>
 800622c:	783b      	ldrb	r3, [r7, #0]
 800622e:	2b30      	cmp	r3, #48	; 0x30
 8006230:	d10a      	bne.n	8006248 <__cvt+0x8c>
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800623e:	b918      	cbnz	r0, 8006248 <__cvt+0x8c>
 8006240:	f1c6 0601 	rsb	r6, r6, #1
 8006244:	f8ca 6000 	str.w	r6, [sl]
 8006248:	f8da 3000 	ldr.w	r3, [sl]
 800624c:	4499      	add	r9, r3
 800624e:	2200      	movs	r2, #0
 8006250:	2300      	movs	r3, #0
 8006252:	4620      	mov	r0, r4
 8006254:	4629      	mov	r1, r5
 8006256:	f7fa fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800625a:	b108      	cbz	r0, 8006260 <__cvt+0xa4>
 800625c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006260:	2230      	movs	r2, #48	; 0x30
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	454b      	cmp	r3, r9
 8006266:	d307      	bcc.n	8006278 <__cvt+0xbc>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800626c:	1bdb      	subs	r3, r3, r7
 800626e:	4638      	mov	r0, r7
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	9103      	str	r1, [sp, #12]
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e7f0      	b.n	8006262 <__cvt+0xa6>

08006280 <__exponent>:
 8006280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006282:	4603      	mov	r3, r0
 8006284:	2900      	cmp	r1, #0
 8006286:	bfb8      	it	lt
 8006288:	4249      	neglt	r1, r1
 800628a:	f803 2b02 	strb.w	r2, [r3], #2
 800628e:	bfb4      	ite	lt
 8006290:	222d      	movlt	r2, #45	; 0x2d
 8006292:	222b      	movge	r2, #43	; 0x2b
 8006294:	2909      	cmp	r1, #9
 8006296:	7042      	strb	r2, [r0, #1]
 8006298:	dd2a      	ble.n	80062f0 <__exponent+0x70>
 800629a:	f10d 0407 	add.w	r4, sp, #7
 800629e:	46a4      	mov	ip, r4
 80062a0:	270a      	movs	r7, #10
 80062a2:	46a6      	mov	lr, r4
 80062a4:	460a      	mov	r2, r1
 80062a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80062aa:	fb07 1516 	mls	r5, r7, r6, r1
 80062ae:	3530      	adds	r5, #48	; 0x30
 80062b0:	2a63      	cmp	r2, #99	; 0x63
 80062b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80062b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062ba:	4631      	mov	r1, r6
 80062bc:	dcf1      	bgt.n	80062a2 <__exponent+0x22>
 80062be:	3130      	adds	r1, #48	; 0x30
 80062c0:	f1ae 0502 	sub.w	r5, lr, #2
 80062c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062c8:	1c44      	adds	r4, r0, #1
 80062ca:	4629      	mov	r1, r5
 80062cc:	4561      	cmp	r1, ip
 80062ce:	d30a      	bcc.n	80062e6 <__exponent+0x66>
 80062d0:	f10d 0209 	add.w	r2, sp, #9
 80062d4:	eba2 020e 	sub.w	r2, r2, lr
 80062d8:	4565      	cmp	r5, ip
 80062da:	bf88      	it	hi
 80062dc:	2200      	movhi	r2, #0
 80062de:	4413      	add	r3, r2
 80062e0:	1a18      	subs	r0, r3, r0
 80062e2:	b003      	add	sp, #12
 80062e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ee:	e7ed      	b.n	80062cc <__exponent+0x4c>
 80062f0:	2330      	movs	r3, #48	; 0x30
 80062f2:	3130      	adds	r1, #48	; 0x30
 80062f4:	7083      	strb	r3, [r0, #2]
 80062f6:	70c1      	strb	r1, [r0, #3]
 80062f8:	1d03      	adds	r3, r0, #4
 80062fa:	e7f1      	b.n	80062e0 <__exponent+0x60>

080062fc <_printf_float>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	ed2d 8b02 	vpush	{d8}
 8006304:	b08d      	sub	sp, #52	; 0x34
 8006306:	460c      	mov	r4, r1
 8006308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800630c:	4616      	mov	r6, r2
 800630e:	461f      	mov	r7, r3
 8006310:	4605      	mov	r5, r0
 8006312:	f001 fd5d 	bl	8007dd0 <_localeconv_r>
 8006316:	f8d0 a000 	ldr.w	sl, [r0]
 800631a:	4650      	mov	r0, sl
 800631c:	f7f9 ff78 	bl	8000210 <strlen>
 8006320:	2300      	movs	r3, #0
 8006322:	930a      	str	r3, [sp, #40]	; 0x28
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	9305      	str	r3, [sp, #20]
 8006328:	f8d8 3000 	ldr.w	r3, [r8]
 800632c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006330:	3307      	adds	r3, #7
 8006332:	f023 0307 	bic.w	r3, r3, #7
 8006336:	f103 0208 	add.w	r2, r3, #8
 800633a:	f8c8 2000 	str.w	r2, [r8]
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006346:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800634a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800634e:	9307      	str	r3, [sp, #28]
 8006350:	f8cd 8018 	str.w	r8, [sp, #24]
 8006354:	ee08 0a10 	vmov	s16, r0
 8006358:	4b9f      	ldr	r3, [pc, #636]	; (80065d8 <_printf_float+0x2dc>)
 800635a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800635e:	f04f 32ff 	mov.w	r2, #4294967295
 8006362:	f7fa fc03 	bl	8000b6c <__aeabi_dcmpun>
 8006366:	bb88      	cbnz	r0, 80063cc <_printf_float+0xd0>
 8006368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800636c:	4b9a      	ldr	r3, [pc, #616]	; (80065d8 <_printf_float+0x2dc>)
 800636e:	f04f 32ff 	mov.w	r2, #4294967295
 8006372:	f7fa fbdd 	bl	8000b30 <__aeabi_dcmple>
 8006376:	bb48      	cbnz	r0, 80063cc <_printf_float+0xd0>
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7fa fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8006384:	b110      	cbz	r0, 800638c <_printf_float+0x90>
 8006386:	232d      	movs	r3, #45	; 0x2d
 8006388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638c:	4b93      	ldr	r3, [pc, #588]	; (80065dc <_printf_float+0x2e0>)
 800638e:	4894      	ldr	r0, [pc, #592]	; (80065e0 <_printf_float+0x2e4>)
 8006390:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006394:	bf94      	ite	ls
 8006396:	4698      	movls	r8, r3
 8006398:	4680      	movhi	r8, r0
 800639a:	2303      	movs	r3, #3
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	9b05      	ldr	r3, [sp, #20]
 80063a0:	f023 0204 	bic.w	r2, r3, #4
 80063a4:	6022      	str	r2, [r4, #0]
 80063a6:	f04f 0900 	mov.w	r9, #0
 80063aa:	9700      	str	r7, [sp, #0]
 80063ac:	4633      	mov	r3, r6
 80063ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f9d8 	bl	8006768 <_printf_common>
 80063b8:	3001      	adds	r0, #1
 80063ba:	f040 8090 	bne.w	80064de <_printf_float+0x1e2>
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	b00d      	add	sp, #52	; 0x34
 80063c4:	ecbd 8b02 	vpop	{d8}
 80063c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7fa fbca 	bl	8000b6c <__aeabi_dcmpun>
 80063d8:	b140      	cbz	r0, 80063ec <_printf_float+0xf0>
 80063da:	464b      	mov	r3, r9
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfbc      	itt	lt
 80063e0:	232d      	movlt	r3, #45	; 0x2d
 80063e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063e6:	487f      	ldr	r0, [pc, #508]	; (80065e4 <_printf_float+0x2e8>)
 80063e8:	4b7f      	ldr	r3, [pc, #508]	; (80065e8 <_printf_float+0x2ec>)
 80063ea:	e7d1      	b.n	8006390 <_printf_float+0x94>
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063f2:	9206      	str	r2, [sp, #24]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	d13f      	bne.n	8006478 <_printf_float+0x17c>
 80063f8:	2306      	movs	r3, #6
 80063fa:	6063      	str	r3, [r4, #4]
 80063fc:	9b05      	ldr	r3, [sp, #20]
 80063fe:	6861      	ldr	r1, [r4, #4]
 8006400:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006404:	2300      	movs	r3, #0
 8006406:	9303      	str	r3, [sp, #12]
 8006408:	ab0a      	add	r3, sp, #40	; 0x28
 800640a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800640e:	ab09      	add	r3, sp, #36	; 0x24
 8006410:	ec49 8b10 	vmov	d0, r8, r9
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6022      	str	r2, [r4, #0]
 8006418:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800641c:	4628      	mov	r0, r5
 800641e:	f7ff fecd 	bl	80061bc <__cvt>
 8006422:	9b06      	ldr	r3, [sp, #24]
 8006424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006426:	2b47      	cmp	r3, #71	; 0x47
 8006428:	4680      	mov	r8, r0
 800642a:	d108      	bne.n	800643e <_printf_float+0x142>
 800642c:	1cc8      	adds	r0, r1, #3
 800642e:	db02      	blt.n	8006436 <_printf_float+0x13a>
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	4299      	cmp	r1, r3
 8006434:	dd41      	ble.n	80064ba <_printf_float+0x1be>
 8006436:	f1ab 0b02 	sub.w	fp, fp, #2
 800643a:	fa5f fb8b 	uxtb.w	fp, fp
 800643e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006442:	d820      	bhi.n	8006486 <_printf_float+0x18a>
 8006444:	3901      	subs	r1, #1
 8006446:	465a      	mov	r2, fp
 8006448:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800644c:	9109      	str	r1, [sp, #36]	; 0x24
 800644e:	f7ff ff17 	bl	8006280 <__exponent>
 8006452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006454:	1813      	adds	r3, r2, r0
 8006456:	2a01      	cmp	r2, #1
 8006458:	4681      	mov	r9, r0
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	dc02      	bgt.n	8006464 <_printf_float+0x168>
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	07d2      	lsls	r2, r2, #31
 8006462:	d501      	bpl.n	8006468 <_printf_float+0x16c>
 8006464:	3301      	adds	r3, #1
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800646c:	2b00      	cmp	r3, #0
 800646e:	d09c      	beq.n	80063aa <_printf_float+0xae>
 8006470:	232d      	movs	r3, #45	; 0x2d
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	e798      	b.n	80063aa <_printf_float+0xae>
 8006478:	9a06      	ldr	r2, [sp, #24]
 800647a:	2a47      	cmp	r2, #71	; 0x47
 800647c:	d1be      	bne.n	80063fc <_printf_float+0x100>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1bc      	bne.n	80063fc <_printf_float+0x100>
 8006482:	2301      	movs	r3, #1
 8006484:	e7b9      	b.n	80063fa <_printf_float+0xfe>
 8006486:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800648a:	d118      	bne.n	80064be <_printf_float+0x1c2>
 800648c:	2900      	cmp	r1, #0
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	dd0b      	ble.n	80064aa <_printf_float+0x1ae>
 8006492:	6121      	str	r1, [r4, #16]
 8006494:	b913      	cbnz	r3, 800649c <_printf_float+0x1a0>
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	07d0      	lsls	r0, r2, #31
 800649a:	d502      	bpl.n	80064a2 <_printf_float+0x1a6>
 800649c:	3301      	adds	r3, #1
 800649e:	440b      	add	r3, r1
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80064a4:	f04f 0900 	mov.w	r9, #0
 80064a8:	e7de      	b.n	8006468 <_printf_float+0x16c>
 80064aa:	b913      	cbnz	r3, 80064b2 <_printf_float+0x1b6>
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	07d2      	lsls	r2, r2, #31
 80064b0:	d501      	bpl.n	80064b6 <_printf_float+0x1ba>
 80064b2:	3302      	adds	r3, #2
 80064b4:	e7f4      	b.n	80064a0 <_printf_float+0x1a4>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e7f2      	b.n	80064a0 <_printf_float+0x1a4>
 80064ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	4299      	cmp	r1, r3
 80064c2:	db05      	blt.n	80064d0 <_printf_float+0x1d4>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	6121      	str	r1, [r4, #16]
 80064c8:	07d8      	lsls	r0, r3, #31
 80064ca:	d5ea      	bpl.n	80064a2 <_printf_float+0x1a6>
 80064cc:	1c4b      	adds	r3, r1, #1
 80064ce:	e7e7      	b.n	80064a0 <_printf_float+0x1a4>
 80064d0:	2900      	cmp	r1, #0
 80064d2:	bfd4      	ite	le
 80064d4:	f1c1 0202 	rsble	r2, r1, #2
 80064d8:	2201      	movgt	r2, #1
 80064da:	4413      	add	r3, r2
 80064dc:	e7e0      	b.n	80064a0 <_printf_float+0x1a4>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	055a      	lsls	r2, r3, #21
 80064e2:	d407      	bmi.n	80064f4 <_printf_float+0x1f8>
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	4642      	mov	r2, r8
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	d12c      	bne.n	800654c <_printf_float+0x250>
 80064f2:	e764      	b.n	80063be <_printf_float+0xc2>
 80064f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064f8:	f240 80e0 	bls.w	80066bc <_printf_float+0x3c0>
 80064fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	f7fa fb00 	bl	8000b08 <__aeabi_dcmpeq>
 8006508:	2800      	cmp	r0, #0
 800650a:	d034      	beq.n	8006576 <_printf_float+0x27a>
 800650c:	4a37      	ldr	r2, [pc, #220]	; (80065ec <_printf_float+0x2f0>)
 800650e:	2301      	movs	r3, #1
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af51 	beq.w	80063be <_printf_float+0xc2>
 800651c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006520:	429a      	cmp	r2, r3
 8006522:	db02      	blt.n	800652a <_printf_float+0x22e>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07d8      	lsls	r0, r3, #31
 8006528:	d510      	bpl.n	800654c <_printf_float+0x250>
 800652a:	ee18 3a10 	vmov	r3, s16
 800652e:	4652      	mov	r2, sl
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f af41 	beq.w	80063be <_printf_float+0xc2>
 800653c:	f04f 0800 	mov.w	r8, #0
 8006540:	f104 091a 	add.w	r9, r4, #26
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	3b01      	subs	r3, #1
 8006548:	4543      	cmp	r3, r8
 800654a:	dc09      	bgt.n	8006560 <_printf_float+0x264>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	079b      	lsls	r3, r3, #30
 8006550:	f100 8105 	bmi.w	800675e <_printf_float+0x462>
 8006554:	68e0      	ldr	r0, [r4, #12]
 8006556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006558:	4298      	cmp	r0, r3
 800655a:	bfb8      	it	lt
 800655c:	4618      	movlt	r0, r3
 800655e:	e730      	b.n	80063c2 <_printf_float+0xc6>
 8006560:	2301      	movs	r3, #1
 8006562:	464a      	mov	r2, r9
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	f43f af27 	beq.w	80063be <_printf_float+0xc2>
 8006570:	f108 0801 	add.w	r8, r8, #1
 8006574:	e7e6      	b.n	8006544 <_printf_float+0x248>
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	dc39      	bgt.n	80065f0 <_printf_float+0x2f4>
 800657c:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <_printf_float+0x2f0>)
 800657e:	2301      	movs	r3, #1
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	f43f af19 	beq.w	80063be <_printf_float+0xc2>
 800658c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006590:	4313      	orrs	r3, r2
 8006592:	d102      	bne.n	800659a <_printf_float+0x29e>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	07d9      	lsls	r1, r3, #31
 8006598:	d5d8      	bpl.n	800654c <_printf_float+0x250>
 800659a:	ee18 3a10 	vmov	r3, s16
 800659e:	4652      	mov	r2, sl
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af09 	beq.w	80063be <_printf_float+0xc2>
 80065ac:	f04f 0900 	mov.w	r9, #0
 80065b0:	f104 0a1a 	add.w	sl, r4, #26
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	425b      	negs	r3, r3
 80065b8:	454b      	cmp	r3, r9
 80065ba:	dc01      	bgt.n	80065c0 <_printf_float+0x2c4>
 80065bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065be:	e792      	b.n	80064e6 <_printf_float+0x1ea>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4652      	mov	r2, sl
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	f43f aef7 	beq.w	80063be <_printf_float+0xc2>
 80065d0:	f109 0901 	add.w	r9, r9, #1
 80065d4:	e7ee      	b.n	80065b4 <_printf_float+0x2b8>
 80065d6:	bf00      	nop
 80065d8:	7fefffff 	.word	0x7fefffff
 80065dc:	0800916c 	.word	0x0800916c
 80065e0:	08009170 	.word	0x08009170
 80065e4:	08009178 	.word	0x08009178
 80065e8:	08009174 	.word	0x08009174
 80065ec:	0800917c 	.word	0x0800917c
 80065f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f4:	429a      	cmp	r2, r3
 80065f6:	bfa8      	it	ge
 80065f8:	461a      	movge	r2, r3
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	4691      	mov	r9, r2
 80065fe:	dc37      	bgt.n	8006670 <_printf_float+0x374>
 8006600:	f04f 0b00 	mov.w	fp, #0
 8006604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006608:	f104 021a 	add.w	r2, r4, #26
 800660c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800660e:	9305      	str	r3, [sp, #20]
 8006610:	eba3 0309 	sub.w	r3, r3, r9
 8006614:	455b      	cmp	r3, fp
 8006616:	dc33      	bgt.n	8006680 <_printf_float+0x384>
 8006618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661c:	429a      	cmp	r2, r3
 800661e:	db3b      	blt.n	8006698 <_printf_float+0x39c>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	07da      	lsls	r2, r3, #31
 8006624:	d438      	bmi.n	8006698 <_printf_float+0x39c>
 8006626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006628:	9b05      	ldr	r3, [sp, #20]
 800662a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	eba2 0901 	sub.w	r9, r2, r1
 8006632:	4599      	cmp	r9, r3
 8006634:	bfa8      	it	ge
 8006636:	4699      	movge	r9, r3
 8006638:	f1b9 0f00 	cmp.w	r9, #0
 800663c:	dc35      	bgt.n	80066aa <_printf_float+0x3ae>
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006646:	f104 0a1a 	add.w	sl, r4, #26
 800664a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	eba3 0309 	sub.w	r3, r3, r9
 8006654:	4543      	cmp	r3, r8
 8006656:	f77f af79 	ble.w	800654c <_printf_float+0x250>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	47b8      	blx	r7
 8006664:	3001      	adds	r0, #1
 8006666:	f43f aeaa 	beq.w	80063be <_printf_float+0xc2>
 800666a:	f108 0801 	add.w	r8, r8, #1
 800666e:	e7ec      	b.n	800664a <_printf_float+0x34e>
 8006670:	4613      	mov	r3, r2
 8006672:	4631      	mov	r1, r6
 8006674:	4642      	mov	r2, r8
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	d1c0      	bne.n	8006600 <_printf_float+0x304>
 800667e:	e69e      	b.n	80063be <_printf_float+0xc2>
 8006680:	2301      	movs	r3, #1
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	9205      	str	r2, [sp, #20]
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f ae97 	beq.w	80063be <_printf_float+0xc2>
 8006690:	9a05      	ldr	r2, [sp, #20]
 8006692:	f10b 0b01 	add.w	fp, fp, #1
 8006696:	e7b9      	b.n	800660c <_printf_float+0x310>
 8006698:	ee18 3a10 	vmov	r3, s16
 800669c:	4652      	mov	r2, sl
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	d1be      	bne.n	8006626 <_printf_float+0x32a>
 80066a8:	e689      	b.n	80063be <_printf_float+0xc2>
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	464b      	mov	r3, r9
 80066ae:	4442      	add	r2, r8
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	d1c1      	bne.n	800663e <_printf_float+0x342>
 80066ba:	e680      	b.n	80063be <_printf_float+0xc2>
 80066bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066be:	2a01      	cmp	r2, #1
 80066c0:	dc01      	bgt.n	80066c6 <_printf_float+0x3ca>
 80066c2:	07db      	lsls	r3, r3, #31
 80066c4:	d538      	bpl.n	8006738 <_printf_float+0x43c>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4642      	mov	r2, r8
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f ae74 	beq.w	80063be <_printf_float+0xc2>
 80066d6:	ee18 3a10 	vmov	r3, s16
 80066da:	4652      	mov	r2, sl
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f ae6b 	beq.w	80063be <_printf_float+0xc2>
 80066e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	f7fa fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80066f4:	b9d8      	cbnz	r0, 800672e <_printf_float+0x432>
 80066f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f8:	f108 0201 	add.w	r2, r8, #1
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	d10e      	bne.n	8006726 <_printf_float+0x42a>
 8006708:	e659      	b.n	80063be <_printf_float+0xc2>
 800670a:	2301      	movs	r3, #1
 800670c:	4652      	mov	r2, sl
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f ae52 	beq.w	80063be <_printf_float+0xc2>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006720:	3b01      	subs	r3, #1
 8006722:	4543      	cmp	r3, r8
 8006724:	dcf1      	bgt.n	800670a <_printf_float+0x40e>
 8006726:	464b      	mov	r3, r9
 8006728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800672c:	e6dc      	b.n	80064e8 <_printf_float+0x1ec>
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	f104 0a1a 	add.w	sl, r4, #26
 8006736:	e7f2      	b.n	800671e <_printf_float+0x422>
 8006738:	2301      	movs	r3, #1
 800673a:	4642      	mov	r2, r8
 800673c:	e7df      	b.n	80066fe <_printf_float+0x402>
 800673e:	2301      	movs	r3, #1
 8006740:	464a      	mov	r2, r9
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f ae38 	beq.w	80063be <_printf_float+0xc2>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006756:	1a5b      	subs	r3, r3, r1
 8006758:	4543      	cmp	r3, r8
 800675a:	dcf0      	bgt.n	800673e <_printf_float+0x442>
 800675c:	e6fa      	b.n	8006554 <_printf_float+0x258>
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	f104 0919 	add.w	r9, r4, #25
 8006766:	e7f4      	b.n	8006752 <_printf_float+0x456>

08006768 <_printf_common>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4616      	mov	r6, r2
 800676e:	4699      	mov	r9, r3
 8006770:	688a      	ldr	r2, [r1, #8]
 8006772:	690b      	ldr	r3, [r1, #16]
 8006774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006778:	4293      	cmp	r3, r2
 800677a:	bfb8      	it	lt
 800677c:	4613      	movlt	r3, r2
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006784:	4607      	mov	r7, r0
 8006786:	460c      	mov	r4, r1
 8006788:	b10a      	cbz	r2, 800678e <_printf_common+0x26>
 800678a:	3301      	adds	r3, #1
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	0699      	lsls	r1, r3, #26
 8006792:	bf42      	ittt	mi
 8006794:	6833      	ldrmi	r3, [r6, #0]
 8006796:	3302      	addmi	r3, #2
 8006798:	6033      	strmi	r3, [r6, #0]
 800679a:	6825      	ldr	r5, [r4, #0]
 800679c:	f015 0506 	ands.w	r5, r5, #6
 80067a0:	d106      	bne.n	80067b0 <_printf_common+0x48>
 80067a2:	f104 0a19 	add.w	sl, r4, #25
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	6832      	ldr	r2, [r6, #0]
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dc26      	bgt.n	80067fe <_printf_common+0x96>
 80067b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067b4:	1e13      	subs	r3, r2, #0
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	bf18      	it	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	0692      	lsls	r2, r2, #26
 80067be:	d42b      	bmi.n	8006818 <_printf_common+0xb0>
 80067c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067c4:	4649      	mov	r1, r9
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c0      	blx	r8
 80067ca:	3001      	adds	r0, #1
 80067cc:	d01e      	beq.n	800680c <_printf_common+0xa4>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	68e5      	ldr	r5, [r4, #12]
 80067d2:	6832      	ldr	r2, [r6, #0]
 80067d4:	f003 0306 	and.w	r3, r3, #6
 80067d8:	2b04      	cmp	r3, #4
 80067da:	bf08      	it	eq
 80067dc:	1aad      	subeq	r5, r5, r2
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	6922      	ldr	r2, [r4, #16]
 80067e2:	bf0c      	ite	eq
 80067e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e8:	2500      	movne	r5, #0
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bfc4      	itt	gt
 80067ee:	1a9b      	subgt	r3, r3, r2
 80067f0:	18ed      	addgt	r5, r5, r3
 80067f2:	2600      	movs	r6, #0
 80067f4:	341a      	adds	r4, #26
 80067f6:	42b5      	cmp	r5, r6
 80067f8:	d11a      	bne.n	8006830 <_printf_common+0xc8>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e008      	b.n	8006810 <_printf_common+0xa8>
 80067fe:	2301      	movs	r3, #1
 8006800:	4652      	mov	r2, sl
 8006802:	4649      	mov	r1, r9
 8006804:	4638      	mov	r0, r7
 8006806:	47c0      	blx	r8
 8006808:	3001      	adds	r0, #1
 800680a:	d103      	bne.n	8006814 <_printf_common+0xac>
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	3501      	adds	r5, #1
 8006816:	e7c6      	b.n	80067a6 <_printf_common+0x3e>
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	2030      	movs	r0, #48	; 0x30
 800681e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006822:	4422      	add	r2, r4
 8006824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800682c:	3302      	adds	r3, #2
 800682e:	e7c7      	b.n	80067c0 <_printf_common+0x58>
 8006830:	2301      	movs	r3, #1
 8006832:	4622      	mov	r2, r4
 8006834:	4649      	mov	r1, r9
 8006836:	4638      	mov	r0, r7
 8006838:	47c0      	blx	r8
 800683a:	3001      	adds	r0, #1
 800683c:	d0e6      	beq.n	800680c <_printf_common+0xa4>
 800683e:	3601      	adds	r6, #1
 8006840:	e7d9      	b.n	80067f6 <_printf_common+0x8e>
	...

08006844 <_printf_i>:
 8006844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	4691      	mov	r9, r2
 800684c:	7e27      	ldrb	r7, [r4, #24]
 800684e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006850:	2f78      	cmp	r7, #120	; 0x78
 8006852:	4680      	mov	r8, r0
 8006854:	469a      	mov	sl, r3
 8006856:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800685a:	d807      	bhi.n	800686c <_printf_i+0x28>
 800685c:	2f62      	cmp	r7, #98	; 0x62
 800685e:	d80a      	bhi.n	8006876 <_printf_i+0x32>
 8006860:	2f00      	cmp	r7, #0
 8006862:	f000 80d8 	beq.w	8006a16 <_printf_i+0x1d2>
 8006866:	2f58      	cmp	r7, #88	; 0x58
 8006868:	f000 80a3 	beq.w	80069b2 <_printf_i+0x16e>
 800686c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006874:	e03a      	b.n	80068ec <_printf_i+0xa8>
 8006876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800687a:	2b15      	cmp	r3, #21
 800687c:	d8f6      	bhi.n	800686c <_printf_i+0x28>
 800687e:	a001      	add	r0, pc, #4	; (adr r0, 8006884 <_printf_i+0x40>)
 8006880:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006884:	080068dd 	.word	0x080068dd
 8006888:	080068f1 	.word	0x080068f1
 800688c:	0800686d 	.word	0x0800686d
 8006890:	0800686d 	.word	0x0800686d
 8006894:	0800686d 	.word	0x0800686d
 8006898:	0800686d 	.word	0x0800686d
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	0800686d 	.word	0x0800686d
 80068a4:	0800686d 	.word	0x0800686d
 80068a8:	0800686d 	.word	0x0800686d
 80068ac:	0800686d 	.word	0x0800686d
 80068b0:	080069fd 	.word	0x080069fd
 80068b4:	08006921 	.word	0x08006921
 80068b8:	080069df 	.word	0x080069df
 80068bc:	0800686d 	.word	0x0800686d
 80068c0:	0800686d 	.word	0x0800686d
 80068c4:	08006a1f 	.word	0x08006a1f
 80068c8:	0800686d 	.word	0x0800686d
 80068cc:	08006921 	.word	0x08006921
 80068d0:	0800686d 	.word	0x0800686d
 80068d4:	0800686d 	.word	0x0800686d
 80068d8:	080069e7 	.word	0x080069e7
 80068dc:	680b      	ldr	r3, [r1, #0]
 80068de:	1d1a      	adds	r2, r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	600a      	str	r2, [r1, #0]
 80068e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0a3      	b.n	8006a38 <_printf_i+0x1f4>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	6808      	ldr	r0, [r1, #0]
 80068f4:	062e      	lsls	r6, r5, #24
 80068f6:	f100 0304 	add.w	r3, r0, #4
 80068fa:	d50a      	bpl.n	8006912 <_printf_i+0xce>
 80068fc:	6805      	ldr	r5, [r0, #0]
 80068fe:	600b      	str	r3, [r1, #0]
 8006900:	2d00      	cmp	r5, #0
 8006902:	da03      	bge.n	800690c <_printf_i+0xc8>
 8006904:	232d      	movs	r3, #45	; 0x2d
 8006906:	426d      	negs	r5, r5
 8006908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800690c:	485e      	ldr	r0, [pc, #376]	; (8006a88 <_printf_i+0x244>)
 800690e:	230a      	movs	r3, #10
 8006910:	e019      	b.n	8006946 <_printf_i+0x102>
 8006912:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006916:	6805      	ldr	r5, [r0, #0]
 8006918:	600b      	str	r3, [r1, #0]
 800691a:	bf18      	it	ne
 800691c:	b22d      	sxthne	r5, r5
 800691e:	e7ef      	b.n	8006900 <_printf_i+0xbc>
 8006920:	680b      	ldr	r3, [r1, #0]
 8006922:	6825      	ldr	r5, [r4, #0]
 8006924:	1d18      	adds	r0, r3, #4
 8006926:	6008      	str	r0, [r1, #0]
 8006928:	0628      	lsls	r0, r5, #24
 800692a:	d501      	bpl.n	8006930 <_printf_i+0xec>
 800692c:	681d      	ldr	r5, [r3, #0]
 800692e:	e002      	b.n	8006936 <_printf_i+0xf2>
 8006930:	0669      	lsls	r1, r5, #25
 8006932:	d5fb      	bpl.n	800692c <_printf_i+0xe8>
 8006934:	881d      	ldrh	r5, [r3, #0]
 8006936:	4854      	ldr	r0, [pc, #336]	; (8006a88 <_printf_i+0x244>)
 8006938:	2f6f      	cmp	r7, #111	; 0x6f
 800693a:	bf0c      	ite	eq
 800693c:	2308      	moveq	r3, #8
 800693e:	230a      	movne	r3, #10
 8006940:	2100      	movs	r1, #0
 8006942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006946:	6866      	ldr	r6, [r4, #4]
 8006948:	60a6      	str	r6, [r4, #8]
 800694a:	2e00      	cmp	r6, #0
 800694c:	bfa2      	ittt	ge
 800694e:	6821      	ldrge	r1, [r4, #0]
 8006950:	f021 0104 	bicge.w	r1, r1, #4
 8006954:	6021      	strge	r1, [r4, #0]
 8006956:	b90d      	cbnz	r5, 800695c <_printf_i+0x118>
 8006958:	2e00      	cmp	r6, #0
 800695a:	d04d      	beq.n	80069f8 <_printf_i+0x1b4>
 800695c:	4616      	mov	r6, r2
 800695e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006962:	fb03 5711 	mls	r7, r3, r1, r5
 8006966:	5dc7      	ldrb	r7, [r0, r7]
 8006968:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800696c:	462f      	mov	r7, r5
 800696e:	42bb      	cmp	r3, r7
 8006970:	460d      	mov	r5, r1
 8006972:	d9f4      	bls.n	800695e <_printf_i+0x11a>
 8006974:	2b08      	cmp	r3, #8
 8006976:	d10b      	bne.n	8006990 <_printf_i+0x14c>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07df      	lsls	r7, r3, #31
 800697c:	d508      	bpl.n	8006990 <_printf_i+0x14c>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	6861      	ldr	r1, [r4, #4]
 8006982:	4299      	cmp	r1, r3
 8006984:	bfde      	ittt	le
 8006986:	2330      	movle	r3, #48	; 0x30
 8006988:	f806 3c01 	strble.w	r3, [r6, #-1]
 800698c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006990:	1b92      	subs	r2, r2, r6
 8006992:	6122      	str	r2, [r4, #16]
 8006994:	f8cd a000 	str.w	sl, [sp]
 8006998:	464b      	mov	r3, r9
 800699a:	aa03      	add	r2, sp, #12
 800699c:	4621      	mov	r1, r4
 800699e:	4640      	mov	r0, r8
 80069a0:	f7ff fee2 	bl	8006768 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d14c      	bne.n	8006a42 <_printf_i+0x1fe>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	b004      	add	sp, #16
 80069ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b2:	4835      	ldr	r0, [pc, #212]	; (8006a88 <_printf_i+0x244>)
 80069b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	680e      	ldr	r6, [r1, #0]
 80069bc:	061f      	lsls	r7, r3, #24
 80069be:	f856 5b04 	ldr.w	r5, [r6], #4
 80069c2:	600e      	str	r6, [r1, #0]
 80069c4:	d514      	bpl.n	80069f0 <_printf_i+0x1ac>
 80069c6:	07d9      	lsls	r1, r3, #31
 80069c8:	bf44      	itt	mi
 80069ca:	f043 0320 	orrmi.w	r3, r3, #32
 80069ce:	6023      	strmi	r3, [r4, #0]
 80069d0:	b91d      	cbnz	r5, 80069da <_printf_i+0x196>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f023 0320 	bic.w	r3, r3, #32
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	2310      	movs	r3, #16
 80069dc:	e7b0      	b.n	8006940 <_printf_i+0xfc>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f043 0320 	orr.w	r3, r3, #32
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	2378      	movs	r3, #120	; 0x78
 80069e8:	4828      	ldr	r0, [pc, #160]	; (8006a8c <_printf_i+0x248>)
 80069ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ee:	e7e3      	b.n	80069b8 <_printf_i+0x174>
 80069f0:	065e      	lsls	r6, r3, #25
 80069f2:	bf48      	it	mi
 80069f4:	b2ad      	uxthmi	r5, r5
 80069f6:	e7e6      	b.n	80069c6 <_printf_i+0x182>
 80069f8:	4616      	mov	r6, r2
 80069fa:	e7bb      	b.n	8006974 <_printf_i+0x130>
 80069fc:	680b      	ldr	r3, [r1, #0]
 80069fe:	6826      	ldr	r6, [r4, #0]
 8006a00:	6960      	ldr	r0, [r4, #20]
 8006a02:	1d1d      	adds	r5, r3, #4
 8006a04:	600d      	str	r5, [r1, #0]
 8006a06:	0635      	lsls	r5, r6, #24
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	d501      	bpl.n	8006a10 <_printf_i+0x1cc>
 8006a0c:	6018      	str	r0, [r3, #0]
 8006a0e:	e002      	b.n	8006a16 <_printf_i+0x1d2>
 8006a10:	0671      	lsls	r1, r6, #25
 8006a12:	d5fb      	bpl.n	8006a0c <_printf_i+0x1c8>
 8006a14:	8018      	strh	r0, [r3, #0]
 8006a16:	2300      	movs	r3, #0
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	4616      	mov	r6, r2
 8006a1c:	e7ba      	b.n	8006994 <_printf_i+0x150>
 8006a1e:	680b      	ldr	r3, [r1, #0]
 8006a20:	1d1a      	adds	r2, r3, #4
 8006a22:	600a      	str	r2, [r1, #0]
 8006a24:	681e      	ldr	r6, [r3, #0]
 8006a26:	6862      	ldr	r2, [r4, #4]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7f9 fbf8 	bl	8000220 <memchr>
 8006a30:	b108      	cbz	r0, 8006a36 <_printf_i+0x1f2>
 8006a32:	1b80      	subs	r0, r0, r6
 8006a34:	6060      	str	r0, [r4, #4]
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a40:	e7a8      	b.n	8006994 <_printf_i+0x150>
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	4632      	mov	r2, r6
 8006a46:	4649      	mov	r1, r9
 8006a48:	4640      	mov	r0, r8
 8006a4a:	47d0      	blx	sl
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d0ab      	beq.n	80069a8 <_printf_i+0x164>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	079b      	lsls	r3, r3, #30
 8006a54:	d413      	bmi.n	8006a7e <_printf_i+0x23a>
 8006a56:	68e0      	ldr	r0, [r4, #12]
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	4298      	cmp	r0, r3
 8006a5c:	bfb8      	it	lt
 8006a5e:	4618      	movlt	r0, r3
 8006a60:	e7a4      	b.n	80069ac <_printf_i+0x168>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4632      	mov	r2, r6
 8006a66:	4649      	mov	r1, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	47d0      	blx	sl
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d09b      	beq.n	80069a8 <_printf_i+0x164>
 8006a70:	3501      	adds	r5, #1
 8006a72:	68e3      	ldr	r3, [r4, #12]
 8006a74:	9903      	ldr	r1, [sp, #12]
 8006a76:	1a5b      	subs	r3, r3, r1
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dcf2      	bgt.n	8006a62 <_printf_i+0x21e>
 8006a7c:	e7eb      	b.n	8006a56 <_printf_i+0x212>
 8006a7e:	2500      	movs	r5, #0
 8006a80:	f104 0619 	add.w	r6, r4, #25
 8006a84:	e7f5      	b.n	8006a72 <_printf_i+0x22e>
 8006a86:	bf00      	nop
 8006a88:	0800917e 	.word	0x0800917e
 8006a8c:	0800918f 	.word	0x0800918f

08006a90 <iprintf>:
 8006a90:	b40f      	push	{r0, r1, r2, r3}
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <iprintf+0x2c>)
 8006a94:	b513      	push	{r0, r1, r4, lr}
 8006a96:	681c      	ldr	r4, [r3, #0]
 8006a98:	b124      	cbz	r4, 8006aa4 <iprintf+0x14>
 8006a9a:	69a3      	ldr	r3, [r4, #24]
 8006a9c:	b913      	cbnz	r3, 8006aa4 <iprintf+0x14>
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 f8f8 	bl	8007c94 <__sinit>
 8006aa4:	ab05      	add	r3, sp, #20
 8006aa6:	9a04      	ldr	r2, [sp, #16]
 8006aa8:	68a1      	ldr	r1, [r4, #8]
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	4620      	mov	r0, r4
 8006aae:	f001 ffcf 	bl	8008a50 <_vfiprintf_r>
 8006ab2:	b002      	add	sp, #8
 8006ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab8:	b004      	add	sp, #16
 8006aba:	4770      	bx	lr
 8006abc:	20000010 	.word	0x20000010

08006ac0 <_puts_r>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	b118      	cbz	r0, 8006ad0 <_puts_r+0x10>
 8006ac8:	6983      	ldr	r3, [r0, #24]
 8006aca:	b90b      	cbnz	r3, 8006ad0 <_puts_r+0x10>
 8006acc:	f001 f8e2 	bl	8007c94 <__sinit>
 8006ad0:	69ab      	ldr	r3, [r5, #24]
 8006ad2:	68ac      	ldr	r4, [r5, #8]
 8006ad4:	b913      	cbnz	r3, 8006adc <_puts_r+0x1c>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f001 f8dc 	bl	8007c94 <__sinit>
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <_puts_r+0xd0>)
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d120      	bne.n	8006b24 <_puts_r+0x64>
 8006ae2:	686c      	ldr	r4, [r5, #4]
 8006ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae6:	07db      	lsls	r3, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_puts_r+0x36>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	0598      	lsls	r0, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_puts_r+0x36>
 8006af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af2:	f001 f972 	bl	8007dda <__retarget_lock_acquire_recursive>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	0719      	lsls	r1, r3, #28
 8006afa:	d51d      	bpl.n	8006b38 <_puts_r+0x78>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	b1db      	cbz	r3, 8006b38 <_puts_r+0x78>
 8006b00:	3e01      	subs	r6, #1
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	bb39      	cbnz	r1, 8006b5e <_puts_r+0x9e>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da38      	bge.n	8006b84 <_puts_r+0xc4>
 8006b12:	4622      	mov	r2, r4
 8006b14:	210a      	movs	r1, #10
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f868 	bl	8006bec <__swbuf_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d011      	beq.n	8006b44 <_puts_r+0x84>
 8006b20:	250a      	movs	r5, #10
 8006b22:	e011      	b.n	8006b48 <_puts_r+0x88>
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <_puts_r+0xd4>)
 8006b26:	429c      	cmp	r4, r3
 8006b28:	d101      	bne.n	8006b2e <_puts_r+0x6e>
 8006b2a:	68ac      	ldr	r4, [r5, #8]
 8006b2c:	e7da      	b.n	8006ae4 <_puts_r+0x24>
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <_puts_r+0xd8>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	bf08      	it	eq
 8006b34:	68ec      	ldreq	r4, [r5, #12]
 8006b36:	e7d5      	b.n	8006ae4 <_puts_r+0x24>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 f8a8 	bl	8006c90 <__swsetup_r>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d0dd      	beq.n	8006b00 <_puts_r+0x40>
 8006b44:	f04f 35ff 	mov.w	r5, #4294967295
 8006b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d405      	bmi.n	8006b5a <_puts_r+0x9a>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <_puts_r+0x9a>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f001 f941 	bl	8007ddc <__retarget_lock_release_recursive>
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da04      	bge.n	8006b6c <_puts_r+0xac>
 8006b62:	69a2      	ldr	r2, [r4, #24]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	dc06      	bgt.n	8006b76 <_puts_r+0xb6>
 8006b68:	290a      	cmp	r1, #10
 8006b6a:	d004      	beq.n	8006b76 <_puts_r+0xb6>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	7019      	strb	r1, [r3, #0]
 8006b74:	e7c5      	b.n	8006b02 <_puts_r+0x42>
 8006b76:	4622      	mov	r2, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f837 	bl	8006bec <__swbuf_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d1bf      	bne.n	8006b02 <_puts_r+0x42>
 8006b82:	e7df      	b.n	8006b44 <_puts_r+0x84>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	250a      	movs	r5, #10
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	701d      	strb	r5, [r3, #0]
 8006b8e:	e7db      	b.n	8006b48 <_puts_r+0x88>
 8006b90:	08009254 	.word	0x08009254
 8006b94:	08009274 	.word	0x08009274
 8006b98:	08009234 	.word	0x08009234

08006b9c <puts>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <puts+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f7ff bf8d 	b.w	8006ac0 <_puts_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000010 	.word	0x20000010

08006bac <_vsiprintf_r>:
 8006bac:	b500      	push	{lr}
 8006bae:	b09b      	sub	sp, #108	; 0x6c
 8006bb0:	9100      	str	r1, [sp, #0]
 8006bb2:	9104      	str	r1, [sp, #16]
 8006bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb8:	9105      	str	r1, [sp, #20]
 8006bba:	9102      	str	r1, [sp, #8]
 8006bbc:	4905      	ldr	r1, [pc, #20]	; (8006bd4 <_vsiprintf_r+0x28>)
 8006bbe:	9103      	str	r1, [sp, #12]
 8006bc0:	4669      	mov	r1, sp
 8006bc2:	f001 fe1b 	bl	80087fc <_svfiprintf_r>
 8006bc6:	9b00      	ldr	r3, [sp, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	b01b      	add	sp, #108	; 0x6c
 8006bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd2:	bf00      	nop
 8006bd4:	ffff0208 	.word	0xffff0208

08006bd8 <vsiprintf>:
 8006bd8:	4613      	mov	r3, r2
 8006bda:	460a      	mov	r2, r1
 8006bdc:	4601      	mov	r1, r0
 8006bde:	4802      	ldr	r0, [pc, #8]	; (8006be8 <vsiprintf+0x10>)
 8006be0:	6800      	ldr	r0, [r0, #0]
 8006be2:	f7ff bfe3 	b.w	8006bac <_vsiprintf_r>
 8006be6:	bf00      	nop
 8006be8:	20000010 	.word	0x20000010

08006bec <__swbuf_r>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	460e      	mov	r6, r1
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	b118      	cbz	r0, 8006bfe <__swbuf_r+0x12>
 8006bf6:	6983      	ldr	r3, [r0, #24]
 8006bf8:	b90b      	cbnz	r3, 8006bfe <__swbuf_r+0x12>
 8006bfa:	f001 f84b 	bl	8007c94 <__sinit>
 8006bfe:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <__swbuf_r+0x98>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	d12b      	bne.n	8006c5c <__swbuf_r+0x70>
 8006c04:	686c      	ldr	r4, [r5, #4]
 8006c06:	69a3      	ldr	r3, [r4, #24]
 8006c08:	60a3      	str	r3, [r4, #8]
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	071a      	lsls	r2, r3, #28
 8006c0e:	d52f      	bpl.n	8006c70 <__swbuf_r+0x84>
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	b36b      	cbz	r3, 8006c70 <__swbuf_r+0x84>
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1ac0      	subs	r0, r0, r3
 8006c1a:	6963      	ldr	r3, [r4, #20]
 8006c1c:	b2f6      	uxtb	r6, r6
 8006c1e:	4283      	cmp	r3, r0
 8006c20:	4637      	mov	r7, r6
 8006c22:	dc04      	bgt.n	8006c2e <__swbuf_r+0x42>
 8006c24:	4621      	mov	r1, r4
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 ffa0 	bl	8007b6c <_fflush_r>
 8006c2c:	bb30      	cbnz	r0, 8006c7c <__swbuf_r+0x90>
 8006c2e:	68a3      	ldr	r3, [r4, #8]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	701e      	strb	r6, [r3, #0]
 8006c3c:	6963      	ldr	r3, [r4, #20]
 8006c3e:	3001      	adds	r0, #1
 8006c40:	4283      	cmp	r3, r0
 8006c42:	d004      	beq.n	8006c4e <__swbuf_r+0x62>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	07db      	lsls	r3, r3, #31
 8006c48:	d506      	bpl.n	8006c58 <__swbuf_r+0x6c>
 8006c4a:	2e0a      	cmp	r6, #10
 8006c4c:	d104      	bne.n	8006c58 <__swbuf_r+0x6c>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 ff8b 	bl	8007b6c <_fflush_r>
 8006c56:	b988      	cbnz	r0, 8006c7c <__swbuf_r+0x90>
 8006c58:	4638      	mov	r0, r7
 8006c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <__swbuf_r+0x9c>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d101      	bne.n	8006c66 <__swbuf_r+0x7a>
 8006c62:	68ac      	ldr	r4, [r5, #8]
 8006c64:	e7cf      	b.n	8006c06 <__swbuf_r+0x1a>
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <__swbuf_r+0xa0>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	bf08      	it	eq
 8006c6c:	68ec      	ldreq	r4, [r5, #12]
 8006c6e:	e7ca      	b.n	8006c06 <__swbuf_r+0x1a>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f80c 	bl	8006c90 <__swsetup_r>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d0cb      	beq.n	8006c14 <__swbuf_r+0x28>
 8006c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c80:	e7ea      	b.n	8006c58 <__swbuf_r+0x6c>
 8006c82:	bf00      	nop
 8006c84:	08009254 	.word	0x08009254
 8006c88:	08009274 	.word	0x08009274
 8006c8c:	08009234 	.word	0x08009234

08006c90 <__swsetup_r>:
 8006c90:	4b32      	ldr	r3, [pc, #200]	; (8006d5c <__swsetup_r+0xcc>)
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	681d      	ldr	r5, [r3, #0]
 8006c96:	4606      	mov	r6, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	b125      	cbz	r5, 8006ca6 <__swsetup_r+0x16>
 8006c9c:	69ab      	ldr	r3, [r5, #24]
 8006c9e:	b913      	cbnz	r3, 8006ca6 <__swsetup_r+0x16>
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 fff7 	bl	8007c94 <__sinit>
 8006ca6:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <__swsetup_r+0xd0>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	d10f      	bne.n	8006ccc <__swsetup_r+0x3c>
 8006cac:	686c      	ldr	r4, [r5, #4]
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb4:	0719      	lsls	r1, r3, #28
 8006cb6:	d42c      	bmi.n	8006d12 <__swsetup_r+0x82>
 8006cb8:	06dd      	lsls	r5, r3, #27
 8006cba:	d411      	bmi.n	8006ce0 <__swsetup_r+0x50>
 8006cbc:	2309      	movs	r3, #9
 8006cbe:	6033      	str	r3, [r6, #0]
 8006cc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cca:	e03e      	b.n	8006d4a <__swsetup_r+0xba>
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <__swsetup_r+0xd4>)
 8006cce:	429c      	cmp	r4, r3
 8006cd0:	d101      	bne.n	8006cd6 <__swsetup_r+0x46>
 8006cd2:	68ac      	ldr	r4, [r5, #8]
 8006cd4:	e7eb      	b.n	8006cae <__swsetup_r+0x1e>
 8006cd6:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <__swsetup_r+0xd8>)
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	bf08      	it	eq
 8006cdc:	68ec      	ldreq	r4, [r5, #12]
 8006cde:	e7e6      	b.n	8006cae <__swsetup_r+0x1e>
 8006ce0:	0758      	lsls	r0, r3, #29
 8006ce2:	d512      	bpl.n	8006d0a <__swsetup_r+0x7a>
 8006ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce6:	b141      	cbz	r1, 8006cfa <__swsetup_r+0x6a>
 8006ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d002      	beq.n	8006cf6 <__swsetup_r+0x66>
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f001 fc7d 	bl	80085f0 <_free_r>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	b94b      	cbnz	r3, 8006d2a <__swsetup_r+0x9a>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d20:	d003      	beq.n	8006d2a <__swsetup_r+0x9a>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4630      	mov	r0, r6
 8006d26:	f001 f87f 	bl	8007e28 <__smakebuf_r>
 8006d2a:	89a0      	ldrh	r0, [r4, #12]
 8006d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d30:	f010 0301 	ands.w	r3, r0, #1
 8006d34:	d00a      	beq.n	8006d4c <__swsetup_r+0xbc>
 8006d36:	2300      	movs	r3, #0
 8006d38:	60a3      	str	r3, [r4, #8]
 8006d3a:	6963      	ldr	r3, [r4, #20]
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	61a3      	str	r3, [r4, #24]
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	b943      	cbnz	r3, 8006d56 <__swsetup_r+0xc6>
 8006d44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d48:	d1ba      	bne.n	8006cc0 <__swsetup_r+0x30>
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	0781      	lsls	r1, r0, #30
 8006d4e:	bf58      	it	pl
 8006d50:	6963      	ldrpl	r3, [r4, #20]
 8006d52:	60a3      	str	r3, [r4, #8]
 8006d54:	e7f4      	b.n	8006d40 <__swsetup_r+0xb0>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e7f7      	b.n	8006d4a <__swsetup_r+0xba>
 8006d5a:	bf00      	nop
 8006d5c:	20000010 	.word	0x20000010
 8006d60:	08009254 	.word	0x08009254
 8006d64:	08009274 	.word	0x08009274
 8006d68:	08009234 	.word	0x08009234

08006d6c <quorem>:
 8006d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	6903      	ldr	r3, [r0, #16]
 8006d72:	690c      	ldr	r4, [r1, #16]
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	4607      	mov	r7, r0
 8006d78:	f2c0 8081 	blt.w	8006e7e <quorem+0x112>
 8006d7c:	3c01      	subs	r4, #1
 8006d7e:	f101 0814 	add.w	r8, r1, #20
 8006d82:	f100 0514 	add.w	r5, r0, #20
 8006d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d94:	3301      	adds	r3, #1
 8006d96:	429a      	cmp	r2, r3
 8006d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006da4:	d331      	bcc.n	8006e0a <quorem+0x9e>
 8006da6:	f04f 0e00 	mov.w	lr, #0
 8006daa:	4640      	mov	r0, r8
 8006dac:	46ac      	mov	ip, r5
 8006dae:	46f2      	mov	sl, lr
 8006db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006db4:	b293      	uxth	r3, r2
 8006db6:	fb06 e303 	mla	r3, r6, r3, lr
 8006dba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8006dc4:	0c12      	lsrs	r2, r2, #16
 8006dc6:	f8dc a000 	ldr.w	sl, [ip]
 8006dca:	fb06 e202 	mla	r2, r6, r2, lr
 8006dce:	fa13 f38a 	uxtah	r3, r3, sl
 8006dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dd6:	fa1f fa82 	uxth.w	sl, r2
 8006dda:	f8dc 2000 	ldr.w	r2, [ip]
 8006dde:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dec:	4581      	cmp	r9, r0
 8006dee:	f84c 3b04 	str.w	r3, [ip], #4
 8006df2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006df6:	d2db      	bcs.n	8006db0 <quorem+0x44>
 8006df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dfc:	b92b      	cbnz	r3, 8006e0a <quorem+0x9e>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	429d      	cmp	r5, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	d32e      	bcc.n	8006e66 <quorem+0xfa>
 8006e08:	613c      	str	r4, [r7, #16]
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f001 fae0 	bl	80083d0 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	db24      	blt.n	8006e5e <quorem+0xf2>
 8006e14:	3601      	adds	r6, #1
 8006e16:	4628      	mov	r0, r5
 8006e18:	f04f 0c00 	mov.w	ip, #0
 8006e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e20:	f8d0 e000 	ldr.w	lr, [r0]
 8006e24:	b293      	uxth	r3, r2
 8006e26:	ebac 0303 	sub.w	r3, ip, r3
 8006e2a:	0c12      	lsrs	r2, r2, #16
 8006e2c:	fa13 f38e 	uxtah	r3, r3, lr
 8006e30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3e:	45c1      	cmp	r9, r8
 8006e40:	f840 3b04 	str.w	r3, [r0], #4
 8006e44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e48:	d2e8      	bcs.n	8006e1c <quorem+0xb0>
 8006e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e52:	b922      	cbnz	r2, 8006e5e <quorem+0xf2>
 8006e54:	3b04      	subs	r3, #4
 8006e56:	429d      	cmp	r5, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	d30a      	bcc.n	8006e72 <quorem+0x106>
 8006e5c:	613c      	str	r4, [r7, #16]
 8006e5e:	4630      	mov	r0, r6
 8006e60:	b003      	add	sp, #12
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	d1cc      	bne.n	8006e08 <quorem+0x9c>
 8006e6e:	3c01      	subs	r4, #1
 8006e70:	e7c7      	b.n	8006e02 <quorem+0x96>
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d1f0      	bne.n	8006e5c <quorem+0xf0>
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	e7eb      	b.n	8006e56 <quorem+0xea>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e7ee      	b.n	8006e60 <quorem+0xf4>
 8006e82:	0000      	movs	r0, r0
 8006e84:	0000      	movs	r0, r0
	...

08006e88 <_dtoa_r>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	ed2d 8b02 	vpush	{d8}
 8006e90:	ec57 6b10 	vmov	r6, r7, d0
 8006e94:	b095      	sub	sp, #84	; 0x54
 8006e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea8:	b975      	cbnz	r5, 8006ec8 <_dtoa_r+0x40>
 8006eaa:	2010      	movs	r0, #16
 8006eac:	f000 fffc 	bl	8007ea8 <malloc>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6260      	str	r0, [r4, #36]	; 0x24
 8006eb4:	b920      	cbnz	r0, 8006ec0 <_dtoa_r+0x38>
 8006eb6:	4bb2      	ldr	r3, [pc, #712]	; (8007180 <_dtoa_r+0x2f8>)
 8006eb8:	21ea      	movs	r1, #234	; 0xea
 8006eba:	48b2      	ldr	r0, [pc, #712]	; (8007184 <_dtoa_r+0x2fc>)
 8006ebc:	f001 ff5e 	bl	8008d7c <__assert_func>
 8006ec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ec4:	6005      	str	r5, [r0, #0]
 8006ec6:	60c5      	str	r5, [r0, #12]
 8006ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	b151      	cbz	r1, 8006ee4 <_dtoa_r+0x5c>
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	604a      	str	r2, [r1, #4]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4093      	lsls	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f001 f83b 	bl	8007f54 <_Bfree>
 8006ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	1e3b      	subs	r3, r7, #0
 8006ee6:	bfb9      	ittee	lt
 8006ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	9303      	strlt	r3, [sp, #12]
 8006eee:	2300      	movge	r3, #0
 8006ef0:	f8c8 3000 	strge.w	r3, [r8]
 8006ef4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006ef8:	4ba3      	ldr	r3, [pc, #652]	; (8007188 <_dtoa_r+0x300>)
 8006efa:	bfbc      	itt	lt
 8006efc:	2201      	movlt	r2, #1
 8006efe:	f8c8 2000 	strlt.w	r2, [r8]
 8006f02:	ea33 0309 	bics.w	r3, r3, r9
 8006f06:	d11b      	bne.n	8006f40 <_dtoa_r+0xb8>
 8006f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f14:	4333      	orrs	r3, r6
 8006f16:	f000 857a 	beq.w	8007a0e <_dtoa_r+0xb86>
 8006f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f1c:	b963      	cbnz	r3, 8006f38 <_dtoa_r+0xb0>
 8006f1e:	4b9b      	ldr	r3, [pc, #620]	; (800718c <_dtoa_r+0x304>)
 8006f20:	e024      	b.n	8006f6c <_dtoa_r+0xe4>
 8006f22:	4b9b      	ldr	r3, [pc, #620]	; (8007190 <_dtoa_r+0x308>)
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9800      	ldr	r0, [sp, #0]
 8006f2e:	b015      	add	sp, #84	; 0x54
 8006f30:	ecbd 8b02 	vpop	{d8}
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	4b94      	ldr	r3, [pc, #592]	; (800718c <_dtoa_r+0x304>)
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	3303      	adds	r3, #3
 8006f3e:	e7f3      	b.n	8006f28 <_dtoa_r+0xa0>
 8006f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	ec51 0b17 	vmov	r0, r1, d7
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f50:	f7f9 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 8006f54:	4680      	mov	r8, r0
 8006f56:	b158      	cbz	r0, 8006f70 <_dtoa_r+0xe8>
 8006f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8551 	beq.w	8007a08 <_dtoa_r+0xb80>
 8006f66:	488b      	ldr	r0, [pc, #556]	; (8007194 <_dtoa_r+0x30c>)
 8006f68:	6018      	str	r0, [r3, #0]
 8006f6a:	1e43      	subs	r3, r0, #1
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	e7dd      	b.n	8006f2c <_dtoa_r+0xa4>
 8006f70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f74:	aa12      	add	r2, sp, #72	; 0x48
 8006f76:	a913      	add	r1, sp, #76	; 0x4c
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 facd 	bl	8008518 <__d2b>
 8006f7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f82:	4683      	mov	fp, r0
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	d07c      	beq.n	8007082 <_dtoa_r+0x1fa>
 8006f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fa2:	4b7d      	ldr	r3, [pc, #500]	; (8007198 <_dtoa_r+0x310>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 f98d 	bl	80002c8 <__aeabi_dsub>
 8006fae:	a36e      	add	r3, pc, #440	; (adr r3, 8007168 <_dtoa_r+0x2e0>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 fb40 	bl	8000638 <__aeabi_dmul>
 8006fb8:	a36d      	add	r3, pc, #436	; (adr r3, 8007170 <_dtoa_r+0x2e8>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 f985 	bl	80002cc <__adddf3>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	460f      	mov	r7, r1
 8006fc8:	f7f9 facc 	bl	8000564 <__aeabi_i2d>
 8006fcc:	a36a      	add	r3, pc, #424	; (adr r3, 8007178 <_dtoa_r+0x2f0>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 fb31 	bl	8000638 <__aeabi_dmul>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 f975 	bl	80002cc <__adddf3>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	f7f9 fdd7 	bl	8000b98 <__aeabi_d2iz>
 8006fea:	2200      	movs	r2, #0
 8006fec:	4682      	mov	sl, r0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fd92 	bl	8000b1c <__aeabi_dcmplt>
 8006ff8:	b148      	cbz	r0, 800700e <_dtoa_r+0x186>
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7f9 fab2 	bl	8000564 <__aeabi_i2d>
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	f7f9 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 8007008:	b908      	cbnz	r0, 800700e <_dtoa_r+0x186>
 800700a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800700e:	f1ba 0f16 	cmp.w	sl, #22
 8007012:	d854      	bhi.n	80070be <_dtoa_r+0x236>
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <_dtoa_r+0x314>)
 8007016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007022:	f7f9 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d04b      	beq.n	80070c2 <_dtoa_r+0x23a>
 800702a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800702e:	2300      	movs	r3, #0
 8007030:	930e      	str	r3, [sp, #56]	; 0x38
 8007032:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007034:	1b5d      	subs	r5, r3, r5
 8007036:	1e6b      	subs	r3, r5, #1
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	bf43      	ittte	mi
 800703c:	2300      	movmi	r3, #0
 800703e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007042:	9304      	strmi	r3, [sp, #16]
 8007044:	f04f 0800 	movpl.w	r8, #0
 8007048:	f1ba 0f00 	cmp.w	sl, #0
 800704c:	db3b      	blt.n	80070c6 <_dtoa_r+0x23e>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007054:	4453      	add	r3, sl
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	9306      	str	r3, [sp, #24]
 800705c:	9b05      	ldr	r3, [sp, #20]
 800705e:	2b09      	cmp	r3, #9
 8007060:	d869      	bhi.n	8007136 <_dtoa_r+0x2ae>
 8007062:	2b05      	cmp	r3, #5
 8007064:	bfc4      	itt	gt
 8007066:	3b04      	subgt	r3, #4
 8007068:	9305      	strgt	r3, [sp, #20]
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	f1a3 0302 	sub.w	r3, r3, #2
 8007070:	bfcc      	ite	gt
 8007072:	2500      	movgt	r5, #0
 8007074:	2501      	movle	r5, #1
 8007076:	2b03      	cmp	r3, #3
 8007078:	d869      	bhi.n	800714e <_dtoa_r+0x2c6>
 800707a:	e8df f003 	tbb	[pc, r3]
 800707e:	4e2c      	.short	0x4e2c
 8007080:	5a4c      	.short	0x5a4c
 8007082:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007086:	441d      	add	r5, r3
 8007088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800708c:	2b20      	cmp	r3, #32
 800708e:	bfc1      	itttt	gt
 8007090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007094:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007098:	fa09 f303 	lslgt.w	r3, r9, r3
 800709c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070a0:	bfda      	itte	le
 80070a2:	f1c3 0320 	rsble	r3, r3, #32
 80070a6:	fa06 f003 	lslle.w	r0, r6, r3
 80070aa:	4318      	orrgt	r0, r3
 80070ac:	f7f9 fa4a 	bl	8000544 <__aeabi_ui2d>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4606      	mov	r6, r0
 80070b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070b8:	3d01      	subs	r5, #1
 80070ba:	9310      	str	r3, [sp, #64]	; 0x40
 80070bc:	e771      	b.n	8006fa2 <_dtoa_r+0x11a>
 80070be:	2301      	movs	r3, #1
 80070c0:	e7b6      	b.n	8007030 <_dtoa_r+0x1a8>
 80070c2:	900e      	str	r0, [sp, #56]	; 0x38
 80070c4:	e7b5      	b.n	8007032 <_dtoa_r+0x1aa>
 80070c6:	f1ca 0300 	rsb	r3, sl, #0
 80070ca:	9306      	str	r3, [sp, #24]
 80070cc:	2300      	movs	r3, #0
 80070ce:	eba8 080a 	sub.w	r8, r8, sl
 80070d2:	930d      	str	r3, [sp, #52]	; 0x34
 80070d4:	e7c2      	b.n	800705c <_dtoa_r+0x1d4>
 80070d6:	2300      	movs	r3, #0
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc39      	bgt.n	8007154 <_dtoa_r+0x2cc>
 80070e0:	f04f 0901 	mov.w	r9, #1
 80070e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80070e8:	464b      	mov	r3, r9
 80070ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070f0:	2200      	movs	r2, #0
 80070f2:	6042      	str	r2, [r0, #4]
 80070f4:	2204      	movs	r2, #4
 80070f6:	f102 0614 	add.w	r6, r2, #20
 80070fa:	429e      	cmp	r6, r3
 80070fc:	6841      	ldr	r1, [r0, #4]
 80070fe:	d92f      	bls.n	8007160 <_dtoa_r+0x2d8>
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fee7 	bl	8007ed4 <_Balloc>
 8007106:	9000      	str	r0, [sp, #0]
 8007108:	2800      	cmp	r0, #0
 800710a:	d14b      	bne.n	80071a4 <_dtoa_r+0x31c>
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <_dtoa_r+0x318>)
 800710e:	4602      	mov	r2, r0
 8007110:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007114:	e6d1      	b.n	8006eba <_dtoa_r+0x32>
 8007116:	2301      	movs	r3, #1
 8007118:	e7de      	b.n	80070d8 <_dtoa_r+0x250>
 800711a:	2300      	movs	r3, #0
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007120:	eb0a 0903 	add.w	r9, sl, r3
 8007124:	f109 0301 	add.w	r3, r9, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	bfb8      	it	lt
 800712e:	2301      	movlt	r3, #1
 8007130:	e7dd      	b.n	80070ee <_dtoa_r+0x266>
 8007132:	2301      	movs	r3, #1
 8007134:	e7f2      	b.n	800711c <_dtoa_r+0x294>
 8007136:	2501      	movs	r5, #1
 8007138:	2300      	movs	r3, #0
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	9508      	str	r5, [sp, #32]
 800713e:	f04f 39ff 	mov.w	r9, #4294967295
 8007142:	2200      	movs	r2, #0
 8007144:	f8cd 9004 	str.w	r9, [sp, #4]
 8007148:	2312      	movs	r3, #18
 800714a:	9209      	str	r2, [sp, #36]	; 0x24
 800714c:	e7cf      	b.n	80070ee <_dtoa_r+0x266>
 800714e:	2301      	movs	r3, #1
 8007150:	9308      	str	r3, [sp, #32]
 8007152:	e7f4      	b.n	800713e <_dtoa_r+0x2b6>
 8007154:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007158:	f8cd 9004 	str.w	r9, [sp, #4]
 800715c:	464b      	mov	r3, r9
 800715e:	e7c6      	b.n	80070ee <_dtoa_r+0x266>
 8007160:	3101      	adds	r1, #1
 8007162:	6041      	str	r1, [r0, #4]
 8007164:	0052      	lsls	r2, r2, #1
 8007166:	e7c6      	b.n	80070f6 <_dtoa_r+0x26e>
 8007168:	636f4361 	.word	0x636f4361
 800716c:	3fd287a7 	.word	0x3fd287a7
 8007170:	8b60c8b3 	.word	0x8b60c8b3
 8007174:	3fc68a28 	.word	0x3fc68a28
 8007178:	509f79fb 	.word	0x509f79fb
 800717c:	3fd34413 	.word	0x3fd34413
 8007180:	080091ad 	.word	0x080091ad
 8007184:	080091c4 	.word	0x080091c4
 8007188:	7ff00000 	.word	0x7ff00000
 800718c:	080091a9 	.word	0x080091a9
 8007190:	080091a0 	.word	0x080091a0
 8007194:	0800917d 	.word	0x0800917d
 8007198:	3ff80000 	.word	0x3ff80000
 800719c:	08009320 	.word	0x08009320
 80071a0:	08009223 	.word	0x08009223
 80071a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a6:	9a00      	ldr	r2, [sp, #0]
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	9b01      	ldr	r3, [sp, #4]
 80071ac:	2b0e      	cmp	r3, #14
 80071ae:	f200 80ad 	bhi.w	800730c <_dtoa_r+0x484>
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	f000 80aa 	beq.w	800730c <_dtoa_r+0x484>
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	dd36      	ble.n	800722c <_dtoa_r+0x3a4>
 80071be:	4ac3      	ldr	r2, [pc, #780]	; (80074cc <_dtoa_r+0x644>)
 80071c0:	f00a 030f 	and.w	r3, sl, #15
 80071c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071c8:	ed93 7b00 	vldr	d7, [r3]
 80071cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071d4:	eeb0 8a47 	vmov.f32	s16, s14
 80071d8:	eef0 8a67 	vmov.f32	s17, s15
 80071dc:	d016      	beq.n	800720c <_dtoa_r+0x384>
 80071de:	4bbc      	ldr	r3, [pc, #752]	; (80074d0 <_dtoa_r+0x648>)
 80071e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071e8:	f7f9 fb50 	bl	800088c <__aeabi_ddiv>
 80071ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f0:	f007 070f 	and.w	r7, r7, #15
 80071f4:	2503      	movs	r5, #3
 80071f6:	4eb6      	ldr	r6, [pc, #728]	; (80074d0 <_dtoa_r+0x648>)
 80071f8:	b957      	cbnz	r7, 8007210 <_dtoa_r+0x388>
 80071fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fe:	ec53 2b18 	vmov	r2, r3, d8
 8007202:	f7f9 fb43 	bl	800088c <__aeabi_ddiv>
 8007206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800720a:	e029      	b.n	8007260 <_dtoa_r+0x3d8>
 800720c:	2502      	movs	r5, #2
 800720e:	e7f2      	b.n	80071f6 <_dtoa_r+0x36e>
 8007210:	07f9      	lsls	r1, r7, #31
 8007212:	d508      	bpl.n	8007226 <_dtoa_r+0x39e>
 8007214:	ec51 0b18 	vmov	r0, r1, d8
 8007218:	e9d6 2300 	ldrd	r2, r3, [r6]
 800721c:	f7f9 fa0c 	bl	8000638 <__aeabi_dmul>
 8007220:	ec41 0b18 	vmov	d8, r0, r1
 8007224:	3501      	adds	r5, #1
 8007226:	107f      	asrs	r7, r7, #1
 8007228:	3608      	adds	r6, #8
 800722a:	e7e5      	b.n	80071f8 <_dtoa_r+0x370>
 800722c:	f000 80a6 	beq.w	800737c <_dtoa_r+0x4f4>
 8007230:	f1ca 0600 	rsb	r6, sl, #0
 8007234:	4ba5      	ldr	r3, [pc, #660]	; (80074cc <_dtoa_r+0x644>)
 8007236:	4fa6      	ldr	r7, [pc, #664]	; (80074d0 <_dtoa_r+0x648>)
 8007238:	f006 020f 	and.w	r2, r6, #15
 800723c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007248:	f7f9 f9f6 	bl	8000638 <__aeabi_dmul>
 800724c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007250:	1136      	asrs	r6, r6, #4
 8007252:	2300      	movs	r3, #0
 8007254:	2502      	movs	r5, #2
 8007256:	2e00      	cmp	r6, #0
 8007258:	f040 8085 	bne.w	8007366 <_dtoa_r+0x4de>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1d2      	bne.n	8007206 <_dtoa_r+0x37e>
 8007260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 808c 	beq.w	8007380 <_dtoa_r+0x4f8>
 8007268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800726c:	4b99      	ldr	r3, [pc, #612]	; (80074d4 <_dtoa_r+0x64c>)
 800726e:	2200      	movs	r2, #0
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f9 fc52 	bl	8000b1c <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 8081 	beq.w	8007380 <_dtoa_r+0x4f8>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d07d      	beq.n	8007380 <_dtoa_r+0x4f8>
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	dd3c      	ble.n	8007304 <_dtoa_r+0x47c>
 800728a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800728e:	9307      	str	r3, [sp, #28]
 8007290:	2200      	movs	r2, #0
 8007292:	4b91      	ldr	r3, [pc, #580]	; (80074d8 <_dtoa_r+0x650>)
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 f9ce 	bl	8000638 <__aeabi_dmul>
 800729c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a0:	3501      	adds	r5, #1
 80072a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80072a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7f9 f95a 	bl	8000564 <__aeabi_i2d>
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	f7f9 f9c0 	bl	8000638 <__aeabi_dmul>
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <_dtoa_r+0x654>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	f7f9 f806 	bl	80002cc <__adddf3>
 80072c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d15c      	bne.n	800738a <_dtoa_r+0x502>
 80072d0:	4b83      	ldr	r3, [pc, #524]	; (80074e0 <_dtoa_r+0x658>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f8 fff6 	bl	80002c8 <__aeabi_dsub>
 80072dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	f7f9 fc38 	bl	8000b58 <__aeabi_dcmpgt>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f040 8296 	bne.w	800781a <_dtoa_r+0x992>
 80072ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072f2:	4630      	mov	r0, r6
 80072f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 8288 	bne.w	8007814 <_dtoa_r+0x98c>
 8007304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800730c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800730e:	2b00      	cmp	r3, #0
 8007310:	f2c0 8158 	blt.w	80075c4 <_dtoa_r+0x73c>
 8007314:	f1ba 0f0e 	cmp.w	sl, #14
 8007318:	f300 8154 	bgt.w	80075c4 <_dtoa_r+0x73c>
 800731c:	4b6b      	ldr	r3, [pc, #428]	; (80074cc <_dtoa_r+0x644>)
 800731e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007322:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	f280 80e3 	bge.w	80074f4 <_dtoa_r+0x66c>
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f300 80df 	bgt.w	80074f4 <_dtoa_r+0x66c>
 8007336:	f040 826d 	bne.w	8007814 <_dtoa_r+0x98c>
 800733a:	4b69      	ldr	r3, [pc, #420]	; (80074e0 <_dtoa_r+0x658>)
 800733c:	2200      	movs	r2, #0
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 f979 	bl	8000638 <__aeabi_dmul>
 8007346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800734a:	f7f9 fbfb 	bl	8000b44 <__aeabi_dcmpge>
 800734e:	9e01      	ldr	r6, [sp, #4]
 8007350:	4637      	mov	r7, r6
 8007352:	2800      	cmp	r0, #0
 8007354:	f040 8243 	bne.w	80077de <_dtoa_r+0x956>
 8007358:	9d00      	ldr	r5, [sp, #0]
 800735a:	2331      	movs	r3, #49	; 0x31
 800735c:	f805 3b01 	strb.w	r3, [r5], #1
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	e23f      	b.n	80077e6 <_dtoa_r+0x95e>
 8007366:	07f2      	lsls	r2, r6, #31
 8007368:	d505      	bpl.n	8007376 <_dtoa_r+0x4ee>
 800736a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736e:	f7f9 f963 	bl	8000638 <__aeabi_dmul>
 8007372:	3501      	adds	r5, #1
 8007374:	2301      	movs	r3, #1
 8007376:	1076      	asrs	r6, r6, #1
 8007378:	3708      	adds	r7, #8
 800737a:	e76c      	b.n	8007256 <_dtoa_r+0x3ce>
 800737c:	2502      	movs	r5, #2
 800737e:	e76f      	b.n	8007260 <_dtoa_r+0x3d8>
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	f8cd a01c 	str.w	sl, [sp, #28]
 8007386:	930c      	str	r3, [sp, #48]	; 0x30
 8007388:	e78d      	b.n	80072a6 <_dtoa_r+0x41e>
 800738a:	9900      	ldr	r1, [sp, #0]
 800738c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800738e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007390:	4b4e      	ldr	r3, [pc, #312]	; (80074cc <_dtoa_r+0x644>)
 8007392:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007396:	4401      	add	r1, r0
 8007398:	9102      	str	r1, [sp, #8]
 800739a:	9908      	ldr	r1, [sp, #32]
 800739c:	eeb0 8a47 	vmov.f32	s16, s14
 80073a0:	eef0 8a67 	vmov.f32	s17, s15
 80073a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d045      	beq.n	800743c <_dtoa_r+0x5b4>
 80073b0:	494c      	ldr	r1, [pc, #304]	; (80074e4 <_dtoa_r+0x65c>)
 80073b2:	2000      	movs	r0, #0
 80073b4:	f7f9 fa6a 	bl	800088c <__aeabi_ddiv>
 80073b8:	ec53 2b18 	vmov	r2, r3, d8
 80073bc:	f7f8 ff84 	bl	80002c8 <__aeabi_dsub>
 80073c0:	9d00      	ldr	r5, [sp, #0]
 80073c2:	ec41 0b18 	vmov	d8, r0, r1
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7f9 fbe5 	bl	8000b98 <__aeabi_d2iz>
 80073ce:	900c      	str	r0, [sp, #48]	; 0x30
 80073d0:	f7f9 f8c8 	bl	8000564 <__aeabi_i2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ff74 	bl	80002c8 <__aeabi_dsub>
 80073e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e2:	3330      	adds	r3, #48	; 0x30
 80073e4:	f805 3b01 	strb.w	r3, [r5], #1
 80073e8:	ec53 2b18 	vmov	r2, r3, d8
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	f7f9 fb94 	bl	8000b1c <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d165      	bne.n	80074c4 <_dtoa_r+0x63c>
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	4935      	ldr	r1, [pc, #212]	; (80074d4 <_dtoa_r+0x64c>)
 80073fe:	2000      	movs	r0, #0
 8007400:	f7f8 ff62 	bl	80002c8 <__aeabi_dsub>
 8007404:	ec53 2b18 	vmov	r2, r3, d8
 8007408:	f7f9 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 80b9 	bne.w	8007584 <_dtoa_r+0x6fc>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	429d      	cmp	r5, r3
 8007416:	f43f af75 	beq.w	8007304 <_dtoa_r+0x47c>
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <_dtoa_r+0x650>)
 800741c:	ec51 0b18 	vmov	r0, r1, d8
 8007420:	2200      	movs	r2, #0
 8007422:	f7f9 f909 	bl	8000638 <__aeabi_dmul>
 8007426:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <_dtoa_r+0x650>)
 8007428:	ec41 0b18 	vmov	d8, r0, r1
 800742c:	2200      	movs	r2, #0
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f9 f901 	bl	8000638 <__aeabi_dmul>
 8007436:	4606      	mov	r6, r0
 8007438:	460f      	mov	r7, r1
 800743a:	e7c4      	b.n	80073c6 <_dtoa_r+0x53e>
 800743c:	ec51 0b17 	vmov	r0, r1, d7
 8007440:	f7f9 f8fa 	bl	8000638 <__aeabi_dmul>
 8007444:	9b02      	ldr	r3, [sp, #8]
 8007446:	9d00      	ldr	r5, [sp, #0]
 8007448:	930c      	str	r3, [sp, #48]	; 0x30
 800744a:	ec41 0b18 	vmov	d8, r0, r1
 800744e:	4639      	mov	r1, r7
 8007450:	4630      	mov	r0, r6
 8007452:	f7f9 fba1 	bl	8000b98 <__aeabi_d2iz>
 8007456:	9011      	str	r0, [sp, #68]	; 0x44
 8007458:	f7f9 f884 	bl	8000564 <__aeabi_i2d>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f8 ff30 	bl	80002c8 <__aeabi_dsub>
 8007468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746a:	3330      	adds	r3, #48	; 0x30
 800746c:	f805 3b01 	strb.w	r3, [r5], #1
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	429d      	cmp	r5, r3
 8007474:	4606      	mov	r6, r0
 8007476:	460f      	mov	r7, r1
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	d134      	bne.n	80074e8 <_dtoa_r+0x660>
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <_dtoa_r+0x65c>)
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f8 ff22 	bl	80002cc <__adddf3>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4630      	mov	r0, r6
 800748e:	4639      	mov	r1, r7
 8007490:	f7f9 fb62 	bl	8000b58 <__aeabi_dcmpgt>
 8007494:	2800      	cmp	r0, #0
 8007496:	d175      	bne.n	8007584 <_dtoa_r+0x6fc>
 8007498:	ec53 2b18 	vmov	r2, r3, d8
 800749c:	4911      	ldr	r1, [pc, #68]	; (80074e4 <_dtoa_r+0x65c>)
 800749e:	2000      	movs	r0, #0
 80074a0:	f7f8 ff12 	bl	80002c8 <__aeabi_dsub>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f43f af27 	beq.w	8007304 <_dtoa_r+0x47c>
 80074b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b8:	1e6b      	subs	r3, r5, #1
 80074ba:	930c      	str	r3, [sp, #48]	; 0x30
 80074bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074c0:	2b30      	cmp	r3, #48	; 0x30
 80074c2:	d0f8      	beq.n	80074b6 <_dtoa_r+0x62e>
 80074c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074c8:	e04a      	b.n	8007560 <_dtoa_r+0x6d8>
 80074ca:	bf00      	nop
 80074cc:	08009320 	.word	0x08009320
 80074d0:	080092f8 	.word	0x080092f8
 80074d4:	3ff00000 	.word	0x3ff00000
 80074d8:	40240000 	.word	0x40240000
 80074dc:	401c0000 	.word	0x401c0000
 80074e0:	40140000 	.word	0x40140000
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	4baf      	ldr	r3, [pc, #700]	; (80077a8 <_dtoa_r+0x920>)
 80074ea:	f7f9 f8a5 	bl	8000638 <__aeabi_dmul>
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	e7ac      	b.n	800744e <_dtoa_r+0x5c6>
 80074f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074f8:	9d00      	ldr	r5, [sp, #0]
 80074fa:	4642      	mov	r2, r8
 80074fc:	464b      	mov	r3, r9
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 f9c3 	bl	800088c <__aeabi_ddiv>
 8007506:	f7f9 fb47 	bl	8000b98 <__aeabi_d2iz>
 800750a:	9002      	str	r0, [sp, #8]
 800750c:	f7f9 f82a 	bl	8000564 <__aeabi_i2d>
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	f7f9 f890 	bl	8000638 <__aeabi_dmul>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f8 fed2 	bl	80002c8 <__aeabi_dsub>
 8007524:	9e02      	ldr	r6, [sp, #8]
 8007526:	9f01      	ldr	r7, [sp, #4]
 8007528:	3630      	adds	r6, #48	; 0x30
 800752a:	f805 6b01 	strb.w	r6, [r5], #1
 800752e:	9e00      	ldr	r6, [sp, #0]
 8007530:	1bae      	subs	r6, r5, r6
 8007532:	42b7      	cmp	r7, r6
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	d137      	bne.n	80075aa <_dtoa_r+0x722>
 800753a:	f7f8 fec7 	bl	80002cc <__adddf3>
 800753e:	4642      	mov	r2, r8
 8007540:	464b      	mov	r3, r9
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	f7f9 fb07 	bl	8000b58 <__aeabi_dcmpgt>
 800754a:	b9c8      	cbnz	r0, 8007580 <_dtoa_r+0x6f8>
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f9 fad8 	bl	8000b08 <__aeabi_dcmpeq>
 8007558:	b110      	cbz	r0, 8007560 <_dtoa_r+0x6d8>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	07d9      	lsls	r1, r3, #31
 800755e:	d40f      	bmi.n	8007580 <_dtoa_r+0x6f8>
 8007560:	4620      	mov	r0, r4
 8007562:	4659      	mov	r1, fp
 8007564:	f000 fcf6 	bl	8007f54 <_Bfree>
 8007568:	2300      	movs	r3, #0
 800756a:	702b      	strb	r3, [r5, #0]
 800756c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800756e:	f10a 0001 	add.w	r0, sl, #1
 8007572:	6018      	str	r0, [r3, #0]
 8007574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007576:	2b00      	cmp	r3, #0
 8007578:	f43f acd8 	beq.w	8006f2c <_dtoa_r+0xa4>
 800757c:	601d      	str	r5, [r3, #0]
 800757e:	e4d5      	b.n	8006f2c <_dtoa_r+0xa4>
 8007580:	f8cd a01c 	str.w	sl, [sp, #28]
 8007584:	462b      	mov	r3, r5
 8007586:	461d      	mov	r5, r3
 8007588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800758c:	2a39      	cmp	r2, #57	; 0x39
 800758e:	d108      	bne.n	80075a2 <_dtoa_r+0x71a>
 8007590:	9a00      	ldr	r2, [sp, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d1f7      	bne.n	8007586 <_dtoa_r+0x6fe>
 8007596:	9a07      	ldr	r2, [sp, #28]
 8007598:	9900      	ldr	r1, [sp, #0]
 800759a:	3201      	adds	r2, #1
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	2230      	movs	r2, #48	; 0x30
 80075a0:	700a      	strb	r2, [r1, #0]
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	3201      	adds	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e78c      	b.n	80074c4 <_dtoa_r+0x63c>
 80075aa:	4b7f      	ldr	r3, [pc, #508]	; (80077a8 <_dtoa_r+0x920>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	f7f9 f843 	bl	8000638 <__aeabi_dmul>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	4606      	mov	r6, r0
 80075b8:	460f      	mov	r7, r1
 80075ba:	f7f9 faa5 	bl	8000b08 <__aeabi_dcmpeq>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d09b      	beq.n	80074fa <_dtoa_r+0x672>
 80075c2:	e7cd      	b.n	8007560 <_dtoa_r+0x6d8>
 80075c4:	9a08      	ldr	r2, [sp, #32]
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	f000 80c4 	beq.w	8007754 <_dtoa_r+0x8cc>
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	2a01      	cmp	r2, #1
 80075d0:	f300 80a8 	bgt.w	8007724 <_dtoa_r+0x89c>
 80075d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	f000 80a0 	beq.w	800771c <_dtoa_r+0x894>
 80075dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075e0:	9e06      	ldr	r6, [sp, #24]
 80075e2:	4645      	mov	r5, r8
 80075e4:	9a04      	ldr	r2, [sp, #16]
 80075e6:	2101      	movs	r1, #1
 80075e8:	441a      	add	r2, r3
 80075ea:	4620      	mov	r0, r4
 80075ec:	4498      	add	r8, r3
 80075ee:	9204      	str	r2, [sp, #16]
 80075f0:	f000 fd6c 	bl	80080cc <__i2b>
 80075f4:	4607      	mov	r7, r0
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	dd0b      	ble.n	8007612 <_dtoa_r+0x78a>
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd08      	ble.n	8007612 <_dtoa_r+0x78a>
 8007600:	42ab      	cmp	r3, r5
 8007602:	9a04      	ldr	r2, [sp, #16]
 8007604:	bfa8      	it	ge
 8007606:	462b      	movge	r3, r5
 8007608:	eba8 0803 	sub.w	r8, r8, r3
 800760c:	1aed      	subs	r5, r5, r3
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	9b06      	ldr	r3, [sp, #24]
 8007614:	b1fb      	cbz	r3, 8007656 <_dtoa_r+0x7ce>
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 809f 	beq.w	800775c <_dtoa_r+0x8d4>
 800761e:	2e00      	cmp	r6, #0
 8007620:	dd11      	ble.n	8007646 <_dtoa_r+0x7be>
 8007622:	4639      	mov	r1, r7
 8007624:	4632      	mov	r2, r6
 8007626:	4620      	mov	r0, r4
 8007628:	f000 fe0c 	bl	8008244 <__pow5mult>
 800762c:	465a      	mov	r2, fp
 800762e:	4601      	mov	r1, r0
 8007630:	4607      	mov	r7, r0
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fd60 	bl	80080f8 <__multiply>
 8007638:	4659      	mov	r1, fp
 800763a:	9007      	str	r0, [sp, #28]
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fc89 	bl	8007f54 <_Bfree>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	469b      	mov	fp, r3
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	1b9a      	subs	r2, r3, r6
 800764a:	d004      	beq.n	8007656 <_dtoa_r+0x7ce>
 800764c:	4659      	mov	r1, fp
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fdf8 	bl	8008244 <__pow5mult>
 8007654:	4683      	mov	fp, r0
 8007656:	2101      	movs	r1, #1
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fd37 	bl	80080cc <__i2b>
 800765e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007660:	2b00      	cmp	r3, #0
 8007662:	4606      	mov	r6, r0
 8007664:	dd7c      	ble.n	8007760 <_dtoa_r+0x8d8>
 8007666:	461a      	mov	r2, r3
 8007668:	4601      	mov	r1, r0
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fdea 	bl	8008244 <__pow5mult>
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	2b01      	cmp	r3, #1
 8007674:	4606      	mov	r6, r0
 8007676:	dd76      	ble.n	8007766 <_dtoa_r+0x8de>
 8007678:	2300      	movs	r3, #0
 800767a:	9306      	str	r3, [sp, #24]
 800767c:	6933      	ldr	r3, [r6, #16]
 800767e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007682:	6918      	ldr	r0, [r3, #16]
 8007684:	f000 fcd2 	bl	800802c <__hi0bits>
 8007688:	f1c0 0020 	rsb	r0, r0, #32
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	4418      	add	r0, r3
 8007690:	f010 001f 	ands.w	r0, r0, #31
 8007694:	f000 8086 	beq.w	80077a4 <_dtoa_r+0x91c>
 8007698:	f1c0 0320 	rsb	r3, r0, #32
 800769c:	2b04      	cmp	r3, #4
 800769e:	dd7f      	ble.n	80077a0 <_dtoa_r+0x918>
 80076a0:	f1c0 001c 	rsb	r0, r0, #28
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	4403      	add	r3, r0
 80076a8:	4480      	add	r8, r0
 80076aa:	4405      	add	r5, r0
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	dd05      	ble.n	80076c0 <_dtoa_r+0x838>
 80076b4:	4659      	mov	r1, fp
 80076b6:	4642      	mov	r2, r8
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 fe1d 	bl	80082f8 <__lshift>
 80076be:	4683      	mov	fp, r0
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd05      	ble.n	80076d2 <_dtoa_r+0x84a>
 80076c6:	4631      	mov	r1, r6
 80076c8:	461a      	mov	r2, r3
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fe14 	bl	80082f8 <__lshift>
 80076d0:	4606      	mov	r6, r0
 80076d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d069      	beq.n	80077ac <_dtoa_r+0x924>
 80076d8:	4631      	mov	r1, r6
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fe78 	bl	80083d0 <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	da63      	bge.n	80077ac <_dtoa_r+0x924>
 80076e4:	2300      	movs	r3, #0
 80076e6:	4659      	mov	r1, fp
 80076e8:	220a      	movs	r2, #10
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fc54 	bl	8007f98 <__multadd>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076f6:	4683      	mov	fp, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 818f 	beq.w	8007a1c <_dtoa_r+0xb94>
 80076fe:	4639      	mov	r1, r7
 8007700:	2300      	movs	r3, #0
 8007702:	220a      	movs	r2, #10
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fc47 	bl	8007f98 <__multadd>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	4607      	mov	r7, r0
 8007710:	f300 808e 	bgt.w	8007830 <_dtoa_r+0x9a8>
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	2b02      	cmp	r3, #2
 8007718:	dc50      	bgt.n	80077bc <_dtoa_r+0x934>
 800771a:	e089      	b.n	8007830 <_dtoa_r+0x9a8>
 800771c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007722:	e75d      	b.n	80075e0 <_dtoa_r+0x758>
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	1e5e      	subs	r6, r3, #1
 8007728:	9b06      	ldr	r3, [sp, #24]
 800772a:	42b3      	cmp	r3, r6
 800772c:	bfbf      	itttt	lt
 800772e:	9b06      	ldrlt	r3, [sp, #24]
 8007730:	9606      	strlt	r6, [sp, #24]
 8007732:	1af2      	sublt	r2, r6, r3
 8007734:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007736:	bfb6      	itet	lt
 8007738:	189b      	addlt	r3, r3, r2
 800773a:	1b9e      	subge	r6, r3, r6
 800773c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	bfb8      	it	lt
 8007742:	2600      	movlt	r6, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfb5      	itete	lt
 8007748:	eba8 0503 	sublt.w	r5, r8, r3
 800774c:	9b01      	ldrge	r3, [sp, #4]
 800774e:	2300      	movlt	r3, #0
 8007750:	4645      	movge	r5, r8
 8007752:	e747      	b.n	80075e4 <_dtoa_r+0x75c>
 8007754:	9e06      	ldr	r6, [sp, #24]
 8007756:	9f08      	ldr	r7, [sp, #32]
 8007758:	4645      	mov	r5, r8
 800775a:	e74c      	b.n	80075f6 <_dtoa_r+0x76e>
 800775c:	9a06      	ldr	r2, [sp, #24]
 800775e:	e775      	b.n	800764c <_dtoa_r+0x7c4>
 8007760:	9b05      	ldr	r3, [sp, #20]
 8007762:	2b01      	cmp	r3, #1
 8007764:	dc18      	bgt.n	8007798 <_dtoa_r+0x910>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	b9b3      	cbnz	r3, 8007798 <_dtoa_r+0x910>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007770:	b9a3      	cbnz	r3, 800779c <_dtoa_r+0x914>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007778:	0d1b      	lsrs	r3, r3, #20
 800777a:	051b      	lsls	r3, r3, #20
 800777c:	b12b      	cbz	r3, 800778a <_dtoa_r+0x902>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	3301      	adds	r3, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	f108 0801 	add.w	r8, r8, #1
 8007788:	2301      	movs	r3, #1
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778e:	2b00      	cmp	r3, #0
 8007790:	f47f af74 	bne.w	800767c <_dtoa_r+0x7f4>
 8007794:	2001      	movs	r0, #1
 8007796:	e779      	b.n	800768c <_dtoa_r+0x804>
 8007798:	2300      	movs	r3, #0
 800779a:	e7f6      	b.n	800778a <_dtoa_r+0x902>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	e7f4      	b.n	800778a <_dtoa_r+0x902>
 80077a0:	d085      	beq.n	80076ae <_dtoa_r+0x826>
 80077a2:	4618      	mov	r0, r3
 80077a4:	301c      	adds	r0, #28
 80077a6:	e77d      	b.n	80076a4 <_dtoa_r+0x81c>
 80077a8:	40240000 	.word	0x40240000
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc38      	bgt.n	8007824 <_dtoa_r+0x99c>
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dd35      	ble.n	8007824 <_dtoa_r+0x99c>
 80077b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077bc:	f1b9 0f00 	cmp.w	r9, #0
 80077c0:	d10d      	bne.n	80077de <_dtoa_r+0x956>
 80077c2:	4631      	mov	r1, r6
 80077c4:	464b      	mov	r3, r9
 80077c6:	2205      	movs	r2, #5
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fbe5 	bl	8007f98 <__multadd>
 80077ce:	4601      	mov	r1, r0
 80077d0:	4606      	mov	r6, r0
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fdfc 	bl	80083d0 <__mcmp>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f73f adbd 	bgt.w	8007358 <_dtoa_r+0x4d0>
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	9d00      	ldr	r5, [sp, #0]
 80077e2:	ea6f 0a03 	mvn.w	sl, r3
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	4631      	mov	r1, r6
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fbb1 	bl	8007f54 <_Bfree>
 80077f2:	2f00      	cmp	r7, #0
 80077f4:	f43f aeb4 	beq.w	8007560 <_dtoa_r+0x6d8>
 80077f8:	f1b8 0f00 	cmp.w	r8, #0
 80077fc:	d005      	beq.n	800780a <_dtoa_r+0x982>
 80077fe:	45b8      	cmp	r8, r7
 8007800:	d003      	beq.n	800780a <_dtoa_r+0x982>
 8007802:	4641      	mov	r1, r8
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fba5 	bl	8007f54 <_Bfree>
 800780a:	4639      	mov	r1, r7
 800780c:	4620      	mov	r0, r4
 800780e:	f000 fba1 	bl	8007f54 <_Bfree>
 8007812:	e6a5      	b.n	8007560 <_dtoa_r+0x6d8>
 8007814:	2600      	movs	r6, #0
 8007816:	4637      	mov	r7, r6
 8007818:	e7e1      	b.n	80077de <_dtoa_r+0x956>
 800781a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800781c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007820:	4637      	mov	r7, r6
 8007822:	e599      	b.n	8007358 <_dtoa_r+0x4d0>
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80fd 	beq.w	8007a2a <_dtoa_r+0xba2>
 8007830:	2d00      	cmp	r5, #0
 8007832:	dd05      	ble.n	8007840 <_dtoa_r+0x9b8>
 8007834:	4639      	mov	r1, r7
 8007836:	462a      	mov	r2, r5
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fd5d 	bl	80082f8 <__lshift>
 800783e:	4607      	mov	r7, r0
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d05c      	beq.n	8007900 <_dtoa_r+0xa78>
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fb43 	bl	8007ed4 <_Balloc>
 800784e:	4605      	mov	r5, r0
 8007850:	b928      	cbnz	r0, 800785e <_dtoa_r+0x9d6>
 8007852:	4b80      	ldr	r3, [pc, #512]	; (8007a54 <_dtoa_r+0xbcc>)
 8007854:	4602      	mov	r2, r0
 8007856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800785a:	f7ff bb2e 	b.w	8006eba <_dtoa_r+0x32>
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	f107 010c 	add.w	r1, r7, #12
 8007868:	300c      	adds	r0, #12
 800786a:	f000 fb25 	bl	8007eb8 <memcpy>
 800786e:	2201      	movs	r2, #1
 8007870:	4629      	mov	r1, r5
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fd40 	bl	80082f8 <__lshift>
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	444b      	add	r3, r9
 8007882:	9307      	str	r3, [sp, #28]
 8007884:	9b02      	ldr	r3, [sp, #8]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	46b8      	mov	r8, r7
 800788c:	9306      	str	r3, [sp, #24]
 800788e:	4607      	mov	r7, r0
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	4631      	mov	r1, r6
 8007894:	3b01      	subs	r3, #1
 8007896:	4658      	mov	r0, fp
 8007898:	9302      	str	r3, [sp, #8]
 800789a:	f7ff fa67 	bl	8006d6c <quorem>
 800789e:	4603      	mov	r3, r0
 80078a0:	3330      	adds	r3, #48	; 0x30
 80078a2:	9004      	str	r0, [sp, #16]
 80078a4:	4641      	mov	r1, r8
 80078a6:	4658      	mov	r0, fp
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	f000 fd91 	bl	80083d0 <__mcmp>
 80078ae:	463a      	mov	r2, r7
 80078b0:	4681      	mov	r9, r0
 80078b2:	4631      	mov	r1, r6
 80078b4:	4620      	mov	r0, r4
 80078b6:	f000 fda7 	bl	8008408 <__mdiff>
 80078ba:	68c2      	ldr	r2, [r0, #12]
 80078bc:	9b08      	ldr	r3, [sp, #32]
 80078be:	4605      	mov	r5, r0
 80078c0:	bb02      	cbnz	r2, 8007904 <_dtoa_r+0xa7c>
 80078c2:	4601      	mov	r1, r0
 80078c4:	4658      	mov	r0, fp
 80078c6:	f000 fd83 	bl	80083d0 <__mcmp>
 80078ca:	9b08      	ldr	r3, [sp, #32]
 80078cc:	4602      	mov	r2, r0
 80078ce:	4629      	mov	r1, r5
 80078d0:	4620      	mov	r0, r4
 80078d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078d6:	f000 fb3d 	bl	8007f54 <_Bfree>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078de:	9d01      	ldr	r5, [sp, #4]
 80078e0:	ea43 0102 	orr.w	r1, r3, r2
 80078e4:	9b06      	ldr	r3, [sp, #24]
 80078e6:	430b      	orrs	r3, r1
 80078e8:	9b08      	ldr	r3, [sp, #32]
 80078ea:	d10d      	bne.n	8007908 <_dtoa_r+0xa80>
 80078ec:	2b39      	cmp	r3, #57	; 0x39
 80078ee:	d029      	beq.n	8007944 <_dtoa_r+0xabc>
 80078f0:	f1b9 0f00 	cmp.w	r9, #0
 80078f4:	dd01      	ble.n	80078fa <_dtoa_r+0xa72>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	3331      	adds	r3, #49	; 0x31
 80078fa:	9a02      	ldr	r2, [sp, #8]
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	e774      	b.n	80077ea <_dtoa_r+0x962>
 8007900:	4638      	mov	r0, r7
 8007902:	e7b9      	b.n	8007878 <_dtoa_r+0x9f0>
 8007904:	2201      	movs	r2, #1
 8007906:	e7e2      	b.n	80078ce <_dtoa_r+0xa46>
 8007908:	f1b9 0f00 	cmp.w	r9, #0
 800790c:	db06      	blt.n	800791c <_dtoa_r+0xa94>
 800790e:	9905      	ldr	r1, [sp, #20]
 8007910:	ea41 0909 	orr.w	r9, r1, r9
 8007914:	9906      	ldr	r1, [sp, #24]
 8007916:	ea59 0101 	orrs.w	r1, r9, r1
 800791a:	d120      	bne.n	800795e <_dtoa_r+0xad6>
 800791c:	2a00      	cmp	r2, #0
 800791e:	ddec      	ble.n	80078fa <_dtoa_r+0xa72>
 8007920:	4659      	mov	r1, fp
 8007922:	2201      	movs	r2, #1
 8007924:	4620      	mov	r0, r4
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	f000 fce6 	bl	80082f8 <__lshift>
 800792c:	4631      	mov	r1, r6
 800792e:	4683      	mov	fp, r0
 8007930:	f000 fd4e 	bl	80083d0 <__mcmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	dc02      	bgt.n	8007940 <_dtoa_r+0xab8>
 800793a:	d1de      	bne.n	80078fa <_dtoa_r+0xa72>
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	d5dc      	bpl.n	80078fa <_dtoa_r+0xa72>
 8007940:	2b39      	cmp	r3, #57	; 0x39
 8007942:	d1d8      	bne.n	80078f6 <_dtoa_r+0xa6e>
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	2339      	movs	r3, #57	; 0x39
 8007948:	7013      	strb	r3, [r2, #0]
 800794a:	462b      	mov	r3, r5
 800794c:	461d      	mov	r5, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007954:	2a39      	cmp	r2, #57	; 0x39
 8007956:	d050      	beq.n	80079fa <_dtoa_r+0xb72>
 8007958:	3201      	adds	r2, #1
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e745      	b.n	80077ea <_dtoa_r+0x962>
 800795e:	2a00      	cmp	r2, #0
 8007960:	dd03      	ble.n	800796a <_dtoa_r+0xae2>
 8007962:	2b39      	cmp	r3, #57	; 0x39
 8007964:	d0ee      	beq.n	8007944 <_dtoa_r+0xabc>
 8007966:	3301      	adds	r3, #1
 8007968:	e7c7      	b.n	80078fa <_dtoa_r+0xa72>
 800796a:	9a01      	ldr	r2, [sp, #4]
 800796c:	9907      	ldr	r1, [sp, #28]
 800796e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007972:	428a      	cmp	r2, r1
 8007974:	d02a      	beq.n	80079cc <_dtoa_r+0xb44>
 8007976:	4659      	mov	r1, fp
 8007978:	2300      	movs	r3, #0
 800797a:	220a      	movs	r2, #10
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fb0b 	bl	8007f98 <__multadd>
 8007982:	45b8      	cmp	r8, r7
 8007984:	4683      	mov	fp, r0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	f04f 020a 	mov.w	r2, #10
 800798e:	4641      	mov	r1, r8
 8007990:	4620      	mov	r0, r4
 8007992:	d107      	bne.n	80079a4 <_dtoa_r+0xb1c>
 8007994:	f000 fb00 	bl	8007f98 <__multadd>
 8007998:	4680      	mov	r8, r0
 800799a:	4607      	mov	r7, r0
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	3301      	adds	r3, #1
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	e775      	b.n	8007890 <_dtoa_r+0xa08>
 80079a4:	f000 faf8 	bl	8007f98 <__multadd>
 80079a8:	4639      	mov	r1, r7
 80079aa:	4680      	mov	r8, r0
 80079ac:	2300      	movs	r3, #0
 80079ae:	220a      	movs	r2, #10
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 faf1 	bl	8007f98 <__multadd>
 80079b6:	4607      	mov	r7, r0
 80079b8:	e7f0      	b.n	800799c <_dtoa_r+0xb14>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	9a00      	ldr	r2, [sp, #0]
 80079c0:	bfcc      	ite	gt
 80079c2:	464d      	movgt	r5, r9
 80079c4:	2501      	movle	r5, #1
 80079c6:	4415      	add	r5, r2
 80079c8:	f04f 0800 	mov.w	r8, #0
 80079cc:	4659      	mov	r1, fp
 80079ce:	2201      	movs	r2, #1
 80079d0:	4620      	mov	r0, r4
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	f000 fc90 	bl	80082f8 <__lshift>
 80079d8:	4631      	mov	r1, r6
 80079da:	4683      	mov	fp, r0
 80079dc:	f000 fcf8 	bl	80083d0 <__mcmp>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	dcb2      	bgt.n	800794a <_dtoa_r+0xac2>
 80079e4:	d102      	bne.n	80079ec <_dtoa_r+0xb64>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	07db      	lsls	r3, r3, #31
 80079ea:	d4ae      	bmi.n	800794a <_dtoa_r+0xac2>
 80079ec:	462b      	mov	r3, r5
 80079ee:	461d      	mov	r5, r3
 80079f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079f4:	2a30      	cmp	r2, #48	; 0x30
 80079f6:	d0fa      	beq.n	80079ee <_dtoa_r+0xb66>
 80079f8:	e6f7      	b.n	80077ea <_dtoa_r+0x962>
 80079fa:	9a00      	ldr	r2, [sp, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d1a5      	bne.n	800794c <_dtoa_r+0xac4>
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	2331      	movs	r3, #49	; 0x31
 8007a06:	e779      	b.n	80078fc <_dtoa_r+0xa74>
 8007a08:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <_dtoa_r+0xbd0>)
 8007a0a:	f7ff baaf 	b.w	8006f6c <_dtoa_r+0xe4>
 8007a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f47f aa86 	bne.w	8006f22 <_dtoa_r+0x9a>
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <_dtoa_r+0xbd4>)
 8007a18:	f7ff baa8 	b.w	8006f6c <_dtoa_r+0xe4>
 8007a1c:	f1b9 0f00 	cmp.w	r9, #0
 8007a20:	dc03      	bgt.n	8007a2a <_dtoa_r+0xba2>
 8007a22:	9b05      	ldr	r3, [sp, #20]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	f73f aec9 	bgt.w	80077bc <_dtoa_r+0x934>
 8007a2a:	9d00      	ldr	r5, [sp, #0]
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f7ff f99c 	bl	8006d6c <quorem>
 8007a34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a38:	f805 3b01 	strb.w	r3, [r5], #1
 8007a3c:	9a00      	ldr	r2, [sp, #0]
 8007a3e:	1aaa      	subs	r2, r5, r2
 8007a40:	4591      	cmp	r9, r2
 8007a42:	ddba      	ble.n	80079ba <_dtoa_r+0xb32>
 8007a44:	4659      	mov	r1, fp
 8007a46:	2300      	movs	r3, #0
 8007a48:	220a      	movs	r2, #10
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 faa4 	bl	8007f98 <__multadd>
 8007a50:	4683      	mov	fp, r0
 8007a52:	e7eb      	b.n	8007a2c <_dtoa_r+0xba4>
 8007a54:	08009223 	.word	0x08009223
 8007a58:	0800917c 	.word	0x0800917c
 8007a5c:	080091a0 	.word	0x080091a0

08007a60 <__sflush_r>:
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	4605      	mov	r5, r0
 8007a68:	0710      	lsls	r0, r2, #28
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	d458      	bmi.n	8007b20 <__sflush_r+0xc0>
 8007a6e:	684b      	ldr	r3, [r1, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc05      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc02      	bgt.n	8007a80 <__sflush_r+0x20>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d0f9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a8c:	682f      	ldr	r7, [r5, #0]
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	d032      	beq.n	8007af8 <__sflush_r+0x98>
 8007a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	075a      	lsls	r2, r3, #29
 8007a98:	d505      	bpl.n	8007aa6 <__sflush_r+0x46>
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	1ac0      	subs	r0, r0, r3
 8007a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aa0:	b10b      	cbz	r3, 8007aa6 <__sflush_r+0x46>
 8007aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	d106      	bne.n	8007ac6 <__sflush_r+0x66>
 8007ab8:	6829      	ldr	r1, [r5, #0]
 8007aba:	291d      	cmp	r1, #29
 8007abc:	d82c      	bhi.n	8007b18 <__sflush_r+0xb8>
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <__sflush_r+0x108>)
 8007ac0:	40ca      	lsrs	r2, r1
 8007ac2:	07d6      	lsls	r6, r2, #31
 8007ac4:	d528      	bpl.n	8007b18 <__sflush_r+0xb8>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6062      	str	r2, [r4, #4]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	d504      	bpl.n	8007adc <__sflush_r+0x7c>
 8007ad2:	1c42      	adds	r2, r0, #1
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0x7a>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b903      	cbnz	r3, 8007adc <__sflush_r+0x7c>
 8007ada:	6560      	str	r0, [r4, #84]	; 0x54
 8007adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d0ca      	beq.n	8007a7a <__sflush_r+0x1a>
 8007ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d002      	beq.n	8007af2 <__sflush_r+0x92>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fd7f 	bl	80085f0 <_free_r>
 8007af2:	2000      	movs	r0, #0
 8007af4:	6360      	str	r0, [r4, #52]	; 0x34
 8007af6:	e7c1      	b.n	8007a7c <__sflush_r+0x1c>
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	2301      	movs	r3, #1
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b0      	blx	r6
 8007b00:	1c41      	adds	r1, r0, #1
 8007b02:	d1c7      	bne.n	8007a94 <__sflush_r+0x34>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0c4      	beq.n	8007a94 <__sflush_r+0x34>
 8007b0a:	2b1d      	cmp	r3, #29
 8007b0c:	d001      	beq.n	8007b12 <__sflush_r+0xb2>
 8007b0e:	2b16      	cmp	r3, #22
 8007b10:	d101      	bne.n	8007b16 <__sflush_r+0xb6>
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	e7b1      	b.n	8007a7a <__sflush_r+0x1a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e7ad      	b.n	8007a7c <__sflush_r+0x1c>
 8007b20:	690f      	ldr	r7, [r1, #16]
 8007b22:	2f00      	cmp	r7, #0
 8007b24:	d0a9      	beq.n	8007a7a <__sflush_r+0x1a>
 8007b26:	0793      	lsls	r3, r2, #30
 8007b28:	680e      	ldr	r6, [r1, #0]
 8007b2a:	bf08      	it	eq
 8007b2c:	694b      	ldreq	r3, [r1, #20]
 8007b2e:	600f      	str	r7, [r1, #0]
 8007b30:	bf18      	it	ne
 8007b32:	2300      	movne	r3, #0
 8007b34:	eba6 0807 	sub.w	r8, r6, r7
 8007b38:	608b      	str	r3, [r1, #8]
 8007b3a:	f1b8 0f00 	cmp.w	r8, #0
 8007b3e:	dd9c      	ble.n	8007a7a <__sflush_r+0x1a>
 8007b40:	6a21      	ldr	r1, [r4, #32]
 8007b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b44:	4643      	mov	r3, r8
 8007b46:	463a      	mov	r2, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b0      	blx	r6
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	dc06      	bgt.n	8007b5e <__sflush_r+0xfe>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e78e      	b.n	8007a7c <__sflush_r+0x1c>
 8007b5e:	4407      	add	r7, r0
 8007b60:	eba8 0800 	sub.w	r8, r8, r0
 8007b64:	e7e9      	b.n	8007b3a <__sflush_r+0xda>
 8007b66:	bf00      	nop
 8007b68:	20400001 	.word	0x20400001

08007b6c <_fflush_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b913      	cbnz	r3, 8007b7c <_fflush_r+0x10>
 8007b76:	2500      	movs	r5, #0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	b118      	cbz	r0, 8007b86 <_fflush_r+0x1a>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <_fflush_r+0x1a>
 8007b82:	f000 f887 	bl	8007c94 <__sinit>
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <_fflush_r+0x6c>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d11b      	bne.n	8007bc4 <_fflush_r+0x58>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0ef      	beq.n	8007b76 <_fflush_r+0xa>
 8007b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b98:	07d0      	lsls	r0, r2, #31
 8007b9a:	d404      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007b9c:	0599      	lsls	r1, r3, #22
 8007b9e:	d402      	bmi.n	8007ba6 <_fflush_r+0x3a>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f000 f91a 	bl	8007dda <__retarget_lock_acquire_recursive>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f7ff ff59 	bl	8007a60 <__sflush_r>
 8007bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb0:	07da      	lsls	r2, r3, #31
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	d4e0      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	d4dd      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bbe:	f000 f90d 	bl	8007ddc <__retarget_lock_release_recursive>
 8007bc2:	e7d9      	b.n	8007b78 <_fflush_r+0xc>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_fflush_r+0x70>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <_fflush_r+0x62>
 8007bca:	68ac      	ldr	r4, [r5, #8]
 8007bcc:	e7df      	b.n	8007b8e <_fflush_r+0x22>
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <_fflush_r+0x74>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68ec      	ldreq	r4, [r5, #12]
 8007bd6:	e7da      	b.n	8007b8e <_fflush_r+0x22>
 8007bd8:	08009254 	.word	0x08009254
 8007bdc:	08009274 	.word	0x08009274
 8007be0:	08009234 	.word	0x08009234

08007be4 <std>:
 8007be4:	2300      	movs	r3, #0
 8007be6:	b510      	push	{r4, lr}
 8007be8:	4604      	mov	r4, r0
 8007bea:	e9c0 3300 	strd	r3, r3, [r0]
 8007bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bf2:	6083      	str	r3, [r0, #8]
 8007bf4:	8181      	strh	r1, [r0, #12]
 8007bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf8:	81c2      	strh	r2, [r0, #14]
 8007bfa:	6183      	str	r3, [r0, #24]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	2208      	movs	r2, #8
 8007c00:	305c      	adds	r0, #92	; 0x5c
 8007c02:	f7fe fad3 	bl	80061ac <memset>
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x38>)
 8007c08:	6263      	str	r3, [r4, #36]	; 0x24
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x3c>)
 8007c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <std+0x40>)
 8007c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x44>)
 8007c14:	6224      	str	r4, [r4, #32]
 8007c16:	6323      	str	r3, [r4, #48]	; 0x30
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08008cd1 	.word	0x08008cd1
 8007c20:	08008cf3 	.word	0x08008cf3
 8007c24:	08008d2b 	.word	0x08008d2b
 8007c28:	08008d4f 	.word	0x08008d4f

08007c2c <_cleanup_r>:
 8007c2c:	4901      	ldr	r1, [pc, #4]	; (8007c34 <_cleanup_r+0x8>)
 8007c2e:	f000 b8af 	b.w	8007d90 <_fwalk_reent>
 8007c32:	bf00      	nop
 8007c34:	08007b6d 	.word	0x08007b6d

08007c38 <__sfmoreglue>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	1e4a      	subs	r2, r1, #1
 8007c3c:	2568      	movs	r5, #104	; 0x68
 8007c3e:	4355      	muls	r5, r2
 8007c40:	460e      	mov	r6, r1
 8007c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c46:	f000 fd23 	bl	8008690 <_malloc_r>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	b140      	cbz	r0, 8007c60 <__sfmoreglue+0x28>
 8007c4e:	2100      	movs	r1, #0
 8007c50:	e9c0 1600 	strd	r1, r6, [r0]
 8007c54:	300c      	adds	r0, #12
 8007c56:	60a0      	str	r0, [r4, #8]
 8007c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c5c:	f7fe faa6 	bl	80061ac <memset>
 8007c60:	4620      	mov	r0, r4
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <__sfp_lock_acquire>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__sfp_lock_acquire+0x8>)
 8007c66:	f000 b8b8 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	20000330 	.word	0x20000330

08007c70 <__sfp_lock_release>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sfp_lock_release+0x8>)
 8007c72:	f000 b8b3 	b.w	8007ddc <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	20000330 	.word	0x20000330

08007c7c <__sinit_lock_acquire>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sinit_lock_acquire+0x8>)
 8007c7e:	f000 b8ac 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8007c82:	bf00      	nop
 8007c84:	2000032b 	.word	0x2000032b

08007c88 <__sinit_lock_release>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sinit_lock_release+0x8>)
 8007c8a:	f000 b8a7 	b.w	8007ddc <__retarget_lock_release_recursive>
 8007c8e:	bf00      	nop
 8007c90:	2000032b 	.word	0x2000032b

08007c94 <__sinit>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	4604      	mov	r4, r0
 8007c98:	f7ff fff0 	bl	8007c7c <__sinit_lock_acquire>
 8007c9c:	69a3      	ldr	r3, [r4, #24]
 8007c9e:	b11b      	cbz	r3, 8007ca8 <__sinit+0x14>
 8007ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca4:	f7ff bff0 	b.w	8007c88 <__sinit_lock_release>
 8007ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cac:	6523      	str	r3, [r4, #80]	; 0x50
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <__sinit+0x68>)
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <__sinit+0x6c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	bf04      	itt	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	61a3      	streq	r3, [r4, #24]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f820 	bl	8007d04 <__sfp>
 8007cc4:	6060      	str	r0, [r4, #4]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f81c 	bl	8007d04 <__sfp>
 8007ccc:	60a0      	str	r0, [r4, #8]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 f818 	bl	8007d04 <__sfp>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	60e0      	str	r0, [r4, #12]
 8007cd8:	2104      	movs	r1, #4
 8007cda:	6860      	ldr	r0, [r4, #4]
 8007cdc:	f7ff ff82 	bl	8007be4 <std>
 8007ce0:	68a0      	ldr	r0, [r4, #8]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	2109      	movs	r1, #9
 8007ce6:	f7ff ff7d 	bl	8007be4 <std>
 8007cea:	68e0      	ldr	r0, [r4, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	2112      	movs	r1, #18
 8007cf0:	f7ff ff78 	bl	8007be4 <std>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	61a3      	str	r3, [r4, #24]
 8007cf8:	e7d2      	b.n	8007ca0 <__sinit+0xc>
 8007cfa:	bf00      	nop
 8007cfc:	08009168 	.word	0x08009168
 8007d00:	08007c2d 	.word	0x08007c2d

08007d04 <__sfp>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	4607      	mov	r7, r0
 8007d08:	f7ff ffac 	bl	8007c64 <__sfp_lock_acquire>
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <__sfp+0x84>)
 8007d0e:	681e      	ldr	r6, [r3, #0]
 8007d10:	69b3      	ldr	r3, [r6, #24]
 8007d12:	b913      	cbnz	r3, 8007d1a <__sfp+0x16>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ffbd 	bl	8007c94 <__sinit>
 8007d1a:	3648      	adds	r6, #72	; 0x48
 8007d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	d503      	bpl.n	8007d2c <__sfp+0x28>
 8007d24:	6833      	ldr	r3, [r6, #0]
 8007d26:	b30b      	cbz	r3, 8007d6c <__sfp+0x68>
 8007d28:	6836      	ldr	r6, [r6, #0]
 8007d2a:	e7f7      	b.n	8007d1c <__sfp+0x18>
 8007d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d30:	b9d5      	cbnz	r5, 8007d68 <__sfp+0x64>
 8007d32:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <__sfp+0x88>)
 8007d34:	60e3      	str	r3, [r4, #12]
 8007d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d3c:	f000 f84c 	bl	8007dd8 <__retarget_lock_init_recursive>
 8007d40:	f7ff ff96 	bl	8007c70 <__sfp_lock_release>
 8007d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d4c:	6025      	str	r5, [r4, #0]
 8007d4e:	61a5      	str	r5, [r4, #24]
 8007d50:	2208      	movs	r2, #8
 8007d52:	4629      	mov	r1, r5
 8007d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d58:	f7fe fa28 	bl	80061ac <memset>
 8007d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d64:	4620      	mov	r0, r4
 8007d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d68:	3468      	adds	r4, #104	; 0x68
 8007d6a:	e7d9      	b.n	8007d20 <__sfp+0x1c>
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f7ff ff62 	bl	8007c38 <__sfmoreglue>
 8007d74:	4604      	mov	r4, r0
 8007d76:	6030      	str	r0, [r6, #0]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1d5      	bne.n	8007d28 <__sfp+0x24>
 8007d7c:	f7ff ff78 	bl	8007c70 <__sfp_lock_release>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	e7ee      	b.n	8007d64 <__sfp+0x60>
 8007d86:	bf00      	nop
 8007d88:	08009168 	.word	0x08009168
 8007d8c:	ffff0001 	.word	0xffff0001

08007d90 <_fwalk_reent>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4606      	mov	r6, r0
 8007d96:	4688      	mov	r8, r1
 8007d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d9c:	2700      	movs	r7, #0
 8007d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da2:	f1b9 0901 	subs.w	r9, r9, #1
 8007da6:	d505      	bpl.n	8007db4 <_fwalk_reent+0x24>
 8007da8:	6824      	ldr	r4, [r4, #0]
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d1f7      	bne.n	8007d9e <_fwalk_reent+0xe>
 8007dae:	4638      	mov	r0, r7
 8007db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d907      	bls.n	8007dca <_fwalk_reent+0x3a>
 8007dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	d003      	beq.n	8007dca <_fwalk_reent+0x3a>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	47c0      	blx	r8
 8007dc8:	4307      	orrs	r7, r0
 8007dca:	3568      	adds	r5, #104	; 0x68
 8007dcc:	e7e9      	b.n	8007da2 <_fwalk_reent+0x12>
	...

08007dd0 <_localeconv_r>:
 8007dd0:	4800      	ldr	r0, [pc, #0]	; (8007dd4 <_localeconv_r+0x4>)
 8007dd2:	4770      	bx	lr
 8007dd4:	20000164 	.word	0x20000164

08007dd8 <__retarget_lock_init_recursive>:
 8007dd8:	4770      	bx	lr

08007dda <__retarget_lock_acquire_recursive>:
 8007dda:	4770      	bx	lr

08007ddc <__retarget_lock_release_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__swhatbuf_r>:
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	460e      	mov	r6, r1
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	b096      	sub	sp, #88	; 0x58
 8007dea:	4614      	mov	r4, r2
 8007dec:	461d      	mov	r5, r3
 8007dee:	da07      	bge.n	8007e00 <__swhatbuf_r+0x22>
 8007df0:	2300      	movs	r3, #0
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	89b3      	ldrh	r3, [r6, #12]
 8007df6:	061a      	lsls	r2, r3, #24
 8007df8:	d410      	bmi.n	8007e1c <__swhatbuf_r+0x3e>
 8007dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dfe:	e00e      	b.n	8007e1e <__swhatbuf_r+0x40>
 8007e00:	466a      	mov	r2, sp
 8007e02:	f000 fffb 	bl	8008dfc <_fstat_r>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	dbf2      	blt.n	8007df0 <__swhatbuf_r+0x12>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e14:	425a      	negs	r2, r3
 8007e16:	415a      	adcs	r2, r3
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	e7ee      	b.n	8007dfa <__swhatbuf_r+0x1c>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	2000      	movs	r0, #0
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	b016      	add	sp, #88	; 0x58
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e28 <__smakebuf_r>:
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e2c:	079d      	lsls	r5, r3, #30
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	d507      	bpl.n	8007e44 <__smakebuf_r+0x1c>
 8007e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	b002      	add	sp, #8
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	ab01      	add	r3, sp, #4
 8007e46:	466a      	mov	r2, sp
 8007e48:	f7ff ffc9 	bl	8007dde <__swhatbuf_r>
 8007e4c:	9900      	ldr	r1, [sp, #0]
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fc1d 	bl	8008690 <_malloc_r>
 8007e56:	b948      	cbnz	r0, 8007e6c <__smakebuf_r+0x44>
 8007e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5c:	059a      	lsls	r2, r3, #22
 8007e5e:	d4ef      	bmi.n	8007e40 <__smakebuf_r+0x18>
 8007e60:	f023 0303 	bic.w	r3, r3, #3
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	e7e3      	b.n	8007e34 <__smakebuf_r+0xc>
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <__smakebuf_r+0x7c>)
 8007e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	6163      	str	r3, [r4, #20]
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	6120      	str	r0, [r4, #16]
 8007e82:	b15b      	cbz	r3, 8007e9c <__smakebuf_r+0x74>
 8007e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 ffc9 	bl	8008e20 <_isatty_r>
 8007e8e:	b128      	cbz	r0, 8007e9c <__smakebuf_r+0x74>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	89a0      	ldrh	r0, [r4, #12]
 8007e9e:	4305      	orrs	r5, r0
 8007ea0:	81a5      	strh	r5, [r4, #12]
 8007ea2:	e7cd      	b.n	8007e40 <__smakebuf_r+0x18>
 8007ea4:	08007c2d 	.word	0x08007c2d

08007ea8 <malloc>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <malloc+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f000 bbef 	b.w	8008690 <_malloc_r>
 8007eb2:	bf00      	nop
 8007eb4:	20000010 	.word	0x20000010

08007eb8 <memcpy>:
 8007eb8:	440a      	add	r2, r1
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec0:	d100      	bne.n	8007ec4 <memcpy+0xc>
 8007ec2:	4770      	bx	lr
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	d1f9      	bne.n	8007ec6 <memcpy+0xe>
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <_Balloc>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed8:	4604      	mov	r4, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	b976      	cbnz	r6, 8007efc <_Balloc+0x28>
 8007ede:	2010      	movs	r0, #16
 8007ee0:	f7ff ffe2 	bl	8007ea8 <malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_Balloc+0x20>
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <_Balloc+0x78>)
 8007eec:	4818      	ldr	r0, [pc, #96]	; (8007f50 <_Balloc+0x7c>)
 8007eee:	2166      	movs	r1, #102	; 0x66
 8007ef0:	f000 ff44 	bl	8008d7c <__assert_func>
 8007ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef8:	6006      	str	r6, [r0, #0]
 8007efa:	60c6      	str	r6, [r0, #12]
 8007efc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007efe:	68f3      	ldr	r3, [r6, #12]
 8007f00:	b183      	cbz	r3, 8007f24 <_Balloc+0x50>
 8007f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f0a:	b9b8      	cbnz	r0, 8007f3c <_Balloc+0x68>
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f12:	1d72      	adds	r2, r6, #5
 8007f14:	0092      	lsls	r2, r2, #2
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fb5a 	bl	80085d0 <_calloc_r>
 8007f1c:	b160      	cbz	r0, 8007f38 <_Balloc+0x64>
 8007f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f22:	e00e      	b.n	8007f42 <_Balloc+0x6e>
 8007f24:	2221      	movs	r2, #33	; 0x21
 8007f26:	2104      	movs	r1, #4
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fb51 	bl	80085d0 <_calloc_r>
 8007f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f30:	60f0      	str	r0, [r6, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e4      	bne.n	8007f02 <_Balloc+0x2e>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	6802      	ldr	r2, [r0, #0]
 8007f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f42:	2300      	movs	r3, #0
 8007f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f48:	e7f7      	b.n	8007f3a <_Balloc+0x66>
 8007f4a:	bf00      	nop
 8007f4c:	080091ad 	.word	0x080091ad
 8007f50:	08009294 	.word	0x08009294

08007f54 <_Bfree>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b976      	cbnz	r6, 8007f7c <_Bfree+0x28>
 8007f5e:	2010      	movs	r0, #16
 8007f60:	f7ff ffa2 	bl	8007ea8 <malloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6268      	str	r0, [r5, #36]	; 0x24
 8007f68:	b920      	cbnz	r0, 8007f74 <_Bfree+0x20>
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <_Bfree+0x3c>)
 8007f6c:	4809      	ldr	r0, [pc, #36]	; (8007f94 <_Bfree+0x40>)
 8007f6e:	218a      	movs	r1, #138	; 0x8a
 8007f70:	f000 ff04 	bl	8008d7c <__assert_func>
 8007f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f78:	6006      	str	r6, [r0, #0]
 8007f7a:	60c6      	str	r6, [r0, #12]
 8007f7c:	b13c      	cbz	r4, 8007f8e <_Bfree+0x3a>
 8007f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f80:	6862      	ldr	r2, [r4, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f88:	6021      	str	r1, [r4, #0]
 8007f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	080091ad 	.word	0x080091ad
 8007f94:	08009294 	.word	0x08009294

08007f98 <__multadd>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	690e      	ldr	r6, [r1, #16]
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	4698      	mov	r8, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f101 0014 	add.w	r0, r1, #20
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6805      	ldr	r5, [r0, #0]
 8007fac:	b2a9      	uxth	r1, r5
 8007fae:	fb02 8101 	mla	r1, r2, r1, r8
 8007fb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007fb6:	0c2d      	lsrs	r5, r5, #16
 8007fb8:	fb02 c505 	mla	r5, r2, r5, ip
 8007fbc:	b289      	uxth	r1, r1
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fc4:	429e      	cmp	r6, r3
 8007fc6:	f840 1b04 	str.w	r1, [r0], #4
 8007fca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fce:	dcec      	bgt.n	8007faa <__multadd+0x12>
 8007fd0:	f1b8 0f00 	cmp.w	r8, #0
 8007fd4:	d022      	beq.n	800801c <__multadd+0x84>
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	42b3      	cmp	r3, r6
 8007fda:	dc19      	bgt.n	8008010 <__multadd+0x78>
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f7ff ff77 	bl	8007ed4 <_Balloc>
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b928      	cbnz	r0, 8007ff6 <__multadd+0x5e>
 8007fea:	4602      	mov	r2, r0
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <__multadd+0x8c>)
 8007fee:	480e      	ldr	r0, [pc, #56]	; (8008028 <__multadd+0x90>)
 8007ff0:	21b5      	movs	r1, #181	; 0xb5
 8007ff2:	f000 fec3 	bl	8008d7c <__assert_func>
 8007ff6:	6922      	ldr	r2, [r4, #16]
 8007ff8:	3202      	adds	r2, #2
 8007ffa:	f104 010c 	add.w	r1, r4, #12
 8007ffe:	0092      	lsls	r2, r2, #2
 8008000:	300c      	adds	r0, #12
 8008002:	f7ff ff59 	bl	8007eb8 <memcpy>
 8008006:	4621      	mov	r1, r4
 8008008:	4638      	mov	r0, r7
 800800a:	f7ff ffa3 	bl	8007f54 <_Bfree>
 800800e:	462c      	mov	r4, r5
 8008010:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008014:	3601      	adds	r6, #1
 8008016:	f8c3 8014 	str.w	r8, [r3, #20]
 800801a:	6126      	str	r6, [r4, #16]
 800801c:	4620      	mov	r0, r4
 800801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008022:	bf00      	nop
 8008024:	08009223 	.word	0x08009223
 8008028:	08009294 	.word	0x08009294

0800802c <__hi0bits>:
 800802c:	0c03      	lsrs	r3, r0, #16
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	b9d3      	cbnz	r3, 8008068 <__hi0bits+0x3c>
 8008032:	0400      	lsls	r0, r0, #16
 8008034:	2310      	movs	r3, #16
 8008036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800803a:	bf04      	itt	eq
 800803c:	0200      	lsleq	r0, r0, #8
 800803e:	3308      	addeq	r3, #8
 8008040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008044:	bf04      	itt	eq
 8008046:	0100      	lsleq	r0, r0, #4
 8008048:	3304      	addeq	r3, #4
 800804a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800804e:	bf04      	itt	eq
 8008050:	0080      	lsleq	r0, r0, #2
 8008052:	3302      	addeq	r3, #2
 8008054:	2800      	cmp	r0, #0
 8008056:	db05      	blt.n	8008064 <__hi0bits+0x38>
 8008058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800805c:	f103 0301 	add.w	r3, r3, #1
 8008060:	bf08      	it	eq
 8008062:	2320      	moveq	r3, #32
 8008064:	4618      	mov	r0, r3
 8008066:	4770      	bx	lr
 8008068:	2300      	movs	r3, #0
 800806a:	e7e4      	b.n	8008036 <__hi0bits+0xa>

0800806c <__lo0bits>:
 800806c:	6803      	ldr	r3, [r0, #0]
 800806e:	f013 0207 	ands.w	r2, r3, #7
 8008072:	4601      	mov	r1, r0
 8008074:	d00b      	beq.n	800808e <__lo0bits+0x22>
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d424      	bmi.n	80080c4 <__lo0bits+0x58>
 800807a:	0798      	lsls	r0, r3, #30
 800807c:	bf49      	itett	mi
 800807e:	085b      	lsrmi	r3, r3, #1
 8008080:	089b      	lsrpl	r3, r3, #2
 8008082:	2001      	movmi	r0, #1
 8008084:	600b      	strmi	r3, [r1, #0]
 8008086:	bf5c      	itt	pl
 8008088:	600b      	strpl	r3, [r1, #0]
 800808a:	2002      	movpl	r0, #2
 800808c:	4770      	bx	lr
 800808e:	b298      	uxth	r0, r3
 8008090:	b9b0      	cbnz	r0, 80080c0 <__lo0bits+0x54>
 8008092:	0c1b      	lsrs	r3, r3, #16
 8008094:	2010      	movs	r0, #16
 8008096:	f013 0fff 	tst.w	r3, #255	; 0xff
 800809a:	bf04      	itt	eq
 800809c:	0a1b      	lsreq	r3, r3, #8
 800809e:	3008      	addeq	r0, #8
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	bf04      	itt	eq
 80080a4:	091b      	lsreq	r3, r3, #4
 80080a6:	3004      	addeq	r0, #4
 80080a8:	079a      	lsls	r2, r3, #30
 80080aa:	bf04      	itt	eq
 80080ac:	089b      	lsreq	r3, r3, #2
 80080ae:	3002      	addeq	r0, #2
 80080b0:	07da      	lsls	r2, r3, #31
 80080b2:	d403      	bmi.n	80080bc <__lo0bits+0x50>
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	f100 0001 	add.w	r0, r0, #1
 80080ba:	d005      	beq.n	80080c8 <__lo0bits+0x5c>
 80080bc:	600b      	str	r3, [r1, #0]
 80080be:	4770      	bx	lr
 80080c0:	4610      	mov	r0, r2
 80080c2:	e7e8      	b.n	8008096 <__lo0bits+0x2a>
 80080c4:	2000      	movs	r0, #0
 80080c6:	4770      	bx	lr
 80080c8:	2020      	movs	r0, #32
 80080ca:	4770      	bx	lr

080080cc <__i2b>:
 80080cc:	b510      	push	{r4, lr}
 80080ce:	460c      	mov	r4, r1
 80080d0:	2101      	movs	r1, #1
 80080d2:	f7ff feff 	bl	8007ed4 <_Balloc>
 80080d6:	4602      	mov	r2, r0
 80080d8:	b928      	cbnz	r0, 80080e6 <__i2b+0x1a>
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <__i2b+0x24>)
 80080dc:	4805      	ldr	r0, [pc, #20]	; (80080f4 <__i2b+0x28>)
 80080de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080e2:	f000 fe4b 	bl	8008d7c <__assert_func>
 80080e6:	2301      	movs	r3, #1
 80080e8:	6144      	str	r4, [r0, #20]
 80080ea:	6103      	str	r3, [r0, #16]
 80080ec:	bd10      	pop	{r4, pc}
 80080ee:	bf00      	nop
 80080f0:	08009223 	.word	0x08009223
 80080f4:	08009294 	.word	0x08009294

080080f8 <__multiply>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	4614      	mov	r4, r2
 80080fe:	690a      	ldr	r2, [r1, #16]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	429a      	cmp	r2, r3
 8008104:	bfb8      	it	lt
 8008106:	460b      	movlt	r3, r1
 8008108:	460d      	mov	r5, r1
 800810a:	bfbc      	itt	lt
 800810c:	4625      	movlt	r5, r4
 800810e:	461c      	movlt	r4, r3
 8008110:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008114:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008118:	68ab      	ldr	r3, [r5, #8]
 800811a:	6869      	ldr	r1, [r5, #4]
 800811c:	eb0a 0709 	add.w	r7, sl, r9
 8008120:	42bb      	cmp	r3, r7
 8008122:	b085      	sub	sp, #20
 8008124:	bfb8      	it	lt
 8008126:	3101      	addlt	r1, #1
 8008128:	f7ff fed4 	bl	8007ed4 <_Balloc>
 800812c:	b930      	cbnz	r0, 800813c <__multiply+0x44>
 800812e:	4602      	mov	r2, r0
 8008130:	4b42      	ldr	r3, [pc, #264]	; (800823c <__multiply+0x144>)
 8008132:	4843      	ldr	r0, [pc, #268]	; (8008240 <__multiply+0x148>)
 8008134:	f240 115d 	movw	r1, #349	; 0x15d
 8008138:	f000 fe20 	bl	8008d7c <__assert_func>
 800813c:	f100 0614 	add.w	r6, r0, #20
 8008140:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008144:	4633      	mov	r3, r6
 8008146:	2200      	movs	r2, #0
 8008148:	4543      	cmp	r3, r8
 800814a:	d31e      	bcc.n	800818a <__multiply+0x92>
 800814c:	f105 0c14 	add.w	ip, r5, #20
 8008150:	f104 0314 	add.w	r3, r4, #20
 8008154:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008158:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	ebac 0205 	sub.w	r2, ip, r5
 8008162:	3a15      	subs	r2, #21
 8008164:	f022 0203 	bic.w	r2, r2, #3
 8008168:	3204      	adds	r2, #4
 800816a:	f105 0115 	add.w	r1, r5, #21
 800816e:	458c      	cmp	ip, r1
 8008170:	bf38      	it	cc
 8008172:	2204      	movcc	r2, #4
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	9a02      	ldr	r2, [sp, #8]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d808      	bhi.n	8008190 <__multiply+0x98>
 800817e:	2f00      	cmp	r7, #0
 8008180:	dc55      	bgt.n	800822e <__multiply+0x136>
 8008182:	6107      	str	r7, [r0, #16]
 8008184:	b005      	add	sp, #20
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	f843 2b04 	str.w	r2, [r3], #4
 800818e:	e7db      	b.n	8008148 <__multiply+0x50>
 8008190:	f8b3 a000 	ldrh.w	sl, [r3]
 8008194:	f1ba 0f00 	cmp.w	sl, #0
 8008198:	d020      	beq.n	80081dc <__multiply+0xe4>
 800819a:	f105 0e14 	add.w	lr, r5, #20
 800819e:	46b1      	mov	r9, r6
 80081a0:	2200      	movs	r2, #0
 80081a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80081a6:	f8d9 b000 	ldr.w	fp, [r9]
 80081aa:	b2a1      	uxth	r1, r4
 80081ac:	fa1f fb8b 	uxth.w	fp, fp
 80081b0:	fb0a b101 	mla	r1, sl, r1, fp
 80081b4:	4411      	add	r1, r2
 80081b6:	f8d9 2000 	ldr.w	r2, [r9]
 80081ba:	0c24      	lsrs	r4, r4, #16
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	fb0a 2404 	mla	r4, sl, r4, r2
 80081c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80081c6:	b289      	uxth	r1, r1
 80081c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081cc:	45f4      	cmp	ip, lr
 80081ce:	f849 1b04 	str.w	r1, [r9], #4
 80081d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80081d6:	d8e4      	bhi.n	80081a2 <__multiply+0xaa>
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	5072      	str	r2, [r6, r1]
 80081dc:	9a03      	ldr	r2, [sp, #12]
 80081de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081e2:	3304      	adds	r3, #4
 80081e4:	f1b9 0f00 	cmp.w	r9, #0
 80081e8:	d01f      	beq.n	800822a <__multiply+0x132>
 80081ea:	6834      	ldr	r4, [r6, #0]
 80081ec:	f105 0114 	add.w	r1, r5, #20
 80081f0:	46b6      	mov	lr, r6
 80081f2:	f04f 0a00 	mov.w	sl, #0
 80081f6:	880a      	ldrh	r2, [r1, #0]
 80081f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80081fc:	fb09 b202 	mla	r2, r9, r2, fp
 8008200:	4492      	add	sl, r2
 8008202:	b2a4      	uxth	r4, r4
 8008204:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008208:	f84e 4b04 	str.w	r4, [lr], #4
 800820c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008210:	f8be 2000 	ldrh.w	r2, [lr]
 8008214:	0c24      	lsrs	r4, r4, #16
 8008216:	fb09 2404 	mla	r4, r9, r4, r2
 800821a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800821e:	458c      	cmp	ip, r1
 8008220:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008224:	d8e7      	bhi.n	80081f6 <__multiply+0xfe>
 8008226:	9a01      	ldr	r2, [sp, #4]
 8008228:	50b4      	str	r4, [r6, r2]
 800822a:	3604      	adds	r6, #4
 800822c:	e7a3      	b.n	8008176 <__multiply+0x7e>
 800822e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1a5      	bne.n	8008182 <__multiply+0x8a>
 8008236:	3f01      	subs	r7, #1
 8008238:	e7a1      	b.n	800817e <__multiply+0x86>
 800823a:	bf00      	nop
 800823c:	08009223 	.word	0x08009223
 8008240:	08009294 	.word	0x08009294

08008244 <__pow5mult>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4615      	mov	r5, r2
 800824a:	f012 0203 	ands.w	r2, r2, #3
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	d007      	beq.n	8008264 <__pow5mult+0x20>
 8008254:	4c25      	ldr	r4, [pc, #148]	; (80082ec <__pow5mult+0xa8>)
 8008256:	3a01      	subs	r2, #1
 8008258:	2300      	movs	r3, #0
 800825a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825e:	f7ff fe9b 	bl	8007f98 <__multadd>
 8008262:	4607      	mov	r7, r0
 8008264:	10ad      	asrs	r5, r5, #2
 8008266:	d03d      	beq.n	80082e4 <__pow5mult+0xa0>
 8008268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800826a:	b97c      	cbnz	r4, 800828c <__pow5mult+0x48>
 800826c:	2010      	movs	r0, #16
 800826e:	f7ff fe1b 	bl	8007ea8 <malloc>
 8008272:	4602      	mov	r2, r0
 8008274:	6270      	str	r0, [r6, #36]	; 0x24
 8008276:	b928      	cbnz	r0, 8008284 <__pow5mult+0x40>
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <__pow5mult+0xac>)
 800827a:	481e      	ldr	r0, [pc, #120]	; (80082f4 <__pow5mult+0xb0>)
 800827c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008280:	f000 fd7c 	bl	8008d7c <__assert_func>
 8008284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008288:	6004      	str	r4, [r0, #0]
 800828a:	60c4      	str	r4, [r0, #12]
 800828c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008294:	b94c      	cbnz	r4, 80082aa <__pow5mult+0x66>
 8008296:	f240 2171 	movw	r1, #625	; 0x271
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff ff16 	bl	80080cc <__i2b>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80082a6:	4604      	mov	r4, r0
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	f04f 0900 	mov.w	r9, #0
 80082ae:	07eb      	lsls	r3, r5, #31
 80082b0:	d50a      	bpl.n	80082c8 <__pow5mult+0x84>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4622      	mov	r2, r4
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ff1e 	bl	80080f8 <__multiply>
 80082bc:	4639      	mov	r1, r7
 80082be:	4680      	mov	r8, r0
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fe47 	bl	8007f54 <_Bfree>
 80082c6:	4647      	mov	r7, r8
 80082c8:	106d      	asrs	r5, r5, #1
 80082ca:	d00b      	beq.n	80082e4 <__pow5mult+0xa0>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	b938      	cbnz	r0, 80082e0 <__pow5mult+0x9c>
 80082d0:	4622      	mov	r2, r4
 80082d2:	4621      	mov	r1, r4
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff ff0f 	bl	80080f8 <__multiply>
 80082da:	6020      	str	r0, [r4, #0]
 80082dc:	f8c0 9000 	str.w	r9, [r0]
 80082e0:	4604      	mov	r4, r0
 80082e2:	e7e4      	b.n	80082ae <__pow5mult+0x6a>
 80082e4:	4638      	mov	r0, r7
 80082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ea:	bf00      	nop
 80082ec:	080093e8 	.word	0x080093e8
 80082f0:	080091ad 	.word	0x080091ad
 80082f4:	08009294 	.word	0x08009294

080082f8 <__lshift>:
 80082f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	6849      	ldr	r1, [r1, #4]
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	4607      	mov	r7, r0
 800830a:	4691      	mov	r9, r2
 800830c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008310:	f108 0601 	add.w	r6, r8, #1
 8008314:	42b3      	cmp	r3, r6
 8008316:	db0b      	blt.n	8008330 <__lshift+0x38>
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fddb 	bl	8007ed4 <_Balloc>
 800831e:	4605      	mov	r5, r0
 8008320:	b948      	cbnz	r0, 8008336 <__lshift+0x3e>
 8008322:	4602      	mov	r2, r0
 8008324:	4b28      	ldr	r3, [pc, #160]	; (80083c8 <__lshift+0xd0>)
 8008326:	4829      	ldr	r0, [pc, #164]	; (80083cc <__lshift+0xd4>)
 8008328:	f240 11d9 	movw	r1, #473	; 0x1d9
 800832c:	f000 fd26 	bl	8008d7c <__assert_func>
 8008330:	3101      	adds	r1, #1
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	e7ee      	b.n	8008314 <__lshift+0x1c>
 8008336:	2300      	movs	r3, #0
 8008338:	f100 0114 	add.w	r1, r0, #20
 800833c:	f100 0210 	add.w	r2, r0, #16
 8008340:	4618      	mov	r0, r3
 8008342:	4553      	cmp	r3, sl
 8008344:	db33      	blt.n	80083ae <__lshift+0xb6>
 8008346:	6920      	ldr	r0, [r4, #16]
 8008348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800834c:	f104 0314 	add.w	r3, r4, #20
 8008350:	f019 091f 	ands.w	r9, r9, #31
 8008354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800835c:	d02b      	beq.n	80083b6 <__lshift+0xbe>
 800835e:	f1c9 0e20 	rsb	lr, r9, #32
 8008362:	468a      	mov	sl, r1
 8008364:	2200      	movs	r2, #0
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	fa00 f009 	lsl.w	r0, r0, r9
 800836c:	4302      	orrs	r2, r0
 800836e:	f84a 2b04 	str.w	r2, [sl], #4
 8008372:	f853 2b04 	ldr.w	r2, [r3], #4
 8008376:	459c      	cmp	ip, r3
 8008378:	fa22 f20e 	lsr.w	r2, r2, lr
 800837c:	d8f3      	bhi.n	8008366 <__lshift+0x6e>
 800837e:	ebac 0304 	sub.w	r3, ip, r4
 8008382:	3b15      	subs	r3, #21
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	3304      	adds	r3, #4
 800838a:	f104 0015 	add.w	r0, r4, #21
 800838e:	4584      	cmp	ip, r0
 8008390:	bf38      	it	cc
 8008392:	2304      	movcc	r3, #4
 8008394:	50ca      	str	r2, [r1, r3]
 8008396:	b10a      	cbz	r2, 800839c <__lshift+0xa4>
 8008398:	f108 0602 	add.w	r6, r8, #2
 800839c:	3e01      	subs	r6, #1
 800839e:	4638      	mov	r0, r7
 80083a0:	612e      	str	r6, [r5, #16]
 80083a2:	4621      	mov	r1, r4
 80083a4:	f7ff fdd6 	bl	8007f54 <_Bfree>
 80083a8:	4628      	mov	r0, r5
 80083aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80083b2:	3301      	adds	r3, #1
 80083b4:	e7c5      	b.n	8008342 <__lshift+0x4a>
 80083b6:	3904      	subs	r1, #4
 80083b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80083c0:	459c      	cmp	ip, r3
 80083c2:	d8f9      	bhi.n	80083b8 <__lshift+0xc0>
 80083c4:	e7ea      	b.n	800839c <__lshift+0xa4>
 80083c6:	bf00      	nop
 80083c8:	08009223 	.word	0x08009223
 80083cc:	08009294 	.word	0x08009294

080083d0 <__mcmp>:
 80083d0:	b530      	push	{r4, r5, lr}
 80083d2:	6902      	ldr	r2, [r0, #16]
 80083d4:	690c      	ldr	r4, [r1, #16]
 80083d6:	1b12      	subs	r2, r2, r4
 80083d8:	d10e      	bne.n	80083f8 <__mcmp+0x28>
 80083da:	f100 0314 	add.w	r3, r0, #20
 80083de:	3114      	adds	r1, #20
 80083e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083f0:	42a5      	cmp	r5, r4
 80083f2:	d003      	beq.n	80083fc <__mcmp+0x2c>
 80083f4:	d305      	bcc.n	8008402 <__mcmp+0x32>
 80083f6:	2201      	movs	r2, #1
 80083f8:	4610      	mov	r0, r2
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d3f3      	bcc.n	80083e8 <__mcmp+0x18>
 8008400:	e7fa      	b.n	80083f8 <__mcmp+0x28>
 8008402:	f04f 32ff 	mov.w	r2, #4294967295
 8008406:	e7f7      	b.n	80083f8 <__mcmp+0x28>

08008408 <__mdiff>:
 8008408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	4606      	mov	r6, r0
 8008410:	4611      	mov	r1, r2
 8008412:	4620      	mov	r0, r4
 8008414:	4617      	mov	r7, r2
 8008416:	f7ff ffdb 	bl	80083d0 <__mcmp>
 800841a:	1e05      	subs	r5, r0, #0
 800841c:	d110      	bne.n	8008440 <__mdiff+0x38>
 800841e:	4629      	mov	r1, r5
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff fd57 	bl	8007ed4 <_Balloc>
 8008426:	b930      	cbnz	r0, 8008436 <__mdiff+0x2e>
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <__mdiff+0x108>)
 800842a:	4602      	mov	r2, r0
 800842c:	f240 2132 	movw	r1, #562	; 0x232
 8008430:	4838      	ldr	r0, [pc, #224]	; (8008514 <__mdiff+0x10c>)
 8008432:	f000 fca3 	bl	8008d7c <__assert_func>
 8008436:	2301      	movs	r3, #1
 8008438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800843c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	bfa4      	itt	ge
 8008442:	463b      	movge	r3, r7
 8008444:	4627      	movge	r7, r4
 8008446:	4630      	mov	r0, r6
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	bfa6      	itte	ge
 800844c:	461c      	movge	r4, r3
 800844e:	2500      	movge	r5, #0
 8008450:	2501      	movlt	r5, #1
 8008452:	f7ff fd3f 	bl	8007ed4 <_Balloc>
 8008456:	b920      	cbnz	r0, 8008462 <__mdiff+0x5a>
 8008458:	4b2d      	ldr	r3, [pc, #180]	; (8008510 <__mdiff+0x108>)
 800845a:	4602      	mov	r2, r0
 800845c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008460:	e7e6      	b.n	8008430 <__mdiff+0x28>
 8008462:	693e      	ldr	r6, [r7, #16]
 8008464:	60c5      	str	r5, [r0, #12]
 8008466:	6925      	ldr	r5, [r4, #16]
 8008468:	f107 0114 	add.w	r1, r7, #20
 800846c:	f104 0914 	add.w	r9, r4, #20
 8008470:	f100 0e14 	add.w	lr, r0, #20
 8008474:	f107 0210 	add.w	r2, r7, #16
 8008478:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800847c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008480:	46f2      	mov	sl, lr
 8008482:	2700      	movs	r7, #0
 8008484:	f859 3b04 	ldr.w	r3, [r9], #4
 8008488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800848c:	fa1f f883 	uxth.w	r8, r3
 8008490:	fa17 f78b 	uxtah	r7, r7, fp
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	eba7 0808 	sub.w	r8, r7, r8
 800849a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800849e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084a2:	fa1f f888 	uxth.w	r8, r8
 80084a6:	141f      	asrs	r7, r3, #16
 80084a8:	454d      	cmp	r5, r9
 80084aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084ae:	f84a 3b04 	str.w	r3, [sl], #4
 80084b2:	d8e7      	bhi.n	8008484 <__mdiff+0x7c>
 80084b4:	1b2b      	subs	r3, r5, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	3415      	adds	r4, #21
 80084c0:	42a5      	cmp	r5, r4
 80084c2:	bf38      	it	cc
 80084c4:	2304      	movcc	r3, #4
 80084c6:	4419      	add	r1, r3
 80084c8:	4473      	add	r3, lr
 80084ca:	469e      	mov	lr, r3
 80084cc:	460d      	mov	r5, r1
 80084ce:	4565      	cmp	r5, ip
 80084d0:	d30e      	bcc.n	80084f0 <__mdiff+0xe8>
 80084d2:	f10c 0203 	add.w	r2, ip, #3
 80084d6:	1a52      	subs	r2, r2, r1
 80084d8:	f022 0203 	bic.w	r2, r2, #3
 80084dc:	3903      	subs	r1, #3
 80084de:	458c      	cmp	ip, r1
 80084e0:	bf38      	it	cc
 80084e2:	2200      	movcc	r2, #0
 80084e4:	441a      	add	r2, r3
 80084e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084ea:	b17b      	cbz	r3, 800850c <__mdiff+0x104>
 80084ec:	6106      	str	r6, [r0, #16]
 80084ee:	e7a5      	b.n	800843c <__mdiff+0x34>
 80084f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80084f4:	fa17 f488 	uxtah	r4, r7, r8
 80084f8:	1422      	asrs	r2, r4, #16
 80084fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80084fe:	b2a4      	uxth	r4, r4
 8008500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008504:	f84e 4b04 	str.w	r4, [lr], #4
 8008508:	1417      	asrs	r7, r2, #16
 800850a:	e7e0      	b.n	80084ce <__mdiff+0xc6>
 800850c:	3e01      	subs	r6, #1
 800850e:	e7ea      	b.n	80084e6 <__mdiff+0xde>
 8008510:	08009223 	.word	0x08009223
 8008514:	08009294 	.word	0x08009294

08008518 <__d2b>:
 8008518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800851c:	4689      	mov	r9, r1
 800851e:	2101      	movs	r1, #1
 8008520:	ec57 6b10 	vmov	r6, r7, d0
 8008524:	4690      	mov	r8, r2
 8008526:	f7ff fcd5 	bl	8007ed4 <_Balloc>
 800852a:	4604      	mov	r4, r0
 800852c:	b930      	cbnz	r0, 800853c <__d2b+0x24>
 800852e:	4602      	mov	r2, r0
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__d2b+0xb0>)
 8008532:	4826      	ldr	r0, [pc, #152]	; (80085cc <__d2b+0xb4>)
 8008534:	f240 310a 	movw	r1, #778	; 0x30a
 8008538:	f000 fc20 	bl	8008d7c <__assert_func>
 800853c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008544:	bb35      	cbnz	r5, 8008594 <__d2b+0x7c>
 8008546:	2e00      	cmp	r6, #0
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	d028      	beq.n	800859e <__d2b+0x86>
 800854c:	4668      	mov	r0, sp
 800854e:	9600      	str	r6, [sp, #0]
 8008550:	f7ff fd8c 	bl	800806c <__lo0bits>
 8008554:	9900      	ldr	r1, [sp, #0]
 8008556:	b300      	cbz	r0, 800859a <__d2b+0x82>
 8008558:	9a01      	ldr	r2, [sp, #4]
 800855a:	f1c0 0320 	rsb	r3, r0, #32
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	430b      	orrs	r3, r1
 8008564:	40c2      	lsrs	r2, r0
 8008566:	6163      	str	r3, [r4, #20]
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	61a3      	str	r3, [r4, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf14      	ite	ne
 8008572:	2202      	movne	r2, #2
 8008574:	2201      	moveq	r2, #1
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	b1d5      	cbz	r5, 80085b0 <__d2b+0x98>
 800857a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800857e:	4405      	add	r5, r0
 8008580:	f8c9 5000 	str.w	r5, [r9]
 8008584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008588:	f8c8 0000 	str.w	r0, [r8]
 800858c:	4620      	mov	r0, r4
 800858e:	b003      	add	sp, #12
 8008590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	e7d5      	b.n	8008546 <__d2b+0x2e>
 800859a:	6161      	str	r1, [r4, #20]
 800859c:	e7e5      	b.n	800856a <__d2b+0x52>
 800859e:	a801      	add	r0, sp, #4
 80085a0:	f7ff fd64 	bl	800806c <__lo0bits>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	6163      	str	r3, [r4, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	6122      	str	r2, [r4, #16]
 80085ac:	3020      	adds	r0, #32
 80085ae:	e7e3      	b.n	8008578 <__d2b+0x60>
 80085b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b8:	f8c9 0000 	str.w	r0, [r9]
 80085bc:	6918      	ldr	r0, [r3, #16]
 80085be:	f7ff fd35 	bl	800802c <__hi0bits>
 80085c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085c6:	e7df      	b.n	8008588 <__d2b+0x70>
 80085c8:	08009223 	.word	0x08009223
 80085cc:	08009294 	.word	0x08009294

080085d0 <_calloc_r>:
 80085d0:	b513      	push	{r0, r1, r4, lr}
 80085d2:	434a      	muls	r2, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	9201      	str	r2, [sp, #4]
 80085d8:	f000 f85a 	bl	8008690 <_malloc_r>
 80085dc:	4604      	mov	r4, r0
 80085de:	b118      	cbz	r0, 80085e8 <_calloc_r+0x18>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	2100      	movs	r1, #0
 80085e4:	f7fd fde2 	bl	80061ac <memset>
 80085e8:	4620      	mov	r0, r4
 80085ea:	b002      	add	sp, #8
 80085ec:	bd10      	pop	{r4, pc}
	...

080085f0 <_free_r>:
 80085f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d048      	beq.n	8008688 <_free_r+0x98>
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008602:	bfb8      	it	lt
 8008604:	18e4      	addlt	r4, r4, r3
 8008606:	f000 fc59 	bl	8008ebc <__malloc_lock>
 800860a:	4a20      	ldr	r2, [pc, #128]	; (800868c <_free_r+0x9c>)
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	4615      	mov	r5, r2
 8008612:	b933      	cbnz	r3, 8008622 <_free_r+0x32>
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	6014      	str	r4, [r2, #0]
 8008618:	b003      	add	sp, #12
 800861a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861e:	f000 bc53 	b.w	8008ec8 <__malloc_unlock>
 8008622:	42a3      	cmp	r3, r4
 8008624:	d90b      	bls.n	800863e <_free_r+0x4e>
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1862      	adds	r2, r4, r1
 800862a:	4293      	cmp	r3, r2
 800862c:	bf04      	itt	eq
 800862e:	681a      	ldreq	r2, [r3, #0]
 8008630:	685b      	ldreq	r3, [r3, #4]
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	bf04      	itt	eq
 8008636:	1852      	addeq	r2, r2, r1
 8008638:	6022      	streq	r2, [r4, #0]
 800863a:	602c      	str	r4, [r5, #0]
 800863c:	e7ec      	b.n	8008618 <_free_r+0x28>
 800863e:	461a      	mov	r2, r3
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b10b      	cbz	r3, 8008648 <_free_r+0x58>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d9fa      	bls.n	800863e <_free_r+0x4e>
 8008648:	6811      	ldr	r1, [r2, #0]
 800864a:	1855      	adds	r5, r2, r1
 800864c:	42a5      	cmp	r5, r4
 800864e:	d10b      	bne.n	8008668 <_free_r+0x78>
 8008650:	6824      	ldr	r4, [r4, #0]
 8008652:	4421      	add	r1, r4
 8008654:	1854      	adds	r4, r2, r1
 8008656:	42a3      	cmp	r3, r4
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	d1dd      	bne.n	8008618 <_free_r+0x28>
 800865c:	681c      	ldr	r4, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	6053      	str	r3, [r2, #4]
 8008662:	4421      	add	r1, r4
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	e7d7      	b.n	8008618 <_free_r+0x28>
 8008668:	d902      	bls.n	8008670 <_free_r+0x80>
 800866a:	230c      	movs	r3, #12
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	e7d3      	b.n	8008618 <_free_r+0x28>
 8008670:	6825      	ldr	r5, [r4, #0]
 8008672:	1961      	adds	r1, r4, r5
 8008674:	428b      	cmp	r3, r1
 8008676:	bf04      	itt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	bf04      	itt	eq
 8008680:	1949      	addeq	r1, r1, r5
 8008682:	6021      	streq	r1, [r4, #0]
 8008684:	6054      	str	r4, [r2, #4]
 8008686:	e7c7      	b.n	8008618 <_free_r+0x28>
 8008688:	b003      	add	sp, #12
 800868a:	bd30      	pop	{r4, r5, pc}
 800868c:	20000284 	.word	0x20000284

08008690 <_malloc_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	1ccd      	adds	r5, r1, #3
 8008694:	f025 0503 	bic.w	r5, r5, #3
 8008698:	3508      	adds	r5, #8
 800869a:	2d0c      	cmp	r5, #12
 800869c:	bf38      	it	cc
 800869e:	250c      	movcc	r5, #12
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	4606      	mov	r6, r0
 80086a4:	db01      	blt.n	80086aa <_malloc_r+0x1a>
 80086a6:	42a9      	cmp	r1, r5
 80086a8:	d903      	bls.n	80086b2 <_malloc_r+0x22>
 80086aa:	230c      	movs	r3, #12
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	2000      	movs	r0, #0
 80086b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b2:	f000 fc03 	bl	8008ebc <__malloc_lock>
 80086b6:	4921      	ldr	r1, [pc, #132]	; (800873c <_malloc_r+0xac>)
 80086b8:	680a      	ldr	r2, [r1, #0]
 80086ba:	4614      	mov	r4, r2
 80086bc:	b99c      	cbnz	r4, 80086e6 <_malloc_r+0x56>
 80086be:	4f20      	ldr	r7, [pc, #128]	; (8008740 <_malloc_r+0xb0>)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	b923      	cbnz	r3, 80086ce <_malloc_r+0x3e>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 faf2 	bl	8008cb0 <_sbrk_r>
 80086cc:	6038      	str	r0, [r7, #0]
 80086ce:	4629      	mov	r1, r5
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 faed 	bl	8008cb0 <_sbrk_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d123      	bne.n	8008722 <_malloc_r+0x92>
 80086da:	230c      	movs	r3, #12
 80086dc:	6033      	str	r3, [r6, #0]
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 fbf2 	bl	8008ec8 <__malloc_unlock>
 80086e4:	e7e3      	b.n	80086ae <_malloc_r+0x1e>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	1b5b      	subs	r3, r3, r5
 80086ea:	d417      	bmi.n	800871c <_malloc_r+0x8c>
 80086ec:	2b0b      	cmp	r3, #11
 80086ee:	d903      	bls.n	80086f8 <_malloc_r+0x68>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	441c      	add	r4, r3
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	e004      	b.n	8008702 <_malloc_r+0x72>
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	42a2      	cmp	r2, r4
 80086fc:	bf0c      	ite	eq
 80086fe:	600b      	streq	r3, [r1, #0]
 8008700:	6053      	strne	r3, [r2, #4]
 8008702:	4630      	mov	r0, r6
 8008704:	f000 fbe0 	bl	8008ec8 <__malloc_unlock>
 8008708:	f104 000b 	add.w	r0, r4, #11
 800870c:	1d23      	adds	r3, r4, #4
 800870e:	f020 0007 	bic.w	r0, r0, #7
 8008712:	1ac2      	subs	r2, r0, r3
 8008714:	d0cc      	beq.n	80086b0 <_malloc_r+0x20>
 8008716:	1a1b      	subs	r3, r3, r0
 8008718:	50a3      	str	r3, [r4, r2]
 800871a:	e7c9      	b.n	80086b0 <_malloc_r+0x20>
 800871c:	4622      	mov	r2, r4
 800871e:	6864      	ldr	r4, [r4, #4]
 8008720:	e7cc      	b.n	80086bc <_malloc_r+0x2c>
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d0e3      	beq.n	80086f4 <_malloc_r+0x64>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fabe 	bl	8008cb0 <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d1dd      	bne.n	80086f4 <_malloc_r+0x64>
 8008738:	e7cf      	b.n	80086da <_malloc_r+0x4a>
 800873a:	bf00      	nop
 800873c:	20000284 	.word	0x20000284
 8008740:	20000288 	.word	0x20000288

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	429e      	cmp	r6, r3
 800874c:	4682      	mov	sl, r0
 800874e:	460c      	mov	r4, r1
 8008750:	4690      	mov	r8, r2
 8008752:	461f      	mov	r7, r3
 8008754:	d838      	bhi.n	80087c8 <__ssputs_r+0x84>
 8008756:	898a      	ldrh	r2, [r1, #12]
 8008758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800875c:	d032      	beq.n	80087c4 <__ssputs_r+0x80>
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	6909      	ldr	r1, [r1, #16]
 8008762:	eba5 0901 	sub.w	r9, r5, r1
 8008766:	6965      	ldr	r5, [r4, #20]
 8008768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	3301      	adds	r3, #1
 8008772:	444b      	add	r3, r9
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d531      	bpl.n	80087e4 <__ssputs_r+0xa0>
 8008780:	4629      	mov	r1, r5
 8008782:	f7ff ff85 	bl	8008690 <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b950      	cbnz	r0, 80087a0 <__ssputs_r+0x5c>
 800878a:	230c      	movs	r3, #12
 800878c:	f8ca 3000 	str.w	r3, [sl]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	6921      	ldr	r1, [r4, #16]
 80087a2:	464a      	mov	r2, r9
 80087a4:	f7ff fb88 	bl	8007eb8 <memcpy>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	6126      	str	r6, [r4, #16]
 80087b6:	6165      	str	r5, [r4, #20]
 80087b8:	444e      	add	r6, r9
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	6026      	str	r6, [r4, #0]
 80087c0:	60a5      	str	r5, [r4, #8]
 80087c2:	463e      	mov	r6, r7
 80087c4:	42be      	cmp	r6, r7
 80087c6:	d900      	bls.n	80087ca <__ssputs_r+0x86>
 80087c8:	463e      	mov	r6, r7
 80087ca:	4632      	mov	r2, r6
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	4641      	mov	r1, r8
 80087d0:	f000 fb5a 	bl	8008e88 <memmove>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	1b9b      	subs	r3, r3, r6
 80087da:	4432      	add	r2, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6022      	str	r2, [r4, #0]
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7db      	b.n	800879c <__ssputs_r+0x58>
 80087e4:	462a      	mov	r2, r5
 80087e6:	f000 fb75 	bl	8008ed4 <_realloc_r>
 80087ea:	4606      	mov	r6, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d1e1      	bne.n	80087b4 <__ssputs_r+0x70>
 80087f0:	6921      	ldr	r1, [r4, #16]
 80087f2:	4650      	mov	r0, sl
 80087f4:	f7ff fefc 	bl	80085f0 <_free_r>
 80087f8:	e7c7      	b.n	800878a <__ssputs_r+0x46>
	...

080087fc <_svfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	4698      	mov	r8, r3
 8008802:	898b      	ldrh	r3, [r1, #12]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	b09d      	sub	sp, #116	; 0x74
 8008808:	4607      	mov	r7, r0
 800880a:	460d      	mov	r5, r1
 800880c:	4614      	mov	r4, r2
 800880e:	d50e      	bpl.n	800882e <_svfiprintf_r+0x32>
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	b963      	cbnz	r3, 800882e <_svfiprintf_r+0x32>
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	f7ff ff3b 	bl	8008690 <_malloc_r>
 800881a:	6028      	str	r0, [r5, #0]
 800881c:	6128      	str	r0, [r5, #16]
 800881e:	b920      	cbnz	r0, 800882a <_svfiprintf_r+0x2e>
 8008820:	230c      	movs	r3, #12
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e0d1      	b.n	80089ce <_svfiprintf_r+0x1d2>
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	616b      	str	r3, [r5, #20]
 800882e:	2300      	movs	r3, #0
 8008830:	9309      	str	r3, [sp, #36]	; 0x24
 8008832:	2320      	movs	r3, #32
 8008834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008838:	f8cd 800c 	str.w	r8, [sp, #12]
 800883c:	2330      	movs	r3, #48	; 0x30
 800883e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089e8 <_svfiprintf_r+0x1ec>
 8008842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	4623      	mov	r3, r4
 800884c:	469a      	mov	sl, r3
 800884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008852:	b10a      	cbz	r2, 8008858 <_svfiprintf_r+0x5c>
 8008854:	2a25      	cmp	r2, #37	; 0x25
 8008856:	d1f9      	bne.n	800884c <_svfiprintf_r+0x50>
 8008858:	ebba 0b04 	subs.w	fp, sl, r4
 800885c:	d00b      	beq.n	8008876 <_svfiprintf_r+0x7a>
 800885e:	465b      	mov	r3, fp
 8008860:	4622      	mov	r2, r4
 8008862:	4629      	mov	r1, r5
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff6d 	bl	8008744 <__ssputs_r>
 800886a:	3001      	adds	r0, #1
 800886c:	f000 80aa 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008872:	445a      	add	r2, fp
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80a2 	beq.w	80089c4 <_svfiprintf_r+0x1c8>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888a:	f10a 0a01 	add.w	sl, sl, #1
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008896:	931a      	str	r3, [sp, #104]	; 0x68
 8008898:	4654      	mov	r4, sl
 800889a:	2205      	movs	r2, #5
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	4851      	ldr	r0, [pc, #324]	; (80089e8 <_svfiprintf_r+0x1ec>)
 80088a2:	f7f7 fcbd 	bl	8000220 <memchr>
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	b9d8      	cbnz	r0, 80088e2 <_svfiprintf_r+0xe6>
 80088aa:	06d0      	lsls	r0, r2, #27
 80088ac:	bf44      	itt	mi
 80088ae:	2320      	movmi	r3, #32
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	0711      	lsls	r1, r2, #28
 80088b6:	bf44      	itt	mi
 80088b8:	232b      	movmi	r3, #43	; 0x2b
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b2a      	cmp	r3, #42	; 0x2a
 80088c4:	d015      	beq.n	80088f2 <_svfiprintf_r+0xf6>
 80088c6:	9a07      	ldr	r2, [sp, #28]
 80088c8:	4654      	mov	r4, sl
 80088ca:	2000      	movs	r0, #0
 80088cc:	f04f 0c0a 	mov.w	ip, #10
 80088d0:	4621      	mov	r1, r4
 80088d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d6:	3b30      	subs	r3, #48	; 0x30
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d94e      	bls.n	800897a <_svfiprintf_r+0x17e>
 80088dc:	b1b0      	cbz	r0, 800890c <_svfiprintf_r+0x110>
 80088de:	9207      	str	r2, [sp, #28]
 80088e0:	e014      	b.n	800890c <_svfiprintf_r+0x110>
 80088e2:	eba0 0308 	sub.w	r3, r0, r8
 80088e6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	46a2      	mov	sl, r4
 80088f0:	e7d2      	b.n	8008898 <_svfiprintf_r+0x9c>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbb      	ittet	lt
 80088fe:	425b      	neglt	r3, r3
 8008900:	f042 0202 	orrlt.w	r2, r2, #2
 8008904:	9307      	strge	r3, [sp, #28]
 8008906:	9307      	strlt	r3, [sp, #28]
 8008908:	bfb8      	it	lt
 800890a:	9204      	strlt	r2, [sp, #16]
 800890c:	7823      	ldrb	r3, [r4, #0]
 800890e:	2b2e      	cmp	r3, #46	; 0x2e
 8008910:	d10c      	bne.n	800892c <_svfiprintf_r+0x130>
 8008912:	7863      	ldrb	r3, [r4, #1]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d135      	bne.n	8008984 <_svfiprintf_r+0x188>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfb8      	it	lt
 8008924:	f04f 33ff 	movlt.w	r3, #4294967295
 8008928:	3402      	adds	r4, #2
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f8 <_svfiprintf_r+0x1fc>
 8008930:	7821      	ldrb	r1, [r4, #0]
 8008932:	2203      	movs	r2, #3
 8008934:	4650      	mov	r0, sl
 8008936:	f7f7 fc73 	bl	8000220 <memchr>
 800893a:	b140      	cbz	r0, 800894e <_svfiprintf_r+0x152>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	eba0 000a 	sub.w	r0, r0, sl
 8008942:	fa03 f000 	lsl.w	r0, r3, r0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	4303      	orrs	r3, r0
 800894a:	3401      	adds	r4, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	4826      	ldr	r0, [pc, #152]	; (80089ec <_svfiprintf_r+0x1f0>)
 8008954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008958:	2206      	movs	r2, #6
 800895a:	f7f7 fc61 	bl	8000220 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d038      	beq.n	80089d4 <_svfiprintf_r+0x1d8>
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <_svfiprintf_r+0x1f4>)
 8008964:	bb1b      	cbnz	r3, 80089ae <_svfiprintf_r+0x1b2>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3307      	adds	r3, #7
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	3308      	adds	r3, #8
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008974:	4433      	add	r3, r6
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	e767      	b.n	800884a <_svfiprintf_r+0x4e>
 800897a:	fb0c 3202 	mla	r2, ip, r2, r3
 800897e:	460c      	mov	r4, r1
 8008980:	2001      	movs	r0, #1
 8008982:	e7a5      	b.n	80088d0 <_svfiprintf_r+0xd4>
 8008984:	2300      	movs	r3, #0
 8008986:	3401      	adds	r4, #1
 8008988:	9305      	str	r3, [sp, #20]
 800898a:	4619      	mov	r1, r3
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4620      	mov	r0, r4
 8008992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008996:	3a30      	subs	r2, #48	; 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_svfiprintf_r+0x1a8>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c5      	beq.n	800892c <_svfiprintf_r+0x130>
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	e7c3      	b.n	800892c <_svfiprintf_r+0x130>
 80089a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a8:	4604      	mov	r4, r0
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7f0      	b.n	8008990 <_svfiprintf_r+0x194>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7fd fc9f 	bl	80062fc <_printf_float>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	4606      	mov	r6, r0
 80089c2:	d1d6      	bne.n	8008972 <_svfiprintf_r+0x176>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af2c 	bmi.w	8008824 <_svfiprintf_r+0x28>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	b01d      	add	sp, #116	; 0x74
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	462a      	mov	r2, r5
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <_svfiprintf_r+0x1f8>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4638      	mov	r0, r7
 80089e0:	f7fd ff30 	bl	8006844 <_printf_i>
 80089e4:	e7eb      	b.n	80089be <_svfiprintf_r+0x1c2>
 80089e6:	bf00      	nop
 80089e8:	080093f4 	.word	0x080093f4
 80089ec:	080093fe 	.word	0x080093fe
 80089f0:	080062fd 	.word	0x080062fd
 80089f4:	08008745 	.word	0x08008745
 80089f8:	080093fa 	.word	0x080093fa

080089fc <__sfputc_r>:
 80089fc:	6893      	ldr	r3, [r2, #8]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	b410      	push	{r4}
 8008a04:	6093      	str	r3, [r2, #8]
 8008a06:	da08      	bge.n	8008a1a <__sfputc_r+0x1e>
 8008a08:	6994      	ldr	r4, [r2, #24]
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	db01      	blt.n	8008a12 <__sfputc_r+0x16>
 8008a0e:	290a      	cmp	r1, #10
 8008a10:	d103      	bne.n	8008a1a <__sfputc_r+0x1e>
 8008a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a16:	f7fe b8e9 	b.w	8006bec <__swbuf_r>
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	1c58      	adds	r0, r3, #1
 8008a1e:	6010      	str	r0, [r2, #0]
 8008a20:	7019      	strb	r1, [r3, #0]
 8008a22:	4608      	mov	r0, r1
 8008a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <__sfputs_r>:
 8008a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	460f      	mov	r7, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	18d5      	adds	r5, r2, r3
 8008a34:	42ac      	cmp	r4, r5
 8008a36:	d101      	bne.n	8008a3c <__sfputs_r+0x12>
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e007      	b.n	8008a4c <__sfputs_r+0x22>
 8008a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a40:	463a      	mov	r2, r7
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffda 	bl	80089fc <__sfputc_r>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d1f3      	bne.n	8008a34 <__sfputs_r+0xa>
 8008a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a50 <_vfiprintf_r>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	460d      	mov	r5, r1
 8008a56:	b09d      	sub	sp, #116	; 0x74
 8008a58:	4614      	mov	r4, r2
 8008a5a:	4698      	mov	r8, r3
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	b118      	cbz	r0, 8008a68 <_vfiprintf_r+0x18>
 8008a60:	6983      	ldr	r3, [r0, #24]
 8008a62:	b90b      	cbnz	r3, 8008a68 <_vfiprintf_r+0x18>
 8008a64:	f7ff f916 	bl	8007c94 <__sinit>
 8008a68:	4b89      	ldr	r3, [pc, #548]	; (8008c90 <_vfiprintf_r+0x240>)
 8008a6a:	429d      	cmp	r5, r3
 8008a6c:	d11b      	bne.n	8008aa6 <_vfiprintf_r+0x56>
 8008a6e:	6875      	ldr	r5, [r6, #4]
 8008a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a72:	07d9      	lsls	r1, r3, #31
 8008a74:	d405      	bmi.n	8008a82 <_vfiprintf_r+0x32>
 8008a76:	89ab      	ldrh	r3, [r5, #12]
 8008a78:	059a      	lsls	r2, r3, #22
 8008a7a:	d402      	bmi.n	8008a82 <_vfiprintf_r+0x32>
 8008a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7e:	f7ff f9ac 	bl	8007dda <__retarget_lock_acquire_recursive>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	071b      	lsls	r3, r3, #28
 8008a86:	d501      	bpl.n	8008a8c <_vfiprintf_r+0x3c>
 8008a88:	692b      	ldr	r3, [r5, #16]
 8008a8a:	b9eb      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x78>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7fe f8fe 	bl	8006c90 <__swsetup_r>
 8008a94:	b1c0      	cbz	r0, 8008ac8 <_vfiprintf_r+0x78>
 8008a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a98:	07dc      	lsls	r4, r3, #31
 8008a9a:	d50e      	bpl.n	8008aba <_vfiprintf_r+0x6a>
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	b01d      	add	sp, #116	; 0x74
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	4b7b      	ldr	r3, [pc, #492]	; (8008c94 <_vfiprintf_r+0x244>)
 8008aa8:	429d      	cmp	r5, r3
 8008aaa:	d101      	bne.n	8008ab0 <_vfiprintf_r+0x60>
 8008aac:	68b5      	ldr	r5, [r6, #8]
 8008aae:	e7df      	b.n	8008a70 <_vfiprintf_r+0x20>
 8008ab0:	4b79      	ldr	r3, [pc, #484]	; (8008c98 <_vfiprintf_r+0x248>)
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	bf08      	it	eq
 8008ab6:	68f5      	ldreq	r5, [r6, #12]
 8008ab8:	e7da      	b.n	8008a70 <_vfiprintf_r+0x20>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d4ed      	bmi.n	8008a9c <_vfiprintf_r+0x4c>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac2:	f7ff f98b 	bl	8007ddc <__retarget_lock_release_recursive>
 8008ac6:	e7e9      	b.n	8008a9c <_vfiprintf_r+0x4c>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	2320      	movs	r3, #32
 8008ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad6:	2330      	movs	r3, #48	; 0x30
 8008ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c9c <_vfiprintf_r+0x24c>
 8008adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ae0:	f04f 0901 	mov.w	r9, #1
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aec:	b10a      	cbz	r2, 8008af2 <_vfiprintf_r+0xa2>
 8008aee:	2a25      	cmp	r2, #37	; 0x25
 8008af0:	d1f9      	bne.n	8008ae6 <_vfiprintf_r+0x96>
 8008af2:	ebba 0b04 	subs.w	fp, sl, r4
 8008af6:	d00b      	beq.n	8008b10 <_vfiprintf_r+0xc0>
 8008af8:	465b      	mov	r3, fp
 8008afa:	4622      	mov	r2, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ff93 	bl	8008a2a <__sfputs_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	f000 80aa 	beq.w	8008c5e <_vfiprintf_r+0x20e>
 8008b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b0c:	445a      	add	r2, fp
 8008b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80a2 	beq.w	8008c5e <_vfiprintf_r+0x20e>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	9307      	str	r3, [sp, #28]
 8008b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b30:	931a      	str	r3, [sp, #104]	; 0x68
 8008b32:	4654      	mov	r4, sl
 8008b34:	2205      	movs	r2, #5
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	4858      	ldr	r0, [pc, #352]	; (8008c9c <_vfiprintf_r+0x24c>)
 8008b3c:	f7f7 fb70 	bl	8000220 <memchr>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	b9d8      	cbnz	r0, 8008b7c <_vfiprintf_r+0x12c>
 8008b44:	06d1      	lsls	r1, r2, #27
 8008b46:	bf44      	itt	mi
 8008b48:	2320      	movmi	r3, #32
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b4e:	0713      	lsls	r3, r2, #28
 8008b50:	bf44      	itt	mi
 8008b52:	232b      	movmi	r3, #43	; 0x2b
 8008b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b58:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5e:	d015      	beq.n	8008b8c <_vfiprintf_r+0x13c>
 8008b60:	9a07      	ldr	r2, [sp, #28]
 8008b62:	4654      	mov	r4, sl
 8008b64:	2000      	movs	r0, #0
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b70:	3b30      	subs	r3, #48	; 0x30
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d94e      	bls.n	8008c14 <_vfiprintf_r+0x1c4>
 8008b76:	b1b0      	cbz	r0, 8008ba6 <_vfiprintf_r+0x156>
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	e014      	b.n	8008ba6 <_vfiprintf_r+0x156>
 8008b7c:	eba0 0308 	sub.w	r3, r0, r8
 8008b80:	fa09 f303 	lsl.w	r3, r9, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	46a2      	mov	sl, r4
 8008b8a:	e7d2      	b.n	8008b32 <_vfiprintf_r+0xe2>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1d19      	adds	r1, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	9103      	str	r1, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfbb      	ittet	lt
 8008b98:	425b      	neglt	r3, r3
 8008b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b9e:	9307      	strge	r3, [sp, #28]
 8008ba0:	9307      	strlt	r3, [sp, #28]
 8008ba2:	bfb8      	it	lt
 8008ba4:	9204      	strlt	r2, [sp, #16]
 8008ba6:	7823      	ldrb	r3, [r4, #0]
 8008ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8008baa:	d10c      	bne.n	8008bc6 <_vfiprintf_r+0x176>
 8008bac:	7863      	ldrb	r3, [r4, #1]
 8008bae:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb0:	d135      	bne.n	8008c1e <_vfiprintf_r+0x1ce>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	9203      	str	r2, [sp, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfb8      	it	lt
 8008bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bc2:	3402      	adds	r4, #2
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cac <_vfiprintf_r+0x25c>
 8008bca:	7821      	ldrb	r1, [r4, #0]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7f7 fb26 	bl	8000220 <memchr>
 8008bd4:	b140      	cbz	r0, 8008be8 <_vfiprintf_r+0x198>
 8008bd6:	2340      	movs	r3, #64	; 0x40
 8008bd8:	eba0 000a 	sub.w	r0, r0, sl
 8008bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8008be0:	9b04      	ldr	r3, [sp, #16]
 8008be2:	4303      	orrs	r3, r0
 8008be4:	3401      	adds	r4, #1
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	482c      	ldr	r0, [pc, #176]	; (8008ca0 <_vfiprintf_r+0x250>)
 8008bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bf2:	2206      	movs	r2, #6
 8008bf4:	f7f7 fb14 	bl	8000220 <memchr>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d03f      	beq.n	8008c7c <_vfiprintf_r+0x22c>
 8008bfc:	4b29      	ldr	r3, [pc, #164]	; (8008ca4 <_vfiprintf_r+0x254>)
 8008bfe:	bb1b      	cbnz	r3, 8008c48 <_vfiprintf_r+0x1f8>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	3307      	adds	r3, #7
 8008c04:	f023 0307 	bic.w	r3, r3, #7
 8008c08:	3308      	adds	r3, #8
 8008c0a:	9303      	str	r3, [sp, #12]
 8008c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0e:	443b      	add	r3, r7
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	e767      	b.n	8008ae4 <_vfiprintf_r+0x94>
 8008c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c18:	460c      	mov	r4, r1
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	e7a5      	b.n	8008b6a <_vfiprintf_r+0x11a>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	3401      	adds	r4, #1
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	4619      	mov	r1, r3
 8008c26:	f04f 0c0a 	mov.w	ip, #10
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c30:	3a30      	subs	r2, #48	; 0x30
 8008c32:	2a09      	cmp	r2, #9
 8008c34:	d903      	bls.n	8008c3e <_vfiprintf_r+0x1ee>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0c5      	beq.n	8008bc6 <_vfiprintf_r+0x176>
 8008c3a:	9105      	str	r1, [sp, #20]
 8008c3c:	e7c3      	b.n	8008bc6 <_vfiprintf_r+0x176>
 8008c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c42:	4604      	mov	r4, r0
 8008c44:	2301      	movs	r3, #1
 8008c46:	e7f0      	b.n	8008c2a <_vfiprintf_r+0x1da>
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	462a      	mov	r2, r5
 8008c4e:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <_vfiprintf_r+0x258>)
 8008c50:	a904      	add	r1, sp, #16
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fd fb52 	bl	80062fc <_printf_float>
 8008c58:	4607      	mov	r7, r0
 8008c5a:	1c78      	adds	r0, r7, #1
 8008c5c:	d1d6      	bne.n	8008c0c <_vfiprintf_r+0x1bc>
 8008c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c60:	07d9      	lsls	r1, r3, #31
 8008c62:	d405      	bmi.n	8008c70 <_vfiprintf_r+0x220>
 8008c64:	89ab      	ldrh	r3, [r5, #12]
 8008c66:	059a      	lsls	r2, r3, #22
 8008c68:	d402      	bmi.n	8008c70 <_vfiprintf_r+0x220>
 8008c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c6c:	f7ff f8b6 	bl	8007ddc <__retarget_lock_release_recursive>
 8008c70:	89ab      	ldrh	r3, [r5, #12]
 8008c72:	065b      	lsls	r3, r3, #25
 8008c74:	f53f af12 	bmi.w	8008a9c <_vfiprintf_r+0x4c>
 8008c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7a:	e711      	b.n	8008aa0 <_vfiprintf_r+0x50>
 8008c7c:	ab03      	add	r3, sp, #12
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	462a      	mov	r2, r5
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <_vfiprintf_r+0x258>)
 8008c84:	a904      	add	r1, sp, #16
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7fd fddc 	bl	8006844 <_printf_i>
 8008c8c:	e7e4      	b.n	8008c58 <_vfiprintf_r+0x208>
 8008c8e:	bf00      	nop
 8008c90:	08009254 	.word	0x08009254
 8008c94:	08009274 	.word	0x08009274
 8008c98:	08009234 	.word	0x08009234
 8008c9c:	080093f4 	.word	0x080093f4
 8008ca0:	080093fe 	.word	0x080093fe
 8008ca4:	080062fd 	.word	0x080062fd
 8008ca8:	08008a2b 	.word	0x08008a2b
 8008cac:	080093fa 	.word	0x080093fa

08008cb0 <_sbrk_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	; (8008ccc <_sbrk_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fa fac0 	bl	8003240 <_sbrk>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_sbrk_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_sbrk_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20000334 	.word	0x20000334

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f000 f922 	bl	8008f20 <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__swrite>:
 8008cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	898b      	ldrh	r3, [r1, #12]
 8008cfa:	05db      	lsls	r3, r3, #23
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4616      	mov	r6, r2
 8008d02:	d505      	bpl.n	8008d10 <__swrite+0x1e>
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	2302      	movs	r3, #2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f000 f898 	bl	8008e40 <_lseek_r>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	f000 b817 	b.w	8008d58 <_write_r>

08008d2a <__sseek>:
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d32:	f000 f885 	bl	8008e40 <_lseek_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	bf15      	itete	ne
 8008d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d46:	81a3      	strheq	r3, [r4, #12]
 8008d48:	bf18      	it	ne
 8008d4a:	81a3      	strhne	r3, [r4, #12]
 8008d4c:	bd10      	pop	{r4, pc}

08008d4e <__sclose>:
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 b831 	b.w	8008db8 <_close_r>
	...

08008d58 <_write_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_write_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7fa fa19 	bl	800319e <_write>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_write_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_write_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000334 	.word	0x20000334

08008d7c <__assert_func>:
 8008d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7e:	4614      	mov	r4, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <__assert_func+0x2c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4605      	mov	r5, r0
 8008d88:	68d8      	ldr	r0, [r3, #12]
 8008d8a:	b14c      	cbz	r4, 8008da0 <__assert_func+0x24>
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <__assert_func+0x30>)
 8008d8e:	9100      	str	r1, [sp, #0]
 8008d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d94:	4906      	ldr	r1, [pc, #24]	; (8008db0 <__assert_func+0x34>)
 8008d96:	462b      	mov	r3, r5
 8008d98:	f000 f81e 	bl	8008dd8 <fiprintf>
 8008d9c:	f000 f8df 	bl	8008f5e <abort>
 8008da0:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <__assert_func+0x38>)
 8008da2:	461c      	mov	r4, r3
 8008da4:	e7f3      	b.n	8008d8e <__assert_func+0x12>
 8008da6:	bf00      	nop
 8008da8:	20000010 	.word	0x20000010
 8008dac:	08009405 	.word	0x08009405
 8008db0:	08009412 	.word	0x08009412
 8008db4:	08009440 	.word	0x08009440

08008db8 <_close_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d06      	ldr	r5, [pc, #24]	; (8008dd4 <_close_r+0x1c>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7fa fa07 	bl	80031d6 <_close>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_close_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_close_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000334 	.word	0x20000334

08008dd8 <fiprintf>:
 8008dd8:	b40e      	push	{r1, r2, r3}
 8008dda:	b503      	push	{r0, r1, lr}
 8008ddc:	4601      	mov	r1, r0
 8008dde:	ab03      	add	r3, sp, #12
 8008de0:	4805      	ldr	r0, [pc, #20]	; (8008df8 <fiprintf+0x20>)
 8008de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	f7ff fe31 	bl	8008a50 <_vfiprintf_r>
 8008dee:	b002      	add	sp, #8
 8008df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df4:	b003      	add	sp, #12
 8008df6:	4770      	bx	lr
 8008df8:	20000010 	.word	0x20000010

08008dfc <_fstat_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	; (8008e1c <_fstat_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7fa f9f0 	bl	80031ee <_fstat>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_fstat_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_fstat_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000334 	.word	0x20000334

08008e20 <_isatty_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d06      	ldr	r5, [pc, #24]	; (8008e3c <_isatty_r+0x1c>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	f7fa f9ef 	bl	800320e <_isatty>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_isatty_r+0x1a>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_isatty_r+0x1a>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000334 	.word	0x20000334

08008e40 <_lseek_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	; (8008e60 <_lseek_r+0x20>)
 8008e44:	4604      	mov	r4, r0
 8008e46:	4608      	mov	r0, r1
 8008e48:	4611      	mov	r1, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7fa f9e8 	bl	8003224 <_lseek>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_lseek_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_lseek_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000334 	.word	0x20000334

08008e64 <__ascii_mbtowc>:
 8008e64:	b082      	sub	sp, #8
 8008e66:	b901      	cbnz	r1, 8008e6a <__ascii_mbtowc+0x6>
 8008e68:	a901      	add	r1, sp, #4
 8008e6a:	b142      	cbz	r2, 8008e7e <__ascii_mbtowc+0x1a>
 8008e6c:	b14b      	cbz	r3, 8008e82 <__ascii_mbtowc+0x1e>
 8008e6e:	7813      	ldrb	r3, [r2, #0]
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	1e10      	subs	r0, r2, #0
 8008e76:	bf18      	it	ne
 8008e78:	2001      	movne	r0, #1
 8008e7a:	b002      	add	sp, #8
 8008e7c:	4770      	bx	lr
 8008e7e:	4610      	mov	r0, r2
 8008e80:	e7fb      	b.n	8008e7a <__ascii_mbtowc+0x16>
 8008e82:	f06f 0001 	mvn.w	r0, #1
 8008e86:	e7f8      	b.n	8008e7a <__ascii_mbtowc+0x16>

08008e88 <memmove>:
 8008e88:	4288      	cmp	r0, r1
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	eb01 0402 	add.w	r4, r1, r2
 8008e90:	d902      	bls.n	8008e98 <memmove+0x10>
 8008e92:	4284      	cmp	r4, r0
 8008e94:	4623      	mov	r3, r4
 8008e96:	d807      	bhi.n	8008ea8 <memmove+0x20>
 8008e98:	1e43      	subs	r3, r0, #1
 8008e9a:	42a1      	cmp	r1, r4
 8008e9c:	d008      	beq.n	8008eb0 <memmove+0x28>
 8008e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea6:	e7f8      	b.n	8008e9a <memmove+0x12>
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4601      	mov	r1, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	d100      	bne.n	8008eb2 <memmove+0x2a>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eba:	e7f7      	b.n	8008eac <memmove+0x24>

08008ebc <__malloc_lock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_lock+0x8>)
 8008ebe:	f7fe bf8c 	b.w	8007dda <__retarget_lock_acquire_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	2000032c 	.word	0x2000032c

08008ec8 <__malloc_unlock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__malloc_unlock+0x8>)
 8008eca:	f7fe bf87 	b.w	8007ddc <__retarget_lock_release_recursive>
 8008ece:	bf00      	nop
 8008ed0:	2000032c 	.word	0x2000032c

08008ed4 <_realloc_r>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	4614      	mov	r4, r2
 8008eda:	460e      	mov	r6, r1
 8008edc:	b921      	cbnz	r1, 8008ee8 <_realloc_r+0x14>
 8008ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	f7ff bbd4 	b.w	8008690 <_malloc_r>
 8008ee8:	b922      	cbnz	r2, 8008ef4 <_realloc_r+0x20>
 8008eea:	f7ff fb81 	bl	80085f0 <_free_r>
 8008eee:	4625      	mov	r5, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef4:	f000 f83a 	bl	8008f6c <_malloc_usable_size_r>
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d20f      	bcs.n	8008f1c <_realloc_r+0x48>
 8008efc:	4621      	mov	r1, r4
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff fbc6 	bl	8008690 <_malloc_r>
 8008f04:	4605      	mov	r5, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d0f2      	beq.n	8008ef0 <_realloc_r+0x1c>
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	f7fe ffd3 	bl	8007eb8 <memcpy>
 8008f12:	4631      	mov	r1, r6
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff fb6b 	bl	80085f0 <_free_r>
 8008f1a:	e7e9      	b.n	8008ef0 <_realloc_r+0x1c>
 8008f1c:	4635      	mov	r5, r6
 8008f1e:	e7e7      	b.n	8008ef0 <_realloc_r+0x1c>

08008f20 <_read_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_read_r+0x20>)
 8008f24:	4604      	mov	r4, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f7fa f918 	bl	8003164 <_read>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_read_r+0x1e>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_read_r+0x1e>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20000334 	.word	0x20000334

08008f44 <__ascii_wctomb>:
 8008f44:	b149      	cbz	r1, 8008f5a <__ascii_wctomb+0x16>
 8008f46:	2aff      	cmp	r2, #255	; 0xff
 8008f48:	bf85      	ittet	hi
 8008f4a:	238a      	movhi	r3, #138	; 0x8a
 8008f4c:	6003      	strhi	r3, [r0, #0]
 8008f4e:	700a      	strbls	r2, [r1, #0]
 8008f50:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f54:	bf98      	it	ls
 8008f56:	2001      	movls	r0, #1
 8008f58:	4770      	bx	lr
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4770      	bx	lr

08008f5e <abort>:
 8008f5e:	b508      	push	{r3, lr}
 8008f60:	2006      	movs	r0, #6
 8008f62:	f000 f833 	bl	8008fcc <raise>
 8008f66:	2001      	movs	r0, #1
 8008f68:	f7fa f8f2 	bl	8003150 <_exit>

08008f6c <_malloc_usable_size_r>:
 8008f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f70:	1f18      	subs	r0, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfbc      	itt	lt
 8008f76:	580b      	ldrlt	r3, [r1, r0]
 8008f78:	18c0      	addlt	r0, r0, r3
 8008f7a:	4770      	bx	lr

08008f7c <_raise_r>:
 8008f7c:	291f      	cmp	r1, #31
 8008f7e:	b538      	push	{r3, r4, r5, lr}
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	d904      	bls.n	8008f90 <_raise_r+0x14>
 8008f86:	2316      	movs	r3, #22
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f92:	b112      	cbz	r2, 8008f9a <_raise_r+0x1e>
 8008f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f98:	b94b      	cbnz	r3, 8008fae <_raise_r+0x32>
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f830 	bl	8009000 <_getpid_r>
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008faa:	f000 b817 	b.w	8008fdc <_kill_r>
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d00a      	beq.n	8008fc8 <_raise_r+0x4c>
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	d103      	bne.n	8008fbe <_raise_r+0x42>
 8008fb6:	2316      	movs	r3, #22
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	2001      	movs	r0, #1
 8008fbc:	e7e7      	b.n	8008f8e <_raise_r+0x12>
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	4798      	blx	r3
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7e0      	b.n	8008f8e <_raise_r+0x12>

08008fcc <raise>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <raise+0xc>)
 8008fce:	4601      	mov	r1, r0
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f7ff bfd3 	b.w	8008f7c <_raise_r>
 8008fd6:	bf00      	nop
 8008fd8:	20000010 	.word	0x20000010

08008fdc <_kill_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_kill_r+0x20>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	f7fa f8a1 	bl	8003130 <_kill>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d102      	bne.n	8008ff8 <_kill_r+0x1c>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b103      	cbz	r3, 8008ff8 <_kill_r+0x1c>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000334 	.word	0x20000334

08009000 <_getpid_r>:
 8009000:	f7fa b88e 	b.w	8003120 <_getpid>

08009004 <_init>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

08009010 <_fini>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr
